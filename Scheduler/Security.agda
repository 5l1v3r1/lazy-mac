open import Lattice using (Lattice ; Label)
import Scheduler.Base as S

module Scheduler.Security (­ЮЊЏ : Lattice) (A : Label ­ЮЊЏ) (­ЮЊб : S.Scheduler ­ЮЊЏ) where

  open import Scheduler.Base ­ЮЊЏ
  open Lattice.Lattice ­ЮЊЏ
  open Scheduler ­ЮЊб public

  open import Data.Nat
  open import Relation.Nullary
  open import Relation.Binary.PropositionalEquality

  -- Erasure of labeled events
  ╬хр┤▒ : Рѕђ {l} -> Event l -> Event l
  ╬хр┤▒ (Fork h n p) with h РіЉ? A
  ╬хр┤▒ (Fork h n p) | yes _ = Fork h n p
  ╬хр┤▒ (Fork h n p) | no ┬гp = Step
  ╬хр┤▒ e = e

  -- Erasure of labeled messages
  ╬хРѓЂр┤╣ : Рѕђ {l} -> Dec (l РіЉ A) -> Message l -> Message l
  ╬хРѓЂр┤╣ (yes p) (l , n , e) = l , n , ╬хр┤▒ e
  ╬хРѓЂр┤╣ (no ┬гp) (l , n , e) = l , n , РѕЎ

  ╬хр┤╣ : Рѕђ {l} -> Message l -> Message l
  ╬хр┤╣ = ╬хРѓЂр┤╣ (_ РіЉ? A)


  record NI-Sch : SetРѓЂ where
    constructor Sec
    field
      ╬х╦б  : State -> State
      _РЅѕ╦б_ : State -> State -> Set  -- I expect this to be equivalent to the kerner of the erasure function, i.e. sРѓЂ РЅѕ╦б sРѓѓ РЄћ ╬х╦б sРѓЂ РЅА ╬х╦б sРѓѓ

      ╬х-sch-dist : Рѕђ {sРѓЂ sРѓѓ : State} {l} {m : Message l} ->  sРѓЂ РЪХ sРѓѓ РєЉ m -> (╬х╦б sРѓЂ) РЪХ (╬х╦б sРѓѓ) РєЉ (╬хр┤╣ m)
      ╬х-sch-РЅА : Рѕђ {sРѓЂ sРѓѓ l} {m : Message l} -> l РІц A -> sРѓЂ РЪХ sРѓѓ РєЉ m -> sРѓЂ РЅѕ╦б sРѓѓ
      determinism╦б : Рѕђ {l n e} {sРѓЂ sРѓѓ sРѓЃ : State} -> sРѓЂ РЪХ sРѓѓ РєЉ (l , n , e) -> sРѓЂ РЪХ sРѓЃ РєЉ (l , n , e) -> sРѓѓ РЅА sРѓЃ

      -- Annotated low-equivalence
      _РЅѕ╦б-РЪе_,_РЪЕ_ : State -> РёЋ -> РёЋ -> State -> Set
      offsetРѓЂ : {sРѓЂ sРѓѓ : State} -> sРѓЂ РЅѕ╦б sРѓѓ -> РёЋ
      offsetРѓѓ : {sРѓЂ sРѓѓ : State} -> sРѓЂ РЅѕ╦б sРѓѓ -> РёЋ
      align : Рѕђ {sРѓЂ sРѓѓ} -> (eq : sРѓЂ РЅѕ╦б sРѓѓ) -> sРѓЂ РЅѕ╦б-РЪе offsetРѓЂ eq , offsetРѓѓ eq РЪЕ sРѓѓ
      forget : Рѕђ {sРѓЂ sРѓѓ n m} -> sРѓЂ РЅѕ╦б-РЪе n , m РЪЕ sРѓѓ -> sРѓЂ РЅѕ╦б sРѓѓ
