import Lattice as L

-- A is the security level of the attacker
module Sequential.Erasure (­ЮЊЏ : L.Lattice) (A : L.Label ­ЮЊЏ) where

open import Types ­ЮЊЏ
open import Sequential.Calculus ­ЮЊЏ
open import Sequential.Semantics ­ЮЊЏ

open import Data.Sum
open import Relation.Binary.PropositionalEquality hiding (subst ; [_])
open import Relation.Nullary
open import Data.Empty

-- A view over sensitive (secret) computation types.
-- A is the attacker's security level
data Secret : Ty -> Set where  Macр┤┤ : Рѕђ {h ¤ё} -> (hРІцA : h РІц A) -> Secret (Mac h ¤ё)

-- A view over insensitive (public) types.
-- A is the attacker's security level
data Public : Ty -> Set where
  Macр┤И : Рѕђ {¤ё l} -> (lРіЉA : l РіЉ A) -> Public (Mac l ¤ё)
  Res : Рѕђ {¤ё l} -> (lРіЉ?A : Dec (l РіЉ A)) -> Public (Res l ¤ё)
  №╝ѕ№╝Ѕ : Public №╝ѕ№╝Ѕ
  Bool : Public Bool
  Id : Рѕђ {¤ё} ->  Public (Id ¤ё)
  Fun : Рѕђ {╬▒ ╬▓} -> Public (╬▒ => ╬▓)
  Addr : Public Addr

-- Secret and insensitive are mutually exclusive
secretNotPublic : Рѕђ {¤ё} -> Secret ¤ё -> Public ¤ё -> РіЦ
secretNotPublic (Macр┤┤ ┬гp) (Macр┤И p) = ┬гp p

Level : Ty -> Set
Level ¤ё = (Secret ¤ё) Ріј (Public ¤ё)

isSecret? : (¤ё : Ty) -> Level ¤ё
isSecret? №╝ѕ№╝Ѕ = injРѓѓ №╝ѕ№╝Ѕ
isSecret? Bool = injРѓѓ Bool
isSecret? (¤ё => ¤ёРѓЂ) = injРѓѓ Fun
isSecret? (Mac l ¤ё) with l РіЉ? A
isSecret? (Mac l ¤ё) | yes p = injРѓѓ (Macр┤И p)
isSecret? (Mac l ¤ё) | no ┬гp = injРѓЂ (Macр┤┤ ┬гp)
isSecret? (Res l ¤ё) = injРѓѓ (Res (l РіЉ? A))
isSecret? (Id ¤ё) = injРѓѓ Id
isSecret? Addr = injРѓѓ Addr
--------------------------------------------------------------------------------

╬хрхђ : Рѕђ {¤ё ¤ђ} -> Term ¤ђ ¤ё -> Term ¤ђ ¤ё
╬хрхђ №╝ѕ№╝Ѕ = №╝ѕ№╝Ѕ
╬хрхђ True = True
╬хрхђ False = False
╬хрхђ (Id t) = Id (╬хрхђ t)
╬хрхђ (unId t) = unId (╬хрхђ t)
╬хрхђ (Var ¤ёРѕѕ¤ђ) = Var ¤ёРѕѕ¤ђ
╬хрхђ (Abs t) = Abs (╬хрхђ t)
╬хрхђ (App t tРѓЂ) = App (╬хрхђ t) (╬хрхђ tРѓЂ)
╬хрхђ (If t Then tРѓЂ Else tРѓѓ) = If (╬хрхђ t) Then (╬хрхђ tРѓЂ) Else (╬хрхђ tРѓѓ)
╬хрхђ (Return l t) = Return l (╬хрхђ t)
╬хрхђ (t >>= tРѓЂ) = (╬хрхђ t) >>= (╬хрхђ tРѓЂ)
╬хрхђ (Mac l t) = Mac l (╬хрхђ t)
╬хрхђ (Res l t) with l РіЉ? A
╬хрхђ (Res l t) | yes p = Res l (╬хрхђ t)
╬хрхђ (Res l t) | no ┬гp = Res l РѕЎ
╬хрхђ (label {h = H} lРіЉh t) with H РіЉ? A
╬хрхђ (label lРіЉh t) | yes p = label lРіЉh (╬хрхђ t)
╬хрхђ (label lРіЉh t) | no ┬гp = labelРѕЎ lРіЉh (╬хрхђ t)
╬хрхђ (labelРѕЎ lРіЉh t) = labelРѕЎ lРіЉh (╬хрхђ t)
╬хрхђ (unlabel lРіЉh t) = unlabel lРіЉh (╬хрхђ t)
╬хрхђ (new {h = H} lРіЉh t) with H РіЉ? A
... | yes p = new lРіЉh (╬хрхђ t)
... | no ┬гp = newРѕЎ lРіЉh (╬хрхђ t)
╬хрхђ (newРѕЎ lРіЉh t) = newРѕЎ lРіЉh (╬хрхђ t)
╬хрхђ (read lРіЉh t) = read lРіЉh (╬хрхђ t)
╬хрхђ (write {h = H} lРіЉh tРѓЂ tРѓѓ) with H РіЉ? A
... | yes p = write lРіЉh (╬хрхђ tРѓЂ) (╬хрхђ tРѓѓ)
... | no ┬гp = writeРѕЎ lРіЉh (╬хрхђ tРѓЂ) (╬хрхђ tРѓѓ)
╬хрхђ (writeРѕЎ lРіЉh tРѓЂ tРѓѓ) = writeРѕЎ lРіЉh (╬хрхђ tРѓЂ) (╬хрхђ tРѓѓ)
╬хрхђ (#[ n ]) = #[ n ]
╬хрхђ (#[ n ]р┤░) = #[ n ]р┤░
╬хрхђ (fork {h = h} lРіЉh t) with h РіЉ? A
... | yes _ = fork lРіЉh (╬хрхђ t)
... | no _ = forkРѕЎ lРіЉh (╬хрхђ t)
╬хрхђ (forkРѕЎ lРіЉh t) = forkРѕЎ lРіЉh (╬хрхђ t)
╬хрхђ (deepDup t) = deepDup (╬хрхђ t)
╬хрхђ РѕЎ = РѕЎ

╬хрхђ┬гVal : Рѕђ {¤ђ ¤ё} {t : Term ¤ђ ¤ё} -> ┬г Value t -> ┬г (Value (╬хрхђ t))
╬хрхђ┬гVal {t = №╝ѕ№╝Ѕ} ┬гval val-╬х = ┬гval val-╬х
╬хрхђ┬гVal {t = True} ┬гval val-╬х = ┬гval val-╬х
╬хрхђ┬гVal {t = False} ┬гval val-╬х = ┬гval val-╬х
╬хрхђ┬гVal {t = Id t} ┬гval val-╬х = ┬гval (Id t)
╬хрхђ┬гVal {t = unId t} ┬гval ()
╬хрхђ┬гVal {t = Var ¤ёРѕѕ¤ђ} ┬гval val-╬х = ┬гval val-╬х
╬хрхђ┬гVal {t = Abs t} ┬гval val-╬х = ┬гval (Abs t)
╬хрхђ┬гVal {t = App t tРѓЂ} ┬гval ()
╬хрхђ┬гVal {t = If t Then tРѓЂ Else tРѓѓ} ┬гval ()
╬хрхђ┬гVal {t = Return l t} ┬гval ()
╬хрхђ┬гVal {t = t >>= tРѓЂ} ┬гval ()
╬хрхђ┬гVal {t = Mac l t} ┬гval val-╬х = ┬гval (Mac t)
╬хрхђ┬гVal {t = Res l t} ┬гval val-╬х = ┬гval (Res t)
╬хрхђ┬гVal {t = label {h = H} lРіЉh t} ┬гval val-╬х with H РіЉ? A
╬хрхђ┬гVal {¤ђ} {._} {label lРіЉh t} ┬гval () | yes p
╬хрхђ┬гVal {¤ђ} {._} {label lРіЉh t} ┬гval () | no ┬гp
╬хрхђ┬гVal {t = labelРѕЎ lРіЉh t} ┬гval ()
╬хрхђ┬гVal {t = unlabel lРіЉh t} ┬гval ()
╬хрхђ┬гVal {t = new {h = H} lРіЉh t} ┬гval val-╬х with H РіЉ? A
╬хрхђ┬гVal {¤ђ} {._} {new lРіЉh t} ┬гval () | yes p
╬хрхђ┬гVal {¤ђ} {._} {new lРіЉh t} ┬гval () | no ┬гp
╬хрхђ┬гVal {t = newРѕЎ lРіЉh t} ┬гval ()
╬хрхђ┬гVal {t = read lРіЉh t} ┬гval ()
╬хрхђ┬гVal {t = write {h = H} lРіЉh tРѓЂ tРѓѓ} ┬гval val-╬х with H РіЉ? A
╬хрхђ┬гVal {¤ђ} {._} {write lРіЉh tРѓЂ tРѓѓ} ┬гval () | yes p
╬хрхђ┬гVal {¤ђ} {._} {write lРіЉh tРѓЂ tРѓѓ} ┬гval () | no ┬гp
╬хрхђ┬гVal {t = writeРѕЎ lРіЉh tРѓЂ tРѓѓ} ┬гval ()
╬хрхђ┬гVal {t = #[ t ]} ┬гval val-╬х = ┬гval #[ t ]
╬хрхђ┬гVal {t = #[ t ]р┤░} ┬гval val-╬х = ┬гval #[ t ]р┤░
╬хрхђ┬гVal {t = fork {h = h} lРіЉh t} ┬гval val-╬х with h РіЉ? A
╬хрхђ┬гVal {t = fork lРіЉh t} ┬гval ()  | yes _
╬хрхђ┬гVal {t = fork lРіЉh t} ┬гval () | no _
╬хрхђ┬гVal {t = forkРѕЎ lРіЉh t} ┬гval ()
╬хрхђ┬гVal {t = deepDup t} ┬гval ()
╬хрхђ┬гVal {t = РѕЎ} ┬гval ()

╬хрхђ-Val : Рѕђ {¤ё ¤ђ} {v : Term ¤ђ ¤ё} -> Value v -> Value (╬хрхђ v)
╬хрхђ-Val №╝ѕ№╝Ѕ = №╝ѕ№╝Ѕ
╬хрхђ-Val True = True
╬хрхђ-Val False = False
╬хрхђ-Val (Abs t) = Abs (╬хрхђ t)
╬хрхђ-Val (Id t) = Id (╬хрхђ t)
╬хрхђ-Val {Mac l ¤ё} (Mac t) = Mac _
╬хрхђ-Val {Res l ¤ё} (Res t) with l РіЉ? A
╬хрхђ-Val {Res l ¤ё} (Res t) | yes p = Res (╬хрхђ t)
╬хрхђ-Val {Res l ¤ё} (Res t) | no ┬гp = Res РѕЎ
╬хрхђ-Val (#[ n ]) = #[ n ]
╬хрхђ-Val (#[ n ]р┤░) = #[ n ]р┤░

╬хрхђ┬гVar : Рѕђ {¤ђ ¤ё} {t : Term ¤ђ ¤ё} -> ┬г IsVar t -> ┬г (IsVar (╬хрхђ t))
╬хрхђ┬гVar {t = №╝ѕ№╝Ѕ} ┬гvar var-╬х = ┬гvar var-╬х
╬хрхђ┬гVar {t = True} ┬гvar var-╬х = ┬гvar var-╬х
╬хрхђ┬гVar {t = False} ┬гvar var-╬х = ┬гvar var-╬х
╬хрхђ┬гVar {t = Id t} ┬гvar ()
╬хрхђ┬гVar {t = unId t} ┬гvar ()
╬хрхђ┬гVar {t = Var ¤ёРѕѕ¤ђ} ┬гvar var-╬х = ┬гvar (Var ¤ёРѕѕ¤ђ)
╬хрхђ┬гVar {t = Abs t} ┬гvar ()
╬хрхђ┬гVar {t = App t tРѓЂ} ┬гvar ()
╬хрхђ┬гVar {t = If t Then tРѓЂ Else tРѓѓ} ┬гvar ()
╬хрхђ┬гVar {t = Return l t} ┬гvar ()
╬хрхђ┬гVar {t = t >>= tРѓЂ} ┬гvar ()
╬хрхђ┬гVar {t = Mac l t} ┬гvar ()
╬хрхђ┬гVar {t = Res l t} ┬гvar var-╬х with l РіЉ? A
╬хрхђ┬гVar {¤ђ} {._} {Res l t} ┬гvar () | yes p
╬хрхђ┬гVar {¤ђ} {._} {Res l t} ┬гvar () | no ┬гp
╬хрхђ┬гVar {t = label {h = H} lРіЉh t} ┬гvar var-╬х with H РіЉ? A
╬хрхђ┬гVar {¤ђ} {._} {label lРіЉh t} ┬гvar () | yes p
╬хрхђ┬гVar {¤ђ} {._} {label lРіЉh t} ┬гvar () | no ┬гp
╬хрхђ┬гVar {t = labelРѕЎ lРіЉh t} ┬гvar ()
╬хрхђ┬гVar {t = unlabel lРіЉh t} ┬гvar ()
╬хрхђ┬гVar {t = new {h = H} lРіЉh t} ┬гvar val-╬х with H РіЉ? A
╬хрхђ┬гVar {¤ђ} {._} {new lРіЉh t} ┬гvar () | yes p
╬хрхђ┬гVar {¤ђ} {._} {new lРіЉh t} ┬гvar () | no ┬гp
╬хрхђ┬гVar {t = newРѕЎ lРіЉh t} ┬гvar ()
╬хрхђ┬гVar {t = read lРіЉh t} ┬гvar ()
╬хрхђ┬гVar {t = write {h = H} lРіЉh tРѓЂ tРѓѓ} ┬гvar val-╬х with H РіЉ? A
╬хрхђ┬гVar {¤ђ} {._} {write lРіЉh tРѓЂ tРѓѓ} ┬гvar () | yes p
╬хрхђ┬гVar {¤ђ} {._} {write lРіЉh tРѓЂ tРѓѓ} ┬гvar () | no ┬гp
╬хрхђ┬гVar {t = writeРѕЎ lРіЉh tРѓЂ tРѓѓ} ┬гvar ()
╬хрхђ┬гVar {t = #[ t ]} ┬гvar ()
╬хрхђ┬гVar {t = #[ t ]р┤░} ┬гvar ()
╬хрхђ┬гVar {t = fork {h = h} lРіЉh t} ┬гvar var-╬х with h РіЉ? A
╬хрхђ┬гVar {t = fork lРіЉh t} ┬гvar () | yes _
╬хрхђ┬гVar {t = fork lРіЉh t} ┬гvar () | no _
╬хрхђ┬гVar {t = forkРѕЎ lРіЉh t} ┬гvar ()
╬хрхђ┬гVar {t = deepDup t} ┬гvar ()
╬хрхђ┬гVar {t = РѕЎ} ┬гvar ()

╬хрхђ┬гFork : Рѕђ {¤ђ ¤ё} {t : Term ¤ђ ¤ё} -> ┬г (IsFork t) -> ┬г (IsFork (╬хрхђ t))
╬хрхђ┬гFork {t = №╝ѕ№╝Ѕ} ┬гfork ()
╬хрхђ┬гFork {t = True} ┬гfork ()
╬хрхђ┬гFork {t = False} ┬гfork ()
╬хрхђ┬гFork {t = Id t} ┬гfork ()
╬хрхђ┬гFork {t = unId t} ┬гfork ()
╬хрхђ┬гFork {t = Var ¤ёРѕѕ¤ђ} ┬гfork ()
╬хрхђ┬гFork {t = Abs t} ┬гfork ()
╬хрхђ┬гFork {t = App t tРѓЂ} ┬гfork ()
╬хрхђ┬гFork {t = If t Then tРѓЂ Else tРѓѓ} ┬гfork ()
╬хрхђ┬гFork {t = Return l t} ┬гfork ()
╬хрхђ┬гFork {t = t >>= tРѓЂ} ┬гfork ()
╬хрхђ┬гFork {t = Mac l t} ┬гfork ()
╬хрхђ┬гFork {t = Res l t} ┬гfork ()
╬хрхђ┬гFork {t = label lРіЉh t} ┬гfork ()
╬хрхђ┬гFork {t = labelРѕЎ lРіЉh t} ┬гfork ()
╬хрхђ┬гFork {t = unlabel lРіЉh t} ┬гfork ()
╬хрхђ┬гFork {t = read x t} ┬гfork ()
╬хрхђ┬гFork {t = write {h = h} x t tРѓЂ} ┬гfork a with h РіЉ? A
╬хрхђ┬гFork {t = write x t tРѓЂ} ┬гfork () | yes p
╬хрхђ┬гFork {t = write x t tРѓЂ} ┬гfork () | no _
╬хрхђ┬гFork {t = writeРѕЎ x t tРѓЂ} ┬гfork ()
╬хрхђ┬гFork {t = new x t} ┬гfork ()
╬хрхђ┬гFork {t = newРѕЎ x t} ┬гfork ()
╬хрхђ┬гFork {t = #[ x ]} ┬гfork ()
╬хрхђ┬гFork {t = #[ x ]р┤░} ┬гfork ()
╬хрхђ┬гFork {t = fork lРіЉh t} ┬гfork x = ┬гfork (Fork lРіЉh t)
╬хрхђ┬гFork {t = forkРѕЎ lРіЉh t} ┬гfork x = ┬гfork (ForkРѕЎ lРіЉh t)
╬хрхђ┬гFork {t = deepDup t} ┬гfork ()
╬хрхђ┬гFork {t = РѕЎ} ┬гfork ()

open import Data.Maybe as M
open import Function

map-╬хрхђ : Рѕђ {l ¤ђ} ->  Heap l ¤ђ -> Heap l ¤ђ
map-╬хрхђ [] = []
map-╬хрхђ (t Рѕи ╬ћ) = (M.map ╬хрхђ t) Рѕи (map-╬хрхђ ╬ћ)
map-╬хрхђ РѕЎ = РѕЎ

-- ╬хр┤▒ : Рѕђ {l ¤ђ} -> Dec (l РіЉ A) ->  Heap l ¤ђ -> Heap l ¤ђ
-- ╬хр┤▒ (yes p) [] = []
-- ╬хр┤▒ (yes p) (mt Рѕи ╬ћ) = (M.map ╬хрхђ mt) Рѕи (╬хр┤▒ (yes p) ╬ћ)
-- ╬хр┤▒ (yes p) РѕЎ = РѕЎ
-- ╬хр┤▒ (no ┬гp) ╬ћ = РѕЎ

-- Proof irrelevance for ╬хр┤▒
-- ╬хр┤▒-ext : Рѕђ {l ¤ђ} -> (x y : Dec (l РіЉ A)) (╬ћ : Heap l ¤ђ) -> ╬хр┤▒ x ╬ћ РЅА ╬хр┤▒ y ╬ћ
-- ╬хр┤▒-ext (yes p) (yes pРѓЂ) [] = refl
-- ╬хр┤▒-ext (yes p) (yes pРѓЂ) (t Рѕи ╬ћ) rewrite ╬хр┤▒-ext (yes p) (yes pРѓЂ) ╬ћ = refl
-- ╬хр┤▒-ext (yes p) (yes pРѓЂ) РѕЎ = refl
-- ╬хр┤▒-ext (yes p) (no ┬гp) ╬ћ = РіЦ-elim (┬гp p)
-- ╬хр┤▒-ext (no ┬гp) (yes p) ╬ћ = РіЦ-elim (┬гp p)
-- ╬хр┤▒-ext (no ┬гp) (no ┬гpРѓЂ) ╬ћ = refl

-- Heaps Erasure Function
-- ╬хр┤┤ : Рѕђ {ls} -> Heaps ls -> Heaps ls
-- ╬хр┤┤ [] = []
-- ╬хр┤┤ (╬ћ Рѕи ╬Њ) = (╬хр┤▒ ( _ РіЉ? A) ╬ћ) Рѕи ╬хр┤┤ ╬Њ

╬хрХю : Рѕђ {¤ђ ¤ёРѓЂ ¤ёРѓѓ l} -> Cont l ¤ђ ¤ёРѓЂ ¤ёРѓѓ -> Cont l ¤ђ ¤ёРѓЂ ¤ёРѓѓ
╬хрХю (Var xРѕѕ¤ђ) = Var xРѕѕ¤ђ
╬хрХю (# xРѕѕ¤ђ) = # xРѕѕ¤ђ
╬хрХю {¤ёРѓѓ = ¤ёРѓѓ} (Then tРѓЂ Else tРѓѓ) = Then (╬хрхђ tРѓЂ) Else ╬хрхђ tРѓѓ
╬хрХю {¤ёРѓЂ = Mac .l ╬▒} {¤ёРѓѓ = Mac l ╬▓} (Bind t) = Bind (╬хрхђ t)
╬хрХю (unlabel {¤ё = ¤ё} p) = unlabel p
╬хрХю (write {H = H}  lРіЉh ¤ёРѕѕ¤ђ) with H РіЉ? A
... | yes p = write lРіЉh ¤ёРѕѕ¤ђ
... | no ┬гp = writeРѕЎ lРіЉh ¤ёРѕѕ¤ђ
╬хрХю (writeРѕЎ lРіЉh ¤ёРѕѕ¤ђ) = writeРѕЎ lРіЉh ¤ёРѕѕ¤ђ
╬хрХю (read lРіЉh) = read lРіЉh
╬хрХю unId = unId

-- Fully homomorphic erasure on stack
╬х╦б : Рѕђ {¤ёРѓЂ ¤ёРѓѓ ¤ђ l} -> Stack l ¤ђ ¤ёРѓЂ ¤ёРѓѓ -> Stack l ¤ђ ¤ёРѓЂ ¤ёРѓѓ
╬х╦б [] = []
╬х╦б (c Рѕи S) = (╬хрХю c) Рѕи ╬х╦б S
╬х╦б РѕЎ = РѕЎ

╬х : Рѕђ {l ¤ё} -> Dec (l РіЉ A) -> State l ¤ё -> State l ¤ё
╬х (no x) s = РѕЎ
╬х (yes y) РЪе ╬ћ , t , S РЪЕ = РЪе map-╬хрхђ ╬ћ , ╬хрхђ t , ╬х╦б S РЪЕ
╬х (yes y) РѕЎ = РѕЎ

--------------------------------------------------------------------------------

╬х-wken : Рѕђ {¤ё ¤ђРѓЂ ¤ђРѓѓ} -> (t : Term ¤ђРѓЂ ¤ё) (p : ¤ђРѓЂ Ріє ¤ђРѓѓ) -> ╬хрхђ (wken t p) РЅА wken (╬хрхђ t) p
╬х-wken №╝ѕ№╝Ѕ p = refl
╬х-wken True p = refl
╬х-wken False p = refl
╬х-wken (Id t) p rewrite ╬х-wken t p = refl
╬х-wken (unId t) p rewrite ╬х-wken t p = refl
╬х-wken (Var ¤ёРѕѕ¤ђ) p = refl
╬х-wken (Abs t) p with ╬х-wken t (cons p)
... | x rewrite x = refl
╬х-wken (App t tРѓЂ) p
  rewrite ╬х-wken t p | ╬х-wken tРѓЂ p = refl
╬х-wken (If t Then tРѓЂ Else tРѓѓ) p
  rewrite ╬х-wken t p | ╬х-wken tРѓЂ p | ╬х-wken tРѓѓ p = refl
╬х-wken (Return l t) p rewrite ╬х-wken t p = refl
╬х-wken (t >>= tРѓЂ) p
  rewrite ╬х-wken t p | ╬х-wken tРѓЂ p = refl
╬х-wken (Mac l t) p rewrite ╬х-wken t p = refl
╬х-wken (Res l t) p with l РіЉ? A
... | no _ = refl
... | yes _ rewrite ╬х-wken t p = refl
╬х-wken (label {h = H} lРіЉh t) p with H РіЉ? A
... | no ┬гp rewrite ╬х-wken t p = refl
... | yes _ rewrite ╬х-wken t p = refl
╬х-wken (labelРѕЎ lРіЉh t) p rewrite ╬х-wken t p = refl
╬х-wken (unlabel lРіЉh t) p rewrite ╬х-wken t p = refl
╬х-wken (read x t) p rewrite ╬х-wken t p = refl
╬х-wken (write {h = H} x t tРѓЂ) p with H РіЉ? A
... | yes _ rewrite ╬х-wken t p | ╬х-wken tРѓЂ p = refl
... | no _ rewrite ╬х-wken t p | ╬х-wken tРѓЂ p = refl
╬х-wken (writeРѕЎ x t tРѓЂ) p rewrite ╬х-wken t p | ╬х-wken tРѓЂ p = refl
╬х-wken (new {h = H} x t) p with H РіЉ? A
... | yes _  rewrite ╬х-wken t p = refl
... | no _ rewrite ╬х-wken t p = refl
╬х-wken (newРѕЎ x t) p rewrite ╬х-wken t p = refl
╬х-wken #[ n ] p = refl
╬х-wken #[ n ]р┤░ p = refl
╬х-wken (fork {h = h} lРіЉh t) p with h РіЉ? A
... | yes _ rewrite ╬х-wken t p = refl
... | no _ rewrite ╬х-wken t p = refl
╬х-wken (forkРѕЎ lРіЉh t) p rewrite ╬х-wken t p = refl
╬х-wken (deepDup t) p rewrite ╬х-wken t p = refl
╬х-wken РѕЎ p = refl

{-# REWRITE ╬х-wken #-}

--------------------------------------------------------------------------------


╬хрХю-wken : Рѕђ {¤ёРѓЂ ¤ёРѓѓ l ¤ђРѓЂ ¤ђРѓѓ} -> (C : Cont l ¤ђРѓЂ ¤ёРѓЂ ¤ёРѓѓ) (p : ¤ђРѓЂ Ріє ¤ђРѓѓ) -> ╬хрХю (wkenрХю C p) РЅА wkenрХю (╬хрХю C) p
╬хрХю-wken (Var ¤ёРѕѕ¤ђ) p = refl
╬хрХю-wken (# ¤ёРѕѕ¤ђ) p = refl
╬хрХю-wken (Then x Else xРѓЂ) p = refl
╬хрХю-wken (Bind x) p = refl
╬хрХю-wken (unlabel p) pРѓЂ = refl
╬хрХю-wken unId p = refl
╬хрХю-wken (write {H = H} x ¤ёРѕѕ¤ђ) p with H РіЉ? A
... | yes _ = refl
... | no _ = refl
╬хрХю-wken (writeРѕЎ x ¤ёРѕѕ¤ђ) p = refl
╬хрХю-wken (read x) p = refl

{-# REWRITE ╬хрХю-wken #-}

╬х╦б-wken : Рѕђ {¤ёРѓЂ ¤ёРѓѓ l ¤ђРѓЂ ¤ђРѓѓ} -> (S : Stack l ¤ђРѓЂ ¤ёРѓЂ ¤ёРѓѓ) (p : ¤ђРѓЂ Ріє ¤ђРѓѓ) -> ╬х╦б (wken╦б S p) РЅА wken╦б (╬х╦б S) p
╬х╦б-wken [] p = refl
╬х╦б-wken (C Рѕи S) p rewrite ╬х╦б-wken S p = refl
╬х╦б-wken РѕЎ p = refl

{-# REWRITE ╬х╦б-wken #-}

--------------------------------------------------------------------------------


╬х-subst : Рѕђ {¤ё ¤ё' ¤ђ} (tРѓЂ : Term ¤ђ ¤ё') (tРѓѓ : Term (¤ё' Рѕи ¤ђ) ¤ё) -> ╬хрхђ (subst tРѓЂ tРѓѓ) РЅА subst (╬хрхђ tРѓЂ) (╬хрхђ tРѓѓ)
╬х-subst = ╬х-tm-subst [] _
  where ╬х-var-subst  :  Рѕђ {l} {╬▒ ╬▓} (¤ђРѓЂ : Context) (¤ђРѓѓ : Context) (tРѓЂ : Term ¤ђРѓѓ ╬▒) (╬▓Рѕѕ¤ђ : ╬▓ РѕѕРЪе l РЪЕ (¤ђРѓЂ ++ [ ╬▒ ] ++ ¤ђРѓѓ))
                      ->  ╬хрхђ (var-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ ╬▓Рѕѕ¤ђ) РЅА var-subst ¤ђРѓЂ ¤ђРѓѓ (╬хрхђ tРѓЂ) ╬▓Рѕѕ¤ђ
        ╬х-var-subst [] ¤ђРѓѓ tРѓЂ РЪф here РЪФ = refl
        ╬х-var-subst [] ¤ђРѓЂ tРѓЂ (РЪф there ╬▓Рѕѕ¤ђ РЪФ) = refl
        ╬х-var-subst (╬▓ Рѕи ¤ђРѓЂ) ¤ђРѓѓ tРѓЂ РЪф here РЪФ = refl
        ╬х-var-subst {l} (¤ё Рѕи ¤ђРѓЂ) ¤ђРѓѓ tРѓЂ (РЪф there ╬▓Рѕѕ¤ђ РЪФ)
          rewrite ╬х-wken (var-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ РЪф ╬▓Рѕѕ¤ђ РЪФ) (drop {_} {¤ё} refl-Ріє) | ╬х-var-subst {l} ¤ђРѓЂ ¤ђРѓѓ tРѓЂ РЪф ╬▓Рѕѕ¤ђ РЪФ = refl

        ╬х-tm-subst : Рѕђ {¤ё ¤ё'} (¤ђРѓЂ : Context) (¤ђРѓѓ : Context) (tРѓЂ : Term ¤ђРѓѓ ¤ё') (tРѓѓ : Term (¤ђРѓЂ ++ [ ¤ё' ] ++ ¤ђРѓѓ) ¤ё)
                   ->  ╬хрхђ (tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ tРѓѓ) РЅА tm-subst ¤ђРѓЂ ¤ђРѓѓ (╬хрхђ tРѓЂ) (╬хрхђ tРѓѓ)
        ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ №╝ѕ№╝Ѕ = refl
        ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ True = refl
        ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ False = refl
        ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ (Id tРѓѓ) rewrite ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ tРѓѓ = refl
        ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ (unId tРѓѓ) rewrite ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ tРѓѓ = refl
        ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ (Var {l} РЪф ¤ёРѕѕ¤ђ РЪФ) rewrite ╬х-var-subst {l} ¤ђРѓЂ ¤ђРѓѓ tРѓЂ (РЪф Рѕѕр┤┐-Рѕѕ  ¤ёРѕѕ¤ђ РЪФ) = refl
        ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ (Abs tРѓѓ)  rewrite ╬х-tm-subst (_ Рѕи ¤ђРѓЂ) ¤ђРѓѓ tРѓЂ tРѓѓ = refl
        ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ (App tРѓѓ tРѓЃ)
          rewrite ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ tРѓѓ | ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ tРѓЃ = refl
        ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ (If tРѓѓ Then tРѓЃ Else tРѓё)
          rewrite ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ tРѓѓ | ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ tРѓЃ | ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ tРѓё = refl
        ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ (Return l tРѓѓ) rewrite ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ tРѓѓ = refl
        ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ (tРѓѓ >>= tРѓЃ)
          rewrite ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ tРѓѓ | ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ tРѓЃ = refl
        ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ (Mac l tРѓѓ) rewrite ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ tРѓѓ = refl
        ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ (Res l tРѓѓ) with l РіЉ? A
        ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ (Res l tРѓѓ) | yes p rewrite ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ tРѓѓ = refl
        ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ (Res l tРѓѓ) | no ┬гp = refl
        ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ (label {h = H} lРіЉh tРѓѓ) with H РіЉ? A
        ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ (label lРіЉh tРѓѓ) | yes p rewrite ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ tРѓѓ = refl
        ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ (label lРіЉh tРѓѓ) | no ┬гp rewrite ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ tРѓѓ = refl
        ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ (labelРѕЎ lРіЉh tРѓѓ) rewrite ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ tРѓѓ = refl
        ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ (unlabel lРіЉh tРѓѓ) rewrite ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ tРѓѓ = refl
        ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ (read x tРѓѓ) rewrite ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ tРѓѓ = refl
        ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ (write {h = H} x tРѓѓ tРѓЃ) with H РіЉ? A
        ... | yes _ rewrite ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ tРѓѓ | ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ tРѓЃ = refl
        ... | no _ rewrite ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ tРѓѓ | ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ tРѓЃ = refl
        ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ (writeРѕЎ x tРѓѓ tРѓЃ)
          rewrite ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ tРѓѓ | ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ tРѓЃ = refl
        ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ (new {h = H} x tРѓѓ) with H РіЉ? A
        ... | yes _ rewrite ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ tРѓѓ = refl
        ... | no _ rewrite ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ tРѓѓ = refl
        ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ (newРѕЎ x tРѓѓ) rewrite ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ tРѓѓ = refl
        ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ #[ n ] = refl
        ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ #[ n ]р┤░ = refl
        ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ (fork {h = h} lРіЉh tРѓѓ) with h РіЉ? A
        ... | yes _ rewrite ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ tРѓѓ = refl
        ... | no _ rewrite ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ tРѓѓ = refl
        ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ (forkРѕЎ lРіЉh tРѓѓ) rewrite ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ tРѓѓ = refl
        ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ (deepDup tРѓѓ) rewrite ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ tРѓѓ = refl
        ╬х-tm-subst ¤ђРѓЂ ¤ђРѓѓ tРѓЂ РѕЎ = refl


{-# REWRITE ╬х-subst #-}

╬х-deepDupрхђ-РЅА : Рѕђ {¤ђ ¤ё} -> (t : Term ¤ђ ¤ё) ->  ╬хрхђ (deepDupрхђ t) РЅА deepDupрхђ (╬хрхђ t)
╬х-deepDupрхђ-РЅА = ╬хрхђ-dup-ufv-РЅА []
  where ╬хрхђ-dup-ufv-РЅА : Рѕђ {¤ђ ¤ё} -> (vs : Vars ¤ђ) (t : Term ¤ђ ¤ё) ->  ╬хрхђ (dup-ufv vs t) РЅА dup-ufv vs (╬хрхђ t)
        ╬хрхђ-dup-ufv-РЅА vs №╝ѕ№╝Ѕ = refl
        ╬хрхђ-dup-ufv-РЅА vs True = refl
        ╬хрхђ-dup-ufv-РЅА vs False = refl
        ╬хрхђ-dup-ufv-РЅА vs (Id t)
          rewrite ╬хрхђ-dup-ufv-РЅА vs t = refl
        ╬хрхђ-dup-ufv-РЅА vs (unId t)
          rewrite ╬хрхђ-dup-ufv-РЅА vs t = refl
        ╬хрхђ-dup-ufv-РЅА vs (Var РЪф ¤ёРѕѕ¤ђ РЪФ) with memberР▒й (Рѕѕр┤┐-Рѕѕ ¤ёРѕѕ¤ђ) vs
        ╬хрхђ-dup-ufv-РЅА vs (Var РЪф ¤ёРѕѕ¤ђ РЪФ) | yes p = refl
        ╬хрхђ-dup-ufv-РЅА vs (Var РЪф ¤ёРѕѕ¤ђ РЪФ) | no ┬гp = refl
        ╬хрхђ-dup-ufv-РЅА vs (Abs t)
          rewrite ╬хрхђ-dup-ufv-РЅА (here Рѕи (mapР▒й there vs)) t = refl
        ╬хрхђ-dup-ufv-РЅА vs (App t tРѓЂ)
          rewrite ╬хрхђ-dup-ufv-РЅА vs t | ╬хрхђ-dup-ufv-РЅА vs tРѓЂ = refl
        ╬хрхђ-dup-ufv-РЅА vs (If t Then tРѓЂ Else tРѓѓ)
          rewrite ╬хрхђ-dup-ufv-РЅА vs t | ╬хрхђ-dup-ufv-РЅА vs tРѓЂ | ╬хрхђ-dup-ufv-РЅА vs tРѓѓ = refl
        ╬хрхђ-dup-ufv-РЅА vs (Return l t) rewrite ╬хрхђ-dup-ufv-РЅА vs t = refl
        ╬хрхђ-dup-ufv-РЅА vs (t >>= tРѓЂ)
          rewrite ╬хрхђ-dup-ufv-РЅА vs t | ╬хрхђ-dup-ufv-РЅА vs tРѓЂ = refl
        ╬хрхђ-dup-ufv-РЅА vs (Mac l t) rewrite ╬хрхђ-dup-ufv-РЅА vs t = refl
        ╬хрхђ-dup-ufv-РЅА vs (Res l t) with l РіЉ? A
        ╬хрхђ-dup-ufv-РЅА vs (Res l t) | yes p rewrite ╬хрхђ-dup-ufv-РЅА vs t = refl
        ╬хрхђ-dup-ufv-РЅА vs (Res l t) | no ┬гp = refl
        ╬хрхђ-dup-ufv-РЅА vs (label {h = H} lРіЉh t) with H РіЉ? A
        ╬хрхђ-dup-ufv-РЅА vs (label lРіЉh t) | yes p rewrite ╬хрхђ-dup-ufv-РЅА vs t = refl
        ╬хрхђ-dup-ufv-РЅА vs (label lРіЉh t) | no ┬гp rewrite ╬хрхђ-dup-ufv-РЅА vs t = refl
        ╬хрхђ-dup-ufv-РЅА vs (labelРѕЎ lРіЉh t) rewrite ╬хрхђ-dup-ufv-РЅА vs t = refl
        ╬хрхђ-dup-ufv-РЅА vs (unlabel lРіЉh t) rewrite ╬хрхђ-dup-ufv-РЅА vs t = refl
        ╬хрхђ-dup-ufv-РЅА vs (read x t) rewrite ╬хрхђ-dup-ufv-РЅА vs t = refl
        ╬хрхђ-dup-ufv-РЅА vs (write {h = H} x t tРѓЂ) with H РіЉ? A
        ... | yes _ rewrite ╬хрхђ-dup-ufv-РЅА vs t |  ╬хрхђ-dup-ufv-РЅА vs tРѓЂ = refl
        ... | no _ rewrite ╬хрхђ-dup-ufv-РЅА vs t |  ╬хрхђ-dup-ufv-РЅА vs tРѓЂ = refl
        ╬хрхђ-dup-ufv-РЅА vs (writeРѕЎ x t tРѓЂ) rewrite ╬хрхђ-dup-ufv-РЅА vs t |  ╬хрхђ-dup-ufv-РЅА vs tРѓЂ = refl
        ╬хрхђ-dup-ufv-РЅА vs (new {h = H} x t) with H РіЉ? A
        ... | yes _ rewrite ╬хрхђ-dup-ufv-РЅА vs t = refl
        ... | no _ rewrite ╬хрхђ-dup-ufv-РЅА vs t = refl
        ╬хрхђ-dup-ufv-РЅА vs (newРѕЎ x t) rewrite ╬хрхђ-dup-ufv-РЅА vs t = refl
        ╬хрхђ-dup-ufv-РЅА vs #[ n ] = refl
        ╬хрхђ-dup-ufv-РЅА vs #[ n ]р┤░ = refl
        ╬хрхђ-dup-ufv-РЅА vs (fork {h = h} lРіЉh t) with h РіЉ? A
        ... | yes _ rewrite ╬хрхђ-dup-ufv-РЅА vs t = refl
        ... | no _ rewrite ╬хрхђ-dup-ufv-РЅА vs t = refl
        ╬хрхђ-dup-ufv-РЅА vs (forkРѕЎ lРіЉh t) rewrite ╬хрхђ-dup-ufv-РЅА vs t = refl
        ╬хрхђ-dup-ufv-РЅА vs (deepDup t) rewrite ╬хрхђ-dup-ufv-РЅА vs t = refl
        ╬хрхђ-dup-ufv-РЅА vs РѕЎ = refl

{-# REWRITE ╬х-deepDupрхђ-РЅА #-}

--------------------------------------------------------------------------------
-- Heap lemmas

memberр┤▒ : Рѕђ {l ¤ђ ¤ђ' ¤ё} {╬ћ : Heap l ¤ђ} {t : Term ¤ђ' ¤ё} (¤ёРѕѕ¤ђ : ¤ё РѕѕРЪе l РЪЕр┤┐ ¤ђ) ->
           ¤ёРѕѕ¤ђ Рєд t Рѕѕр┤┤ ╬ћ -> ¤ёРѕѕ¤ђ Рєд (╬хрхђ t) Рѕѕр┤┤ (map-╬хрхђ ╬ћ)
memberр┤▒ {l} РЪф ¤ёРѕѕ¤ђ РЪФ = aux РЪф (Рѕѕр┤┐-Рѕѕ ¤ёРѕѕ¤ђ) РЪФ
  where aux : Рѕђ {¤ђ ¤ђ' ¤ё} {╬ћ : Heap l ¤ђ} {t : Term ¤ђ' ¤ё} (¤ёРѕѕ¤ђ : ¤ё РѕѕРЪе l РЪЕ ¤ђ)
            -> Memberр┤┤ (just t) ¤ёРѕѕ¤ђ ╬ћ -> Memberр┤┤ (just (╬хрхђ t)) ¤ёРѕѕ¤ђ (map-╬хрхђ ╬ћ)
        aux (РЪф here РЪФ) here = here
        aux (РЪф there ¤ёРѕѕ¤ђ' РЪФ) (there x) = there (aux РЪф ¤ёРѕѕ¤ђ' РЪФ x)

updateр┤▒ : Рѕђ {l ¤ђ ¤ђ' ¤ё} {╬ћ ╬ћ' : Heap l ¤ђ} {mt : Maybe (Term ¤ђ' ¤ё)} {¤ёРѕѕ¤ђ : ¤ё РѕѕРЪе l РЪЕ ¤ђ}
          -> Updateр┤┤ mt ¤ёРѕѕ¤ђ ╬ћ ╬ћ' -> Updateр┤┤ (M.map ╬хрхђ mt) ¤ёРѕѕ¤ђ (map-╬хрхђ ╬ћ) (map-╬хрхђ ╬ћ')
updateр┤▒ here = here
updateр┤▒ (there x) = there (updateр┤▒ x)

--------------------------------------------------------------------------------

-- Simulation Property
╬х-sim : Рѕђ {l ¤ё} {sРѓЂ sРѓѓ : State l ¤ё} (x : Dec (l РіЉ A)) -> sРѓЂ РЄЮ sРѓѓ -> ╬х x sРѓЂ РЄЮ ╬х x sРѓѓ
-- High-Computations
╬х-sim (no x) s = HoleРѓЂ
-- Low-Computations
╬х-sim (yes y) AppРѓЂ = AppРѓЂ
╬х-sim (yes y) (AppРѓѓ ╬▒Рѕѕ¤ђ) = AppРѓѓ ╬▒Рѕѕ¤ђ
╬х-sim (yes y) (VarРѓЂ ¤ёРѕѕ¤ђ tРѕѕ╬ћ ┬гval rр┤▒) = VarРѓЂ ¤ёРѕѕ¤ђ (memberр┤▒ ¤ёРѕѕ¤ђ tРѕѕ╬ћ) (╬хрхђ┬гVal ┬гval) (updateр┤▒ rр┤▒)
╬х-sim (yes y) (VarРѓЂ' ¤ёРѕѕ¤ђ vРѕѕ╬ћ val) = VarРѓЂ' ¤ёРѕѕ¤ђ (memberр┤▒ ¤ёРѕѕ¤ђ vРѕѕ╬ћ) (╬хрхђ-Val val)
╬х-sim (yes y) (VarРѓѓ ¤ёРѕѕ¤ђ val uр┤▒) = VarРѓѓ ¤ёРѕѕ¤ђ (╬хрхђ-Val val) (updateр┤▒ uр┤▒)
╬х-sim (yes y) If = If
╬х-sim (yes y) IfTrue = IfTrue
╬х-sim (yes y) IfFalse = IfFalse
╬х-sim (yes y) Return = Return
╬х-sim (yes y) BindРѓЂ = BindРѓЂ
╬х-sim (yes y) BindРѓѓ = BindРѓѓ
╬х-sim (yes y) (Label' {h = H} p) with H РіЉ? A
╬х-sim (yes y) (Label' pРѓЂ) | yes p = Label' pРѓЂ
╬х-sim (yes y) (Label' p) | no ┬гp = Label'РѕЎ p
╬х-sim (yes y) (Label'РѕЎ {h = H} p) with H РіЉ? A
╬х-sim (yes y) (Label'РѕЎ pРѓЂ) | yes p = Label'РѕЎ pРѓЂ
╬х-sim (yes y) (Label'РѕЎ p) | no ┬гp = Label'РѕЎ p
╬х-sim (yes y) (UnlabelРѓЂ p) = UnlabelРѓЂ p
╬х-sim (yes y) (UnlabelРѓѓ {l' = L} p) with L РіЉ? A
╬х-sim (yes y) (UnlabelРѓѓ pРѓЂ) | yes p = UnlabelРѓѓ pРѓЂ
╬х-sim (yes y) (UnlabelРѓѓ p) | no ┬гp = РіЦ-elim (┬гp (trans-РіЉ p y))
╬х-sim (yes y) UnIdРѓЂ = UnIdРѓЂ
╬х-sim (yes y) UnIdРѓѓ = UnIdРѓѓ
╬х-sim (yes y) (NewРѓЂ {H = H} ┬гvar) with H РіЉ? A
╬х-sim (yes y) (NewРѓЂ ┬гvar) | yes p = NewРѓЂ (╬хрхђ┬гVar ┬гvar)
╬х-sim (yes y) (NewРѓЂ ┬гvar) | no ┬гp = NewРѕЎРѓЂ (╬хрхђ┬гVar ┬гvar)
╬х-sim (yes y) (NewРѕЎРѓЂ ┬гvar) = NewРѕЎРѓЂ (╬хрхђ┬гVar ┬гvar)
╬х-sim (yes y) ReadРѓЂ = ReadРѓЂ
╬х-sim (yes y) (WriteРѓЂ {H = H}) with H РіЉ? A
╬х-sim (yes y) WriteРѓЂ | yes p = WriteРѓЂ
╬х-sim (yes y) WriteРѓЂ | no ┬гp = WriteРѕЎРѓЂ
╬х-sim (yes y) WriteРѕЎРѓЂ = WriteРѕЎРѓЂ
╬х-sim (yes y) HoleРѓЂ = HoleРѓЂ
╬х-sim (yes y) HoleРѓѓ = HoleРѓѓ

--------------------------------------------------------------------------------

╬хр┤┤ : Рѕђ {l} -> Dec (l РіЉ A) -> HeapРѕЎ l -> HeapРѕЎ l
╬хр┤┤ (yes p) РЪе ╬ћ РЪЕ = РЪе map-╬хрхђ ╬ћ РЪЕ
╬хр┤┤ (yes p) РѕЎ = РѕЎ
╬хр┤┤ (no ┬гp) ╬ћ = РѕЎ

╬хр┤┤-ext : Рѕђ {l} -> (x y : Dec (l РіЉ A)) (╬ћ : HeapРѕЎ l) -> ╬хр┤┤ x ╬ћ РЅА ╬хр┤┤ y ╬ћ
╬хр┤┤-ext (yes p) (yes pРѓЂ) РЪе x РЪЕ = refl
╬хр┤┤-ext (yes p) (yes pРѓЂ) РѕЎ = refl
╬хр┤┤-ext (yes p) (no ┬гp) ╬ћ = РіЦ-elim (┬гp p)
╬хр┤┤-ext (no ┬гp) (yes p) ╬ћ = РіЦ-elim (┬гp p)
╬хр┤┤-ext (no ┬гp) (no ┬гpРѓЂ) ╬ћ = refl

map-╬хр┤┤ : Рѕђ {ls} -> Heaps ls -> Heaps ls
map-╬хр┤┤ [] = []
map-╬хр┤┤ {l Рѕи ls} (╬ћ Рѕи ╬Њ) = ╬хр┤┤ (_ РіЉ? A) ╬ћ Рѕи map-╬хр┤┤ ╬Њ

╬хр┤╣ : Рѕђ {l} -> Dec (l РіЉ A) -> Memory l -> Memory l
╬хр┤╣ (yes p) M = M
╬хр┤╣ (no ┬гp) M = РѕЎ

map-╬хр┤╣ : Рѕђ {ls} -> Memories ls -> Memories ls
map-╬хр┤╣ [] = []
map-╬хр┤╣ (M Рѕи Ms) = (╬хр┤╣ (_ РіЉ? A) M) Рѕи (map-╬хр┤╣ Ms)

-- Erasure for Programs
╬хРѓЂр┤Й : Рѕђ {l ls ¤ё} -> (x : Dec (l РіЉ A)) -> Program l ls ¤ё -> Program l ls ¤ё
╬хРѓЂр┤Й (yes p) РЪе Ms , ╬Њ , t , S РЪЕ = РЪе map-╬хр┤╣ Ms , (map-╬хр┤┤ ╬Њ) , (╬хрхђ t) , (╬х╦б S) РЪЕ
╬хРѓЂр┤Й {l} {ls} {¤ё} (no ┬гp) (РЪе_,_,_,_РЪЕ {¤ђ = ¤ђ} Ms ╬Њ t S) = РЪе (map-╬хр┤╣ Ms) , map-╬хр┤┤ ╬Њ , РѕЎ {¤ђ = ¤ђ} , РѕЎ РЪЕ

writeр┤╣РѕЎ-РЅА : Рѕђ {H ls} {MsРѓЂ MsРѓѓ : Memories ls} {X Y : Memory H} -> H РІц A -> H Рєд X Рѕѕ╦б MsРѓЂ -> MsРѓѓ РЅћ MsРѓЂ [ H Рєд Y ]╦б -> (map-╬хр┤╣ MsРѓЂ) РЅА (map-╬хр┤╣ MsРѓѓ)
writeр┤╣РѕЎ-РЅА {H} HРІбA here here with H РіЉ? A
writeр┤╣РѕЎ-РЅА HРІбA here here | yes p = РіЦ-elim (HРІбA p)
writeр┤╣РѕЎ-РЅА HРІбA here here | no ┬гp = refl
writeр┤╣РѕЎ-РЅА HРІбA here (there {u = u} y) = РіЦ-elim (Рѕѕ-not-unique (update╦б-Рѕѕ y) u)
writeр┤╣РѕЎ-РЅА HРІбA (there {u = u} x) here = РіЦ-elim (Рѕѕ-not-unique (member╦б-Рѕѕ x) u)
writeр┤╣РѕЎ-РЅА HРІбA (there x) (there y) rewrite writeр┤╣РѕЎ-РЅА HРІбA x y = refl

memberр┤╣ : Рѕђ {l ls} {Ms : Memories ls} {M : Memory l} -> l РіЉ A -> l Рєд M Рѕѕ╦б Ms -> l Рєд M Рѕѕ╦б (map-╬хр┤╣ Ms)
memberр┤╣ {l} lРіЉA here with l РіЉ? A
... | yes _ = here
... | no ┬гp = РіЦ-elim (┬гp lРіЉA)
memberр┤╣ lРіЉA (there x) = there (memberр┤╣ lРіЉA x)

updateр┤╣ : Рѕђ {l ls} {Ms Ms' : Memories ls} {M : Memory l} -> l РіЉ A -> Ms' РЅћ Ms [ l Рєд M ]╦б -> (map-╬хр┤╣ Ms') РЅћ (map-╬хр┤╣ Ms) [ l Рєд M ]╦б
updateр┤╣ {l} lРіЉA here with l РіЉ? A
... | yes _ = here
... | no ┬гp = РіЦ-elim (┬гp lРіЉA)
updateр┤╣ lРіЉA (there x) = there (updateр┤╣ lРіЉA x)

memberр┤┤ : Рѕђ {l ls} {╬Њ : Heaps ls} {╬ћ : HeapРѕЎ l} -> (p : l РіЉ A) -> l Рєд ╬ћ Рѕѕр┤▒ ╬Њ -> l Рєд ╬хр┤┤ (yes p) ╬ћ Рѕѕр┤▒ map-╬хр┤┤ ╬Њ
memberр┤┤ {l} {╬ћ = ╬ћ}  lРіЉA here with l РіЉ? A
... | yes p rewrite ╬хр┤┤-ext (yes p) (yes lРіЉA) ╬ћ = here
... | no ┬гp = РіЦ-elim (┬гp lРіЉA)
memberр┤┤ lРіЉA (there x) = there (memberр┤┤ lРіЉA x)

updateр┤┤ : Рѕђ {l ls} {╬Њ ╬Њ' : Heaps ls} {╬ћ : HeapРѕЎ l} -> (p : l РіЉ A) -> ╬Њ' РЅћ ╬Њ [ l Рєд ╬ћ ]р┤▒ -> (map-╬хр┤┤ ╬Њ') РЅћ (map-╬хр┤┤ ╬Њ) [ l Рєд ╬хр┤┤ (yes p) ╬ћ ]р┤▒
updateр┤┤ {l} {╬ћ = ╬ћ} lРіЉA here with l РіЉ? A
... | yes p rewrite ╬хр┤┤-ext (yes p) (yes lРіЉA) ╬ћ = here
... | no ┬гp = РіЦ-elim (┬гp lРіЉA)
updateр┤┤ lРіЉA (there x) = there (updateр┤┤ lРіЉA x)

open import Data.Product using (projРѓЂ ; projРѓѓ)

╬хРѓЂр┤Й-sim : Рѕђ {l ls ¤ё} {pРѓЂ pРѓѓ : Program l ls ¤ё} (x : Dec (l РіЉ A)) -> pРѓЂ РЪ╝ pРѓѓ -> ╬хРѓЂр┤Й x pРѓЂ РЪ╝ ╬хРѓЂр┤Й x pРѓѓ
╬хРѓЂр┤Й-sim (yes p) (Pure lРѕѕ╬Њ step uр┤┤) = Pure (memberр┤┤ p lРѕѕ╬Њ) (╬х-sim (yes p) step) (updateр┤┤ p uр┤┤)
╬хРѓЂр┤Й-sim (yes p) (New {H = H} HРѕѕ╬Њ uр┤┤) with H РіЉ? A
╬хРѓЂр┤Й-sim (yes pРѓЂ) (New HРѕѕ╬Њ uр┤┤) | yes p = New (memberр┤╣ p HРѕѕ╬Њ) (updateр┤╣ p uр┤┤)
╬хРѓЂр┤Й-sim (yes p) (New {M = M} {¤ёРѕѕ¤ђ = РЪф ¤ёРѕѕ¤ђ РЪФ} {lРіЉh = lРіЉh}  HРѕѕ╬Њ uр┤┤) | no ┬гp
  rewrite writeр┤╣РѕЎ-РЅА ┬гp HРѕѕ╬Њ uр┤┤ = NewРѕЎ
╬хРѓЂр┤Й-sim (yes p) (NewРѕЎ {H = H}) with H РіЉ? A
╬хРѓЂр┤Й-sim (yes pРѓЂ) NewРѕЎ | yes p = NewРѕЎ
╬хРѓЂр┤Й-sim (yes p) NewРѕЎ | no ┬гp = NewРѕЎ
╬хРѓЂр┤Й-sim (yes p) (WriteРѓѓ {H = H} HРѕѕ╬Њ uр┤╣ u╦б) with H РіЉ? A
╬хРѓЂр┤Й-sim (yes pРѓЂ) (WriteРѓѓ HРѕѕ╬Њ uр┤╣ u╦б) | yes p = WriteРѓѓ (memberр┤╣ p HРѕѕ╬Њ) uр┤╣ (updateр┤╣ p u╦б)
╬хРѓЂр┤Й-sim (yes p) (WriteРѓѓ {lРіЉH = lРіЉH} HРѕѕ╬Њ uр┤╣ u╦б) | no ┬гp
  rewrite writeр┤╣РѕЎ-РЅА ┬гp HРѕѕ╬Њ u╦б = WriteРѕЎРѓѓ
╬хРѓЂр┤Й-sim (yes p) (Writeр┤░Рѓѓ {H = H} HРѕѕ╬Њ uр┤╣ u╦б) with H РіЉ? A
╬хРѓЂр┤Й-sim (yes pРѓЂ) (Writeр┤░Рѓѓ HРѕѕ╬Њ uр┤╣ u╦б) | yes p = Writeр┤░Рѓѓ (memberр┤╣ p HРѕѕ╬Њ) uр┤╣ (updateр┤╣ p u╦б)
╬хРѓЂр┤Й-sim (yes p) (Writeр┤░Рѓѓ {lРіЉH = lРіЉH} HРѕѕ╬Њ uр┤╣ u╦б) | no ┬гp
  rewrite writeр┤╣РѕЎ-РЅА ┬гp HРѕѕ╬Њ u╦б = WriteРѕЎРѓѓ
╬хРѓЂр┤Й-sim (yes p) (WriteРѕЎРѓѓ {H = H}) with H РіЉ? A
╬хРѓЂр┤Й-sim (yes pРѓЂ) WriteРѕЎРѓѓ | yes p = WriteРѕЎРѓѓ
╬хРѓЂр┤Й-sim (yes p) WriteРѕЎРѓѓ | no ┬гp = WriteРѕЎРѓѓ
╬хРѓЂр┤Й-sim {l} (yes p) (ReadРѓѓ lРѕѕ╬Њ nРѕѕM) with l РіЉ? A
╬хРѓЂр┤Й-sim (yes pРѓЂ) (ReadРѓѓ lРѕѕ╬Њ nРѕѕM) | yes p = ReadРѓѓ (memberр┤╣ pРѓЂ lРѕѕ╬Њ) nРѕѕM
╬хРѓЂр┤Й-sim (yes p) (ReadРѓѓ lРѕѕ╬Њ nРѕѕM) | no ┬гp = РіЦ-elim (┬гp p)
╬хРѓЂр┤Й-sim {l} (yes p') (Readр┤░Рѓѓ {L = L} {LРіЉl = LРіЉl} LРѕѕ╬Њ nРѕѕM) with L РіЉ? A
... | yes p = Readр┤░Рѓѓ (memberр┤╣ p LРѕѕ╬Њ) nРѕѕM
... | no ┬гp = РіЦ-elim (┬гp (trans-РіЉ LРіЉl p'))
╬хРѓЂр┤Й-sim (yes p) (DeepDupРѓЂ ┬гvar lРѕѕ╬Њ uр┤▒) = DeepDupРѓЂ (╬хрхђ┬гVar ┬гvar) (memberр┤┤ p lРѕѕ╬Њ) (updateр┤┤ p uр┤▒)
╬хРѓЂр┤Й-sim (yes lРіЉA) (DeepDupРѓѓ {LРіЉl = LРіЉl} ¤ёРѕѕ¤ђ LРѕѕ╬Њ tРѕѕ╬ћ lРѕѕ╬Њ uр┤▒)
  = DeepDupРѓѓ {LРіЉl = LРіЉl} ¤ёРѕѕ¤ђ (memberр┤┤ (trans-РіЉ LРіЉl lРіЉA) LРѕѕ╬Њ) (memberр┤▒ ¤ёРѕѕ¤ђ tРѕѕ╬ћ) (memberр┤┤ lРіЉA lРѕѕ╬Њ) (updateр┤┤ lРіЉA uр┤▒)
╬хРѓЂр┤Й-sim (yes p) Hole = Hole
╬хРѓЂр┤Й-sim (no ┬гp) (Pure lРѕѕ╬Њ step uр┤┤) = {!Hole!}
╬хРѓЂр┤Й-sim (no ┬гp) (New HРѕѕ╬Њ uр┤┤) = {!!}
╬хРѓЂр┤Й-sim (no ┬гp) NewРѕЎ = {!!}
╬хРѓЂр┤Й-sim (no ┬гp) (WriteРѓѓ HРѕѕ╬Њ uр┤╣ u╦б) = {!!}
╬хРѓЂр┤Й-sim (no ┬гp) (Writeр┤░Рѓѓ HРѕѕ╬Њ uр┤╣ u╦б) = {!!}
╬хРѓЂр┤Й-sim (no ┬гp) WriteРѕЎРѓѓ = {!!}
╬хРѓЂр┤Й-sim (no ┬гp) (ReadРѓѓ lРѕѕ╬Њ nРѕѕM) = {!!}
╬хРѓЂр┤Й-sim (no ┬гp) (Readр┤░Рѓѓ LРѕѕ╬Њ nРѕѕM) = {!!}
╬хРѓЂр┤Й-sim (no ┬гp) (DeepDupРѓЂ ┬гvar lРѕѕ╬Њ uр┤▒) = {!!}
╬хРѓЂр┤Й-sim (no ┬гp) (DeepDupРѓѓ ¤ёРѕѕ¤ђ LРѕѕ╬Њ tРѕѕ╬ћ lРѕѕ╬Њ uр┤▒) = {!!}
╬хРѓЂр┤Й-sim (no ┬гp) Hole = Hole

╬хр┤Й : Рѕђ {l ls ¤ё} -> Program l ls ¤ё -> Program l ls ¤ё
╬хр┤Й {l} = ╬хРѓЂр┤Й (l РіЉ? A)

╬хр┤Й-sim : Рѕђ {l ls ¤ё} {pРѓЂ pРѓѓ : Program l ls ¤ё} -> pРѓЂ РЪ╝ pРѓѓ -> ╬хр┤Й pРѓЂ РЪ╝ ╬хр┤Й pРѓѓ
╬хр┤Й-sim {l} = ╬хРѓЂр┤Й-sim (l РіЉ? A)

--------------------------------------------------------------------------------

writeр┤┤РѕЎ-РЅА : Рѕђ {H ls} {╬ЊРѓЂ ╬ЊРѓѓ : Heaps ls} {╬ћРѓЂ ╬ћРѓѓ : HeapРѕЎ H} -> H РІц A -> H Рєд ╬ћРѓЂ Рѕѕр┤▒ ╬ЊРѓЂ -> ╬ЊРѓѓ РЅћ ╬ЊРѓЂ [ H Рєд ╬ћРѓѓ ]р┤▒ -> (map-╬хр┤┤ ╬ЊРѓЂ) РЅА (map-╬хр┤┤ ╬ЊРѓѓ)
writeр┤┤РѕЎ-РЅА {H} HРІцA here here with H РіЉ? A
... | yes HРіЉA = РіЦ-elim (HРІцA HРіЉA)
... | no _ = refl
writeр┤┤РѕЎ-РЅА HРІцA here (there {u = u} uр┤┤) = РіЦ-elim (Рѕѕ-not-unique (updateр┤▒-Рѕѕ uр┤┤) u)
writeр┤┤РѕЎ-РЅА HРІцA (there {u = u} HРѕѕ╬Њ) here = РіЦ-elim (Рѕѕ-not-unique (memberр┤▒-Рѕѕ HРѕѕ╬Њ) u)
writeр┤┤РѕЎ-РЅА HРІцA (there HРѕѕ╬Њ) (there uр┤┤) rewrite writeр┤┤РѕЎ-РЅА HРІцA HРѕѕ╬Њ uр┤┤ = refl
