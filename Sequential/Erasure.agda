open import Types
import Lattice
open Lattice.Lattice ùìõ renaming (_‚âü_ to _‚âü·¥∏_)

module Sequential.Erasure (A : Label) where  -- A is the security level of the attacker

open import Sequential.Calculus
open import Sequential.Semantics
open import Data.Sum
open import Relation.Binary.PropositionalEquality hiding (subst ; [_])

-- A view over sensitive (secret) computation types.
-- A is the attacker's security level
data Secret : Ty -> Set where
  Mac·¥¥ : ‚àÄ {h œÑ} -> (h‚ã§A : h ‚ã§ A) -> Secret (Mac h œÑ)
  -- Res·¥¥ is not here because it is always erased homomorphically
  -- like Public types, except for the constructor Res.


-- A view over insensitive (public) types.
-- A is the attacker's security level
data Public : Ty -> Set where
  Mac·¥∏ : ‚àÄ {œÑ l} -> (l‚äëA : l ‚äë A) -> Public (Mac l œÑ)
  Res : ‚àÄ {œÑ l} -> (l‚äë?A : Dec (l ‚äë A)) -> Public (Res l œÑ)
  ÔºàÔºâ : Public ÔºàÔºâ
  Bool : Public Bool
  Id : ‚àÄ {œÑ} ->  Public (Id œÑ)
  Fun : ‚àÄ {Œ± Œ≤} -> Public (Œ± => Œ≤)

-- Secret and insensitive are mutually exclusive
secretNotPublic : ‚àÄ {œÑ} -> Secret œÑ -> Public œÑ -> ‚ä•
secretNotPublic (Mac·¥¥ ¬¨p) (Mac·¥∏ p) = ¬¨p p

Level : Ty -> Set
Level œÑ = (Secret œÑ) ‚äé (Public œÑ)

isSecret? : (œÑ : Ty) -> Level œÑ
isSecret? ÔºàÔºâ = inj‚ÇÇ ÔºàÔºâ
isSecret? Bool = inj‚ÇÇ Bool
isSecret? (œÑ => œÑ‚ÇÅ) = inj‚ÇÇ Fun
isSecret? (Mac l œÑ) with l ‚äë? A
isSecret? (Mac l œÑ) | yes p = inj‚ÇÇ (Mac·¥∏ p)
isSecret? (Mac l œÑ) | no ¬¨p = inj‚ÇÅ (Mac·¥¥ ¬¨p)
isSecret? (Res l œÑ) = inj‚ÇÇ (Res (l ‚äë? A))
isSecret? (Id œÑ) = inj‚ÇÇ Id

--------------------------------------------------------------------------------

open import Data.Product

Œµ·µó : ‚àÄ {œÑ œÄ}  -> Level œÑ -> Term œÄ œÑ -> Term œÄ œÑ
Œµ·µó x ÔºàÔºâ = ÔºàÔºâ
Œµ·µó x True = True
Œµ·µó x False = False
Œµ·µó x (Id t) = Id (Œµ·µó (isSecret? _) t)
Œµ·µó (inj‚ÇÅ x) (unId t) = ‚àô
Œµ·µó (inj‚ÇÇ y) (unId t) = unId (Œµ·µó (inj‚ÇÇ Id) t)
Œµ·µó x (Var x‚ààœÄ) = Var x‚ààœÄ  -- Can we kill variables as well?
Œµ·µó _ (Abs t) = Abs (Œµ·µó (isSecret? _) t)
Œµ·µó (inj‚ÇÅ x) (App t t‚ÇÅ) = ‚àô
Œµ·µó (inj‚ÇÇ y) (App t t‚ÇÅ) = App (Œµ·µó (inj‚ÇÇ Fun) t) (Œµ·µó (isSecret? _) t‚ÇÅ)
Œµ·µó (inj‚ÇÅ x) (If t Then t‚ÇÅ Else t‚ÇÇ) = ‚àô
Œµ·µó (inj‚ÇÇ y) (If t Then t‚ÇÅ Else t‚ÇÇ) = If (Œµ·µó (inj‚ÇÇ Bool) t) Then (Œµ·µó (inj‚ÇÇ y) t‚ÇÅ) Else (Œµ·µó (inj‚ÇÇ y) t‚ÇÇ)
Œµ·µó (inj‚ÇÅ x) (Return l t) = ‚àô
Œµ·µó (inj‚ÇÇ y) (Return l t) = Return l (Œµ·µó (isSecret? _) t)
Œµ·µó (inj‚ÇÅ x) (t >>= t‚ÇÅ) = ‚àô
Œµ·µó (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (t >>= t‚ÇÅ) = Œµ·µó (inj‚ÇÇ (Mac·¥∏ l‚äëA)) t >>= (Œµ·µó (inj‚ÇÇ Fun) t‚ÇÅ)
Œµ·µó (inj‚ÇÅ x) (Mac l t) = ‚àô
Œµ·µó (inj‚ÇÇ y) (Mac l t) = Mac l (Œµ·µó (isSecret? _) t)
Œµ·µó (inj‚ÇÅ ()) (Res l t)
Œµ·µó (inj‚ÇÇ (Res (yes p))) (Res l t) = Res l (Œµ·µó (isSecret? _) t)
Œµ·µó (inj‚ÇÇ (Res (no ¬¨p))) (Res l t) = Res l ‚àô
Œµ·µó (inj‚ÇÅ x) (label L‚äëH t) = ‚àô
Œµ·µó (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (label {h = H} L‚äëH t) with H ‚äë? A
Œµ·µó (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (label L‚äëH t) | yes p = label L‚äëH (Œµ·µó (isSecret? _) t)
Œµ·µó (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (label L‚äëH t) | no ¬¨p = label‚àô L‚äëH (Œµ·µó (isSecret? _) t)
Œµ·µó (inj‚ÇÅ x) (label‚àô L‚äëH t) = ‚àô
Œµ·µó (inj‚ÇÇ y) (label‚àô L‚äëH t) = label‚àô L‚äëH (Œµ·µó (isSecret? _) t)
Œµ·µó (inj‚ÇÅ x) (unlabel l‚äëh t) = ‚àô
Œµ·µó (inj‚ÇÇ (Mac·¥∏ L‚äëA)) (unlabel {Œ± = œÑ} L‚äëH t) with isSecret? œÑ
Œµ·µó (inj‚ÇÇ (Mac·¥∏ L‚äëA)) (unlabel L‚äëH t) | inj‚ÇÅ x = unlabel‚àô L‚äëH (Œµ·µó (isSecret? _) t)
Œµ·µó (inj‚ÇÇ (Mac·¥∏ L‚äëA)) (unlabel L‚äëH t) | inj‚ÇÇ y = unlabel L‚äëH (Œµ·µó (isSecret? _) t) -- This should be only inj‚ÇÇ due to transitivity
Œµ·µó (inj‚ÇÅ _) (unlabel‚àô L‚äëH t) = ‚àô
Œµ·µó (inj‚ÇÇ (Mac·¥∏ L‚äëA)) (unlabel‚àô L‚äëH t) = unlabel‚àô L‚äëH (Œµ·µó (isSecret? _) t)
Œµ·µó (inj‚ÇÅ x) (fork l‚äëh t) = ‚àô
Œµ·µó (inj‚ÇÇ y) (fork l‚äëh t) = fork l‚äëh (Œµ·µó (isSecret? _) t)
Œµ·µó x (deepDup t) = deepDup (Œµ·µó x t)
Œµ·µó x ‚àô = ‚àô

Œµ·µÄ : ‚àÄ {œÑ œÄ} -> Term œÄ œÑ -> Term œÄ œÑ
Œµ·µÄ {œÑ} t = Œµ·µó (isSecret? _) t

Œµ·µÄ¬¨Val : ‚àÄ {œÄ œÑ} {t : Term œÄ œÑ} -> ¬¨ Value t -> ¬¨ (Value (Œµ·µÄ t))
Œµ·µÄ¬¨Val = Œµ¬¨Val _ (isSecret? _)
  where Œµ¬¨Val : ‚àÄ {œÄ œÑ} -> (t : Term œÄ œÑ) (x : Level œÑ) -> ¬¨ (Value t) -> ¬¨ (Value (Œµ·µó x t))
        Œµ¬¨Val ÔºàÔºâ x ¬¨val val-Œµ = ¬¨val val-Œµ
        Œµ¬¨Val True x ¬¨val val-Œµ = ¬¨val val-Œµ
        Œµ¬¨Val False x ¬¨val val-Œµ = ¬¨val val-Œµ
        Œµ¬¨Val (Id t‚ÇÅ) x ¬¨val val-Œµ = ¬¨val (Id t‚ÇÅ)
        Œµ¬¨Val (unId t‚ÇÅ) (inj‚ÇÅ x) ¬¨val ()
        Œµ¬¨Val (unId t‚ÇÅ) (inj‚ÇÇ y) ¬¨val ()
        Œµ¬¨Val (Var œÑ‚ààœÄ) x ¬¨val val-Œµ = ¬¨val val-Œµ
        Œµ¬¨Val (Abs t‚ÇÅ) x ¬¨val val-Œµ = ¬¨val (Abs t‚ÇÅ)
        Œµ¬¨Val (App t‚ÇÅ t‚ÇÇ) (inj‚ÇÅ x) ¬¨val ()
        Œµ¬¨Val (App t‚ÇÅ t‚ÇÇ) (inj‚ÇÇ y) ¬¨val ()
        Œµ¬¨Val (If t‚ÇÅ Then t‚ÇÇ Else t‚ÇÉ) (inj‚ÇÅ x) ¬¨val ()
        Œµ¬¨Val (If t‚ÇÅ Then t‚ÇÇ Else t‚ÇÉ) (inj‚ÇÇ y) ¬¨val ()
        Œµ¬¨Val (Return l t‚ÇÅ) (inj‚ÇÅ x) ¬¨val ()
        Œµ¬¨Val (Return l t‚ÇÅ) (inj‚ÇÇ y) ¬¨val ()
        Œµ¬¨Val (t‚ÇÅ >>= t‚ÇÇ) (inj‚ÇÅ x) ¬¨val ()
        Œµ¬¨Val (t‚ÇÅ >>= t‚ÇÇ) (inj‚ÇÇ (Mac·¥∏ l‚äëA)) ¬¨val ()
        Œµ¬¨Val (Mac l t‚ÇÅ) x ¬¨val val-Œµ = ¬¨val (Mac t‚ÇÅ)
        Œµ¬¨Val (Res l t‚ÇÅ) x ¬¨val val-Œµ = ¬¨val (Res t‚ÇÅ)
        Œµ¬¨Val (label l‚äëh t‚ÇÅ) (inj‚ÇÅ x) ¬¨val ()
        Œµ¬¨Val (label {h = H} l‚äëh t‚ÇÅ) (inj‚ÇÇ (Mac·¥∏ l‚äëA)) ¬¨val val-Œµ with H ‚äë? A
        Œµ¬¨Val (label l‚äëh t‚ÇÅ) (inj‚ÇÇ (Mac·¥∏ l‚äëA)) ¬¨val () | yes p
        Œµ¬¨Val (label l‚äëh t‚ÇÅ) (inj‚ÇÇ (Mac·¥∏ l‚äëA)) ¬¨val () | no ¬¨p
        Œµ¬¨Val (label‚àô l‚äëh t‚ÇÅ) (inj‚ÇÅ x) ¬¨val ()
        Œµ¬¨Val (label‚àô l‚äëh t‚ÇÅ) (inj‚ÇÇ y) ¬¨val ()
        Œµ¬¨Val (unlabel l‚äëh t‚ÇÅ) (inj‚ÇÅ x) ¬¨val ()
        Œµ¬¨Val (unlabel {Œ± = œÑ} l‚äëh t‚ÇÅ) (inj‚ÇÇ (Mac·¥∏ l‚äëA)) ¬¨val val-Œµ with isSecret? œÑ
        Œµ¬¨Val (unlabel l‚äëh t‚ÇÅ) (inj‚ÇÇ (Mac·¥∏ l‚äëA)) ¬¨val () | inj‚ÇÅ x
        Œµ¬¨Val (unlabel l‚äëh t‚ÇÅ) (inj‚ÇÇ (Mac·¥∏ l‚äëA)) ¬¨val () | inj‚ÇÇ y
        Œµ¬¨Val (unlabel‚àô l‚äëh t‚ÇÅ) (inj‚ÇÅ x) ¬¨val ()
        Œµ¬¨Val (unlabel‚àô l‚äëh t‚ÇÅ) (inj‚ÇÇ (Mac·¥∏ l‚äëA)) ¬¨val ()
        Œµ¬¨Val (fork l‚äëh t‚ÇÅ) (inj‚ÇÅ x) ¬¨val ()
        Œµ¬¨Val (fork l‚äëh t‚ÇÅ) (inj‚ÇÇ y) ¬¨val ()
        Œµ¬¨Val (deepDup x) (inj‚ÇÅ x‚ÇÅ) ¬¨val ()
        Œµ¬¨Val (deepDup x) (inj‚ÇÇ y) ¬¨val ()
        Œµ¬¨Val ‚àô x ¬¨val ()

Œµ·µÄ-Val : ‚àÄ {œÑ œÄ} {v : Term œÄ œÑ} -> Public œÑ -> Value v -> Value (Œµ·µÄ v)
Œµ·µÄ-Val p ÔºàÔºâ = ÔºàÔºâ
Œµ·µÄ-Val p True = True
Œµ·µÄ-Val p False = False
Œµ·µÄ-Val p (Abs t) = Abs (Œµ·µó (isSecret? _) t)
Œµ·µÄ-Val p (Id t) = Id (Œµ·µó (isSecret? _) t)
Œµ·µÄ-Val {Mac l œÑ} p (Mac t) with isSecret? (Mac l œÑ)
Œµ·µÄ-Val {Mac l œÑ} p (Mac t) | inj‚ÇÅ x = ‚ä•-elim (secretNotPublic x p)
Œµ·µÄ-Val {Mac l œÑ} p (Mac t) | inj‚ÇÇ y = Mac (Œµ·µó (isSecret? œÑ) t)
Œµ·µÄ-Val {Res l œÑ} p (Res t) with isSecret? (Res l œÑ)
Œµ·µÄ-Val {Res l œÑ} p (Res t) | inj‚ÇÅ ()
Œµ·µÄ-Val {Res l œÑ} p‚ÇÅ (Res t) | inj‚ÇÇ (Res (yes p)) = Res (Œµ·µó (isSecret? œÑ) t)
Œµ·µÄ-Val {Res l œÑ} p (Res t) | inj‚ÇÇ (Res (no ¬¨p)) = Res ‚àô

Œµ·µó¬¨Var : ‚àÄ {œÄ œÑ} {t : Term œÄ œÑ} -> (x : Level œÑ) -> ¬¨ IsVar t -> ¬¨ (IsVar (Œµ·µó x t))
Œµ·µó¬¨Var {t = t} = Œµ¬¨Var t
  where Œµ¬¨Var : ‚àÄ {œÄ œÑ} -> (t : Term œÄ œÑ) (x : Level œÑ) -> ¬¨ (IsVar t) -> ¬¨ (IsVar (Œµ·µó x t))
        Œµ¬¨Var ÔºàÔºâ x ¬¨var var-Œµ = ¬¨var var-Œµ
        Œµ¬¨Var True x ¬¨var var-Œµ = ¬¨var var-Œµ
        Œµ¬¨Var False x ¬¨var var-Œµ = ¬¨var var-Œµ
        Œµ¬¨Var (Id t‚ÇÅ) x ¬¨var ()
        Œµ¬¨Var (unId t‚ÇÅ) (inj‚ÇÅ _) ¬¨var ()
        Œµ¬¨Var (unId t‚ÇÅ) (inj‚ÇÇ _) ¬¨var ()
        Œµ¬¨Var (Var œÑ‚ààœÄ) x ¬¨var _ = ¬¨var (Var œÑ‚ààœÄ)
        Œµ¬¨Var (Abs t‚ÇÅ) x ¬¨var ()
        Œµ¬¨Var (App t‚ÇÅ t‚ÇÇ) (inj‚ÇÅ _) ¬¨var ()
        Œµ¬¨Var (App t‚ÇÅ t‚ÇÇ) (inj‚ÇÇ _) ¬¨var ()
        Œµ¬¨Var (If t‚ÇÅ Then t‚ÇÇ Else t‚ÇÉ) (inj‚ÇÅ _) ¬¨var ()
        Œµ¬¨Var (If t‚ÇÅ Then t‚ÇÇ Else t‚ÇÉ) (inj‚ÇÇ _) ¬¨var ()
        Œµ¬¨Var (Return l t‚ÇÅ) (inj‚ÇÅ _) ¬¨var ()
        Œµ¬¨Var (Return l t‚ÇÅ) (inj‚ÇÇ _) ¬¨var ()
        Œµ¬¨Var (t‚ÇÅ >>= t‚ÇÇ) (inj‚ÇÅ _) ¬¨var ()
        Œµ¬¨Var (t‚ÇÅ >>= t‚ÇÇ) (inj‚ÇÇ (Mac·¥∏ l‚äëA)) ¬¨var ()
        Œµ¬¨Var (Mac l t‚ÇÅ) (inj‚ÇÅ _) ¬¨var ()
        Œµ¬¨Var (Mac l t‚ÇÅ) (inj‚ÇÇ _) ¬¨var ()
        Œµ¬¨Var (Res l t‚ÇÅ) (inj‚ÇÅ ()) ¬¨var _
        Œµ¬¨Var (Res l t‚ÇÅ) (inj‚ÇÇ (Res (yes p))) ¬¨var ()
        Œµ¬¨Var (Res l t‚ÇÅ) (inj‚ÇÇ (Res (no ¬¨p))) ¬¨var ()
        Œµ¬¨Var (label {h = H} l‚äëh t‚ÇÅ) (inj‚ÇÅ _) ¬¨var ()
        Œµ¬¨Var (label {h = H} l‚äëh t‚ÇÅ) (inj‚ÇÇ (Mac·¥∏ l‚äëA)) ¬¨var var-Œµ with H ‚äë? A
        Œµ¬¨Var (label l‚äëh t‚ÇÅ) (inj‚ÇÇ (Mac·¥∏ l‚äëA)) ¬¨var () | yes p
        Œµ¬¨Var (label l‚äëh t‚ÇÅ) (inj‚ÇÇ (Mac·¥∏ l‚äëA)) ¬¨var () | no ¬¨p
        Œµ¬¨Var (label‚àô l‚äëh t‚ÇÅ) (inj‚ÇÅ _) ¬¨var ()
        Œµ¬¨Var (label‚àô l‚äëh t‚ÇÅ) (inj‚ÇÇ _) ¬¨var ()
        Œµ¬¨Var (unlabel {Œ± = œÑ} l‚äëh t‚ÇÅ) (inj‚ÇÅ _) ¬¨var ()
        Œµ¬¨Var (unlabel {Œ± = œÑ} l‚äëh t‚ÇÅ) (inj‚ÇÇ (Mac·¥∏ l‚äëA)) ¬¨var var-Œµ with isSecret? œÑ
        Œµ¬¨Var (unlabel l‚äëh t‚ÇÅ) (inj‚ÇÇ (Mac·¥∏ l‚äëA)) ¬¨var () | inj‚ÇÅ x
        Œµ¬¨Var (unlabel l‚äëh t‚ÇÅ) (inj‚ÇÇ (Mac·¥∏ l‚äëA)) ¬¨var () | inj‚ÇÇ y
        Œµ¬¨Var (unlabel‚àô l‚äëh t‚ÇÅ) (inj‚ÇÅ _) ¬¨var ()
        Œµ¬¨Var (unlabel‚àô l‚äëh t‚ÇÅ) (inj‚ÇÇ (Mac·¥∏ l‚äëA)) ¬¨var ()
        Œµ¬¨Var (fork l‚äëh t‚ÇÅ) (inj‚ÇÅ _) ¬¨var ()
        Œµ¬¨Var (fork l‚äëh t‚ÇÅ) (inj‚ÇÇ _) ¬¨var ()
        Œµ¬¨Var (deepDup t‚ÇÅ) (inj‚ÇÅ _) ¬¨var ()
        Œµ¬¨Var (deepDup t‚ÇÅ) (inj‚ÇÇ _) ¬¨var ()
        Œµ¬¨Var ‚àô x ¬¨var ()

Œµ·µó-ext : ‚àÄ {œÑ œÄ} -> (x y : Level œÑ) (t : Term œÄ œÑ) -> Œµ·µó x t ‚â° Œµ·µó y t
Œµ·µó-ext x y ÔºàÔºâ = refl
Œµ·µó-ext x y True = refl
Œµ·µó-ext x y False = refl
Œµ·µó-ext x y (Id t) = refl
Œµ·µó-ext (inj‚ÇÅ _) (inj‚ÇÅ _) (unId t) = refl
Œµ·µó-ext (inj‚ÇÅ x) (inj‚ÇÇ y) (unId t) = ‚ä•-elim (secretNotPublic x y)
Œµ·µó-ext (inj‚ÇÇ y) (inj‚ÇÅ x) (unId t) = ‚ä•-elim (secretNotPublic x y)
Œµ·µó-ext (inj‚ÇÇ y) (inj‚ÇÇ y‚ÇÅ) (unId t) = refl
Œµ·µó-ext x y (Var x‚ààœÄ) = refl
Œµ·µó-ext x‚ÇÅ y (Abs t) = refl
Œµ·µó-ext (inj‚ÇÅ x) (inj‚ÇÅ x‚ÇÅ) (App t t‚ÇÅ) = refl
Œµ·µó-ext (inj‚ÇÅ x) (inj‚ÇÇ y) (App t t‚ÇÅ) = ‚ä•-elim (secretNotPublic x y)
Œµ·µó-ext (inj‚ÇÇ y) (inj‚ÇÅ x) (App t t‚ÇÅ) = ‚ä•-elim (secretNotPublic x y)
Œµ·µó-ext (inj‚ÇÇ y) (inj‚ÇÇ y‚ÇÅ) (App t t‚ÇÅ) = refl
Œµ·µó-ext (inj‚ÇÅ x) (inj‚ÇÅ x‚ÇÅ) (If t Then t‚ÇÅ Else t‚ÇÇ) = refl
Œµ·µó-ext (inj‚ÇÅ x) (inj‚ÇÇ y) (If t Then t‚ÇÅ Else t‚ÇÇ) = ‚ä•-elim (secretNotPublic x y)
Œµ·µó-ext (inj‚ÇÇ y) (inj‚ÇÅ x) (If t Then t‚ÇÅ Else t‚ÇÇ) = ‚ä•-elim (secretNotPublic x y)
Œµ·µó-ext (inj‚ÇÇ y) (inj‚ÇÇ y‚ÇÅ) (If t Then t‚ÇÅ Else t‚ÇÇ)
  rewrite Œµ·µó-ext (inj‚ÇÇ y) (inj‚ÇÇ y‚ÇÅ) t‚ÇÅ |  Œµ·µó-ext (inj‚ÇÇ y) (inj‚ÇÇ y‚ÇÅ) t‚ÇÇ = refl
Œµ·µó-ext (inj‚ÇÅ x) (inj‚ÇÅ x‚ÇÅ) (Return l t) = refl
Œµ·µó-ext (inj‚ÇÅ x) (inj‚ÇÇ y) (Return l t) = ‚ä•-elim (secretNotPublic x y)
Œµ·µó-ext (inj‚ÇÇ y) (inj‚ÇÅ x) (Return l t) = ‚ä•-elim (secretNotPublic x y)
Œµ·µó-ext (inj‚ÇÇ y) (inj‚ÇÇ y‚ÇÅ) (Return l t) = refl
Œµ·µó-ext (inj‚ÇÅ x) (inj‚ÇÅ x‚ÇÅ) (t >>= t‚ÇÅ) = refl
Œµ·µó-ext (inj‚ÇÅ x) (inj‚ÇÇ y) (t >>= t‚ÇÅ) = ‚ä•-elim (secretNotPublic x y)
Œµ·µó-ext (inj‚ÇÇ y) (inj‚ÇÅ x) (t >>= t‚ÇÅ) = ‚ä•-elim (secretNotPublic x y)
Œµ·µó-ext (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (inj‚ÇÇ (Mac·¥∏ l‚äëA‚ÇÅ)) (t >>= t‚ÇÅ)
  rewrite Œµ·µó-ext (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (inj‚ÇÇ (Mac·¥∏ l‚äëA‚ÇÅ)) t = refl
Œµ·µó-ext (inj‚ÇÅ x) (inj‚ÇÅ x‚ÇÅ) (Mac l t) = refl
Œµ·µó-ext (inj‚ÇÅ x) (inj‚ÇÇ y) (Mac l t) = ‚ä•-elim (secretNotPublic x y)
Œµ·µó-ext (inj‚ÇÇ y) (inj‚ÇÅ x) (Mac l t) = ‚ä•-elim (secretNotPublic x y)
Œµ·µó-ext (inj‚ÇÇ y) (inj‚ÇÇ y‚ÇÅ) (Mac l t) = refl
Œµ·µó-ext (inj‚ÇÅ ()) (inj‚ÇÅ x‚ÇÅ) (Res l t)
Œµ·µó-ext (inj‚ÇÅ ()) (inj‚ÇÇ y) (Res l t)
Œµ·µó-ext (inj‚ÇÇ y) (inj‚ÇÅ ()) (Res l t)
Œµ·µó-ext (inj‚ÇÇ (Res (yes p))) (inj‚ÇÇ (Res (yes p‚ÇÅ))) (Res l t) = refl
Œµ·µó-ext (inj‚ÇÇ (Res (yes p))) (inj‚ÇÇ (Res (no ¬¨p))) (Res l t) = ‚ä•-elim (¬¨p p)
Œµ·µó-ext (inj‚ÇÇ (Res (no ¬¨p))) (inj‚ÇÇ (Res (yes p))) (Res l t) = ‚ä•-elim (¬¨p p)
Œµ·µó-ext (inj‚ÇÇ (Res (no ¬¨p))) (inj‚ÇÇ (Res (no ¬¨p‚ÇÅ))) (Res l t) = refl
Œµ·µó-ext (inj‚ÇÅ x) (inj‚ÇÅ x‚ÇÅ) (label l‚äëh t) = refl
Œµ·µó-ext (inj‚ÇÅ x) (inj‚ÇÇ y) (label l‚äëh t) = ‚ä•-elim (secretNotPublic x y)
Œµ·µó-ext (inj‚ÇÇ y) (inj‚ÇÅ x) (label l‚äëh t) = ‚ä•-elim (secretNotPublic x y)
Œµ·µó-ext (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (inj‚ÇÇ (Mac·¥∏ l‚äëA‚ÇÅ)) (label l‚äëh t) = refl
Œµ·µó-ext (inj‚ÇÅ x) (inj‚ÇÅ x‚ÇÅ) (label‚àô l‚äëh t) = refl
Œµ·µó-ext (inj‚ÇÅ x) (inj‚ÇÇ y) (label‚àô l‚äëh t) = ‚ä•-elim (secretNotPublic x y)
Œµ·µó-ext (inj‚ÇÇ y) (inj‚ÇÅ x) (label‚àô l‚äëh t) = ‚ä•-elim (secretNotPublic x y)
Œµ·µó-ext (inj‚ÇÇ y) (inj‚ÇÇ y‚ÇÅ) (label‚àô l‚äëh t) = refl
Œµ·µó-ext (inj‚ÇÅ x) (inj‚ÇÅ x‚ÇÅ) (unlabel l‚äëh t) = refl
Œµ·µó-ext (inj‚ÇÅ x) (inj‚ÇÇ y) (unlabel l‚äëh t) = ‚ä•-elim (secretNotPublic x y)
Œµ·µó-ext (inj‚ÇÇ y) (inj‚ÇÅ x) (unlabel l‚äëh t) = ‚ä•-elim (secretNotPublic x y)
Œµ·µó-ext (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (inj‚ÇÇ (Mac·¥∏ l‚äëA‚ÇÅ)) (unlabel l‚äëh t) = refl
Œµ·µó-ext (inj‚ÇÅ x) (inj‚ÇÅ x‚ÇÅ) (unlabel‚àô l‚äëh t) = refl
Œµ·µó-ext (inj‚ÇÅ x) (inj‚ÇÇ y) (unlabel‚àô l‚äëh t) = ‚ä•-elim (secretNotPublic x y)
Œµ·µó-ext (inj‚ÇÇ y) (inj‚ÇÅ x) (unlabel‚àô l‚äëh t) = ‚ä•-elim (secretNotPublic x y)
Œµ·µó-ext (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (inj‚ÇÇ (Mac·¥∏ l‚äëA‚ÇÅ)) (unlabel‚àô l‚äëh t) = refl
Œµ·µó-ext (inj‚ÇÅ x) (inj‚ÇÅ x‚ÇÅ) (fork l‚äëh t) = refl
Œµ·µó-ext (inj‚ÇÅ x) (inj‚ÇÇ y) (fork l‚äëh t) = ‚ä•-elim (secretNotPublic x y)
Œµ·µó-ext (inj‚ÇÇ y) (inj‚ÇÅ x) (fork l‚äëh t) = ‚ä•-elim (secretNotPublic x y)
Œµ·µó-ext (inj‚ÇÇ y) (inj‚ÇÇ y‚ÇÅ) (fork l‚äëh t) = refl
Œµ·µó-ext (inj‚ÇÅ x) (inj‚ÇÅ x‚ÇÅ) (deepDup x‚ÇÇ) rewrite Œµ·µó-ext (inj‚ÇÅ x) (inj‚ÇÅ x‚ÇÅ) x‚ÇÇ = refl
Œµ·µó-ext (inj‚ÇÅ x) (inj‚ÇÇ y) (deepDup x‚ÇÅ) = ‚ä•-elim (secretNotPublic x y)
Œµ·µó-ext (inj‚ÇÇ y) (inj‚ÇÅ x) (deepDup x‚ÇÅ) = ‚ä•-elim (secretNotPublic x y)
Œµ·µó-ext (inj‚ÇÇ y) (inj‚ÇÇ y‚ÇÅ) (deepDup x‚ÇÅ) rewrite Œµ·µó-ext (inj‚ÇÇ y) (inj‚ÇÇ y‚ÇÅ) x‚ÇÅ = refl
Œµ·µó-ext x y ‚àô = refl

open import Data.Product as P
open import Data.Maybe as M
open import Function

Œµ·¥± : ‚àÄ {l œÄ} -> Dec (l ‚äë A) ->  Env l œÄ -> Env l œÄ
Œµ·¥± (yes p) [] = []
Œµ·¥± (yes p) (mt ‚à∑ Œî) = (M.map (Œµ·µó (isSecret? _)) mt) ‚à∑ (Œµ·¥± (yes p) Œî)
Œµ·¥± (yes p) ‚àô = ‚àô
Œµ·¥± (no ¬¨p) Œî = ‚àô

-- Proof irrelevance for Œµ·¥±
Œµ·¥±-ext : ‚àÄ {l œÄ} -> (x y : Dec (l ‚äë A)) (Œî : Env l œÄ) -> Œµ·¥± x Œî ‚â° Œµ·¥± y Œî
Œµ·¥±-ext (yes p) (yes p‚ÇÅ) [] = refl
Œµ·¥±-ext (yes p) (yes p‚ÇÅ) (t ‚à∑ Œî) rewrite Œµ·¥±-ext (yes p) (yes p‚ÇÅ) Œî = refl
Œµ·¥±-ext (yes p) (yes p‚ÇÅ) ‚àô = refl
Œµ·¥±-ext (yes p) (no ¬¨p) Œî = ‚ä•-elim (¬¨p p)
Œµ·¥±-ext (no ¬¨p) (yes p) Œî = ‚ä•-elim (¬¨p p)
Œµ·¥±-ext (no ¬¨p) (no ¬¨p‚ÇÅ) Œî = refl

-- Heap Erasure Function
Œµ·¥¥ : ‚àÄ {ls} -> Heap ls -> Heap ls
Œµ·¥¥ [] = []
Œµ·¥¥ (Œî ‚à∑ Œì) = (Œµ·¥± ( _ ‚äë? A) Œî) ‚à∑ Œµ·¥¥ Œì

--------------------------------------------------------------------------------

Œµ·∂ú : ‚àÄ {œÑ‚ÇÅ œÑ‚ÇÇ l} -> Cont l œÑ‚ÇÅ œÑ‚ÇÇ -> Cont l œÑ‚ÇÅ œÑ‚ÇÇ
Œµ·∂ú (Var x‚ààœÄ) = Var x‚ààœÄ
Œµ·∂ú (# x‚ààœÄ) = # x‚ààœÄ
Œµ·∂ú {œÑ‚ÇÇ = œÑ‚ÇÇ} (Then t‚ÇÅ Else t‚ÇÇ) = Then (Œµ·µÄ t‚ÇÅ) Else Œµ·µÄ t‚ÇÇ
Œµ·∂ú {œÑ‚ÇÅ = Mac .l Œ±} {œÑ‚ÇÇ = Mac l Œ≤} (Bind t) = Bind (Œµ·µÄ t)
Œµ·∂ú (unlabel {œÑ = œÑ} p) with isSecret? œÑ
Œµ·∂ú (unlabel p) | inj‚ÇÅ x = unlabel‚àô p
Œµ·∂ú (unlabel p) | inj‚ÇÇ y = unlabel p
Œµ·∂ú (unlabel‚àô p) = unlabel‚àô p
Œµ·∂ú unId = unId

-- This definition is inconvinient because we inspect the result of calling ŒµÀ¢,
-- hence it is not clear to Agda that it is homomorphic.
-- I propose to use the Stack label as an approximation
-- of the sensitivity of the computation.
-- For instance unId :: >>= t :: [] : Stack H, is a stack that at some point will yield
-- a computation Mac H.
--

-- Plan
-- 1) Add labels to Cont
-- 2) Tie Cont l in the >>= and unlabel constructor.
-- 3) Erase terms to ‚àô if the the label of the stack is H.
-- 4) The label of the stack corresponds to the security level of the term under evaluation
--    How can we enforce that ?

-- Fully homomorphic erasure on stack
ŒµÀ¢ : ‚àÄ {œÑ‚ÇÅ œÑ‚ÇÇ l} -> Stack l œÑ‚ÇÅ œÑ‚ÇÇ -> Stack l œÑ‚ÇÅ œÑ‚ÇÇ
ŒµÀ¢ [] = []
ŒµÀ¢ (c ‚à∑ S) = (Œµ·∂ú c) ‚à∑ ŒµÀ¢ S
ŒµÀ¢ ‚àô = ‚àô

--------------------------------------------------------------------------------

Œµ : ‚àÄ {l œÑ ls} -> Level (Mac l œÑ) ->  State ls l (Mac l œÑ) -> State ls l (Mac l œÑ)
Œµ {l} {œÑ} (inj‚ÇÅ ¬¨p) (‚ü®_,_,_‚ü© {œÄ = œÄ} Œì t S) = ‚ü® (Œµ·¥¥ Œì) , ‚àô {œÄ = œÄ} {{Mac l œÑ}} , ‚àô ‚ü©
Œµ (inj‚ÇÇ p) ‚ü® Œì , t , S ‚ü© = ‚ü® Œµ·¥¥ Œì , Œµ·µÄ t , ŒµÀ¢ S ‚ü©

--------------------------------------------------------------------------------

Œµ-wken : ‚àÄ {œÑ œÄ‚ÇÅ œÄ‚ÇÇ} -> (x : Level œÑ) -> (t : Term œÄ‚ÇÅ œÑ) (p : œÄ‚ÇÅ ‚äÜÀ° œÄ‚ÇÇ) -> Œµ·µó x (wken t p) ‚â° wken (Œµ·µó x t) p
Œµ-wken x ÔºàÔºâ p = refl
Œµ-wken x True p = refl
Œµ-wken x False p = refl
Œµ-wken x (Id t) p rewrite Œµ-wken (isSecret? _) t p = refl
Œµ-wken (inj‚ÇÅ x) (unId t) p = refl
Œµ-wken (inj‚ÇÇ y) (unId t) p rewrite Œµ-wken (inj‚ÇÇ Id) t p = refl
Œµ-wken x (Var x‚ààœÄ) p = refl
Œµ-wken x‚ÇÅ (Abs t) p rewrite Œµ-wken (isSecret? _) t (cons p) = refl
Œµ-wken (inj‚ÇÅ x) (App t t‚ÇÅ) p = refl
Œµ-wken (inj‚ÇÇ y) (App t t‚ÇÅ) p rewrite Œµ-wken (inj‚ÇÇ Fun) t p | Œµ-wken (isSecret? _) t‚ÇÅ p = refl
Œµ-wken (inj‚ÇÅ x) (If t Then t‚ÇÅ Else t‚ÇÇ) p = refl
Œµ-wken (inj‚ÇÇ y) (If t Then t‚ÇÅ Else t‚ÇÇ) p
  rewrite Œµ-wken (inj‚ÇÇ Bool) t p | Œµ-wken (inj‚ÇÇ y) t‚ÇÅ p | Œµ-wken (inj‚ÇÇ y) t‚ÇÇ p = refl
Œµ-wken (inj‚ÇÅ x) (Return l t) p = refl
Œµ-wken (inj‚ÇÇ y) (Return l t) p
  rewrite Œµ-wken (isSecret? _) t p = refl
Œµ-wken (inj‚ÇÅ x) (t >>= t‚ÇÅ) p = refl
Œµ-wken (inj‚ÇÇ (Mac·¥∏ y)) (t >>= t‚ÇÅ) p
  rewrite Œµ-wken (inj‚ÇÇ (Mac·¥∏ y)) t p | Œµ-wken (inj‚ÇÇ Fun)  t‚ÇÅ p = refl
Œµ-wken (inj‚ÇÅ x) (Mac l t) p = refl
Œµ-wken (inj‚ÇÇ y) (Mac l t) p
  rewrite Œµ-wken (isSecret? _) t p = refl
Œµ-wken (inj‚ÇÅ ()) (Res l t) p
Œµ-wken (inj‚ÇÇ (Res (yes p))) (Res l t) p‚ÇÅ
  rewrite Œµ-wken (isSecret? _) t p‚ÇÅ = refl
Œµ-wken (inj‚ÇÇ (Res (no ¬¨p))) (Res l t) p = refl
Œµ-wken (inj‚ÇÅ x) (label l‚äëh t) p = refl
Œµ-wken (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (label {h = H} l‚äëh t) p with H ‚äë? A
Œµ-wken (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (label l‚äëh t) p‚ÇÅ | yes p rewrite Œµ-wken (isSecret? _) t p‚ÇÅ = refl
Œµ-wken (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (label l‚äëh t) p | no ¬¨p rewrite Œµ-wken (isSecret? _) t p = refl
Œµ-wken (inj‚ÇÅ x) (label‚àô l‚äëh t) p = refl
Œµ-wken (inj‚ÇÇ y) (label‚àô l‚äëh t) p rewrite Œµ-wken (isSecret? _) t p = refl
Œµ-wken (inj‚ÇÅ x) (unlabel l‚äëh t) p = refl
Œµ-wken (inj‚ÇÇ (Mac·¥∏ L‚äëA)) (unlabel {Œ± = œÑ} l‚äëh t) p with isSecret? œÑ
Œµ-wken (inj‚ÇÇ (Mac·¥∏ L‚äëA)) (unlabel l‚äëh t) p | inj‚ÇÅ x rewrite Œµ-wken (isSecret? _) t p = refl
Œµ-wken (inj‚ÇÇ (Mac·¥∏ L‚äëA)) (unlabel l‚äëh t) p | inj‚ÇÇ y rewrite Œµ-wken (isSecret? _) t p = refl
Œµ-wken (inj‚ÇÅ x) (unlabel‚àô l‚äëh t) p = refl
Œµ-wken (inj‚ÇÇ (Mac·¥∏ L‚äëA)) (unlabel‚àô l‚äëh t) p rewrite Œµ-wken (isSecret? _) t p = refl
Œµ-wken (inj‚ÇÅ x) (fork l‚äëh t) p = refl
Œµ-wken (inj‚ÇÇ y) (fork {h = H} l‚äëh t) p rewrite Œµ-wken (isSecret? _) t p = refl
Œµ-wken (inj‚ÇÅ x) (deepDup x‚ÇÅ) p rewrite Œµ-wken (inj‚ÇÅ x) x‚ÇÅ p = refl
Œµ-wken (inj‚ÇÇ y) (deepDup x‚ÇÅ) p rewrite Œµ-wken (inj‚ÇÇ y) x‚ÇÅ p = refl
Œµ-wken x ‚àô p = refl

Œµ-subst : ‚àÄ {œÑ œÑ' œÄ} (t‚ÇÅ : Term œÄ œÑ') (t‚ÇÇ : Term (œÑ' ‚à∑ œÄ) œÑ) (x : Level œÑ) ->
                 Œµ·µó x (subst t‚ÇÅ t‚ÇÇ) ‚â° subst (Œµ·µÄ t‚ÇÅ) (Œµ·µó x t‚ÇÇ)
Œµ-subst {œÄ = œÄ} = Œµ-tm-subst [] œÄ
  where

        Œµ-var-subst   :  ‚àÄ {Œ± Œ≤} (œÄ‚ÇÅ : Context) (œÄ‚ÇÇ : Context) (t‚ÇÅ : Term œÄ‚ÇÇ Œ±) (Œ≤‚ààœÄ : Œ≤ ‚àà (œÄ‚ÇÅ ++ [ Œ± ] ++ œÄ‚ÇÇ))
                           (p : Level Œ≤)
                      ->  Œµ·µó p (var-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ Œ≤‚ààœÄ) ‚â° var-subst œÄ‚ÇÅ œÄ‚ÇÇ (Œµ·µó (isSecret? _) t‚ÇÅ) Œ≤‚ààœÄ
        Œµ-var-subst [] œÄ‚ÇÇ t‚ÇÅ here p rewrite Œµ·µó-ext p (isSecret? _) t‚ÇÅ = refl
        Œµ-var-subst [] œÄ‚ÇÇ t‚ÇÅ (there x‚ààœÄ) p = refl
        Œµ-var-subst (._ ‚à∑ œÄ‚ÇÅ) œÄ‚ÇÇ t‚ÇÅ here p = refl
        Œµ-var-subst (x‚ÇÅ ‚à∑ œÄ‚ÇÅ) œÄ‚ÇÇ t‚ÇÅ (there x‚ààœÄ) p
          rewrite Œµ-wken p (var-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ x‚ààœÄ) (drop {x‚ÇÅ} refl-‚äÜÀ°) | Œµ-var-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ x‚ààœÄ p = refl

        Œµ-tm-subst : ‚àÄ {œÑ œÑ'} (œÄ‚ÇÅ : Context) (œÄ‚ÇÇ : Context) (t‚ÇÅ : Term œÄ‚ÇÇ œÑ') (t‚ÇÇ : Term (œÄ‚ÇÅ ++ [ œÑ' ] ++ œÄ‚ÇÇ) œÑ) (x : Level œÑ)
                   ->  Œµ·µó x (tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ t‚ÇÇ) ‚â° tm-subst œÄ‚ÇÅ œÄ‚ÇÇ (Œµ·µó (isSecret? _) t‚ÇÅ) (Œµ·µó x t‚ÇÇ)
        Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ ÔºàÔºâ p = refl
        Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ True p = refl
        Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ False p = refl
        Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ (Id t‚ÇÇ) p rewrite Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ t‚ÇÇ (isSecret? _) = refl
        Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ (unId t‚ÇÇ) (inj‚ÇÅ x‚ÇÅ) = refl
        Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ (unId t‚ÇÇ) (inj‚ÇÇ y) rewrite Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ t‚ÇÇ (isSecret? _) = refl
        Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ (Var œÑ‚ààœÄ) p rewrite Œµ-var-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ œÑ‚ààœÄ p = refl
        Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ (Abs t‚ÇÇ) p rewrite  Œµ-tm-subst (_ ‚à∑ œÄ‚ÇÅ) _ t‚ÇÅ t‚ÇÇ (isSecret? _) = refl
        Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ (App t‚ÇÇ t‚ÇÉ) (inj‚ÇÅ x‚ÇÅ) = refl
        Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ (App t‚ÇÇ t‚ÇÉ) (inj‚ÇÇ y)
          rewrite Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ t‚ÇÇ (isSecret? _) | Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ t‚ÇÉ (isSecret? _) = refl
        Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ (If t‚ÇÇ Then t‚ÇÉ Else t‚ÇÑ) (inj‚ÇÅ x‚ÇÅ) = refl
        Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ (If t‚ÇÇ Then t‚ÇÉ Else t‚ÇÑ) (inj‚ÇÇ y)
          rewrite Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ t‚ÇÇ (inj‚ÇÇ Bool) | Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ t‚ÇÉ (inj‚ÇÇ y) | Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ t‚ÇÑ (inj‚ÇÇ y) = refl
        Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ (Return l t‚ÇÇ) (inj‚ÇÅ x‚ÇÅ) = refl
        Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ (Return l t‚ÇÇ) (inj‚ÇÇ y)
          rewrite Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ t‚ÇÇ (isSecret? _) = refl
        Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ (t‚ÇÇ >>= t‚ÇÉ) (inj‚ÇÅ x‚ÇÅ) = refl
        Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ (t‚ÇÇ >>= t‚ÇÉ) (inj‚ÇÇ (Mac·¥∏ y))
          rewrite Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ t‚ÇÇ (inj‚ÇÇ (Mac·¥∏ y)) | Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ t‚ÇÉ (inj‚ÇÇ Fun) = refl
        Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ (Mac l t‚ÇÇ) (inj‚ÇÅ x‚ÇÅ) = refl
        Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ (Mac l t‚ÇÇ) (inj‚ÇÇ y) rewrite Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ t‚ÇÇ (isSecret? _) = refl
        Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ (Res l t‚ÇÇ) (inj‚ÇÅ ())
        Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ (Res l t‚ÇÇ) (inj‚ÇÇ (Res (yes p))) rewrite Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ t‚ÇÇ (isSecret? _) = refl
        Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ (Res l t‚ÇÇ) (inj‚ÇÇ (Res (no ¬¨p))) = refl
        Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ (label l‚äëh t‚ÇÇ) (inj‚ÇÅ x‚ÇÅ) = refl
        Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ (label {h = H} l‚äëh t‚ÇÇ) (inj‚ÇÇ (Mac·¥∏ l‚äëA)) with H ‚äë? A
        Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ (label l‚äëh t‚ÇÇ) (inj‚ÇÇ (Mac·¥∏ l‚äëA)) | yes p rewrite Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ t‚ÇÇ (isSecret? _) = refl
        Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ (label l‚äëh t‚ÇÇ) (inj‚ÇÇ (Mac·¥∏ l‚äëA)) | no ¬¨p rewrite Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ t‚ÇÇ (isSecret? _) = refl
        Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ (label‚àô l‚äëh t‚ÇÇ) (inj‚ÇÅ x‚ÇÅ) = refl
        Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ (label‚àô l‚äëh t‚ÇÇ) (inj‚ÇÇ y) rewrite Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ t‚ÇÇ (isSecret? _) = refl
        Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ (unlabel l‚äëh t‚ÇÇ) (inj‚ÇÅ x‚ÇÅ) = refl
        Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ (unlabel {Œ± = œÑ} l‚äëh t‚ÇÇ) (inj‚ÇÇ (Mac·¥∏ _)) with isSecret? œÑ
        Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ (unlabel l‚äëh t‚ÇÇ) (inj‚ÇÇ (Mac·¥∏ _)) | inj‚ÇÅ x‚ÇÅ rewrite Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ t‚ÇÇ (isSecret? _) = refl
        Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ (unlabel l‚äëh t‚ÇÇ) (inj‚ÇÇ (Mac·¥∏ _)) | inj‚ÇÇ y rewrite Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ t‚ÇÇ (isSecret? _) = refl
        Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ (unlabel‚àô l‚äëh t‚ÇÇ) (inj‚ÇÅ x‚ÇÅ) = refl
        Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ (unlabel‚àô l‚äëh t‚ÇÇ) (inj‚ÇÇ (Mac·¥∏ l‚äëA)) rewrite Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ t‚ÇÇ (isSecret? _) = refl
        Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ (fork l‚äëh t‚ÇÇ) (inj‚ÇÅ x‚ÇÅ) = refl
        Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ (fork {h = H} l‚äëh t‚ÇÇ) (inj‚ÇÇ (Mac·¥∏ l‚äëA)) rewrite Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ t‚ÇÇ (isSecret? _) = refl
        Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ (deepDup x) (inj‚ÇÅ x‚ÇÅ) rewrite Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ x (inj‚ÇÅ x‚ÇÅ) = refl
        Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ (deepDup x) (inj‚ÇÇ y) rewrite Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ x (inj‚ÇÇ y) = refl
        Œµ-tm-subst œÄ‚ÇÅ œÄ‚ÇÇ t‚ÇÅ ‚àô p = refl


Œµ·µó-dup-ufv-‚â° : ‚àÄ {œÄ œÑ} -> (x : Level œÑ) (vs : Vars œÄ) (t : Term œÄ œÑ) ->  Œµ·µó x (dup-ufv vs t) ‚â° dup-ufv vs (Œµ·µó x t)
Œµ·µó-dup-ufv-‚â° x vs ÔºàÔºâ = refl
Œµ·µó-dup-ufv-‚â° x vs True = refl
Œµ·µó-dup-ufv-‚â° x vs False = refl
Œµ·µó-dup-ufv-‚â° x vs (Id t) rewrite Œµ·µó-dup-ufv-‚â° (isSecret? _) vs t = refl
Œµ·µó-dup-ufv-‚â° (inj‚ÇÅ x) vs (unId t) = refl
Œµ·µó-dup-ufv-‚â° (inj‚ÇÇ y) vs (unId t) rewrite Œµ·µó-dup-ufv-‚â° (inj‚ÇÇ Id) vs t = refl
Œµ·µó-dup-ufv-‚â° x vs (Var œÑ‚ààœÄ) with member‚±Ω œÑ‚ààœÄ vs
Œµ·µó-dup-ufv-‚â° x vs (Var œÑ‚ààœÄ) | yes p = refl
Œµ·µó-dup-ufv-‚â° (inj‚ÇÅ x) vs (Var œÑ‚ààœÄ) | no ¬¨p = refl -- Doh!
Œµ·µó-dup-ufv-‚â° (inj‚ÇÇ y) vs (Var œÑ‚ààœÄ) | no ¬¨p = refl
Œµ·µó-dup-ufv-‚â° x vs (Abs t)
  rewrite Œµ·µó-dup-ufv-‚â° (isSecret? _) (here ‚à∑ (map‚±Ω there vs)) t = refl
Œµ·µó-dup-ufv-‚â° (inj‚ÇÅ x) vs (App t t‚ÇÅ) = refl
Œµ·µó-dup-ufv-‚â° (inj‚ÇÇ y) vs (App t t‚ÇÅ)
  rewrite Œµ·µó-dup-ufv-‚â° (isSecret? _ ) vs t | Œµ·µó-dup-ufv-‚â° (isSecret? _ ) vs t‚ÇÅ = refl
Œµ·µó-dup-ufv-‚â° (inj‚ÇÅ x) vs (If t Then t‚ÇÅ Else t‚ÇÇ) = refl
Œµ·µó-dup-ufv-‚â° (inj‚ÇÇ y) vs (If t Then t‚ÇÅ Else t‚ÇÇ)
  rewrite Œµ·µó-dup-ufv-‚â° (inj‚ÇÇ Bool) vs t | Œµ·µó-dup-ufv-‚â° (inj‚ÇÇ y) vs t‚ÇÅ | Œµ·µó-dup-ufv-‚â° (inj‚ÇÇ y) vs t‚ÇÇ = refl
Œµ·µó-dup-ufv-‚â° (inj‚ÇÅ x) vs (Return l t) = refl
Œµ·µó-dup-ufv-‚â° (inj‚ÇÇ y) vs (Return l t)
  rewrite Œµ·µó-dup-ufv-‚â° (isSecret? _) vs t = refl
Œµ·µó-dup-ufv-‚â° (inj‚ÇÅ x) vs (t >>= t‚ÇÅ) = refl
Œµ·µó-dup-ufv-‚â° (inj‚ÇÇ (Mac·¥∏ h‚äëA)) vs (t >>= t‚ÇÅ)
  rewrite Œµ·µó-dup-ufv-‚â° (inj‚ÇÇ (Mac·¥∏ h‚äëA)) vs t | Œµ·µó-dup-ufv-‚â° (isSecret? _) vs t‚ÇÅ = refl
Œµ·µó-dup-ufv-‚â° (inj‚ÇÅ x) vs (Mac l t) = refl
Œµ·µó-dup-ufv-‚â° (inj‚ÇÇ y) vs (Mac l t)
  rewrite Œµ·µó-dup-ufv-‚â° (isSecret? _) vs t = refl
Œµ·µó-dup-ufv-‚â° (inj‚ÇÅ ()) vs (Res l t)
Œµ·µó-dup-ufv-‚â° (inj‚ÇÇ (Res (yes p))) vs (Res l t)
  rewrite Œµ·µó-dup-ufv-‚â° (isSecret? _) vs t = refl
Œµ·µó-dup-ufv-‚â° (inj‚ÇÇ (Res (no ¬¨p))) vs (Res l t)
  rewrite Œµ·µó-dup-ufv-‚â° (isSecret? _) vs t = refl
Œµ·µó-dup-ufv-‚â° (inj‚ÇÅ x) vs (label l‚äëh t) = refl
Œµ·µó-dup-ufv-‚â° (inj‚ÇÇ (Mac·¥∏ l‚äëA)) vs (label {h = H} l‚äëh t) with H ‚äë? A
Œµ·µó-dup-ufv-‚â° (inj‚ÇÇ (Mac·¥∏ l‚äëA)) vs (label l‚äëh t) | yes p
  rewrite Œµ·µó-dup-ufv-‚â° (isSecret? _) vs t = refl
Œµ·µó-dup-ufv-‚â° (inj‚ÇÇ (Mac·¥∏ l‚äëA)) vs (label l‚äëh t) | no ¬¨p
  rewrite Œµ·µó-dup-ufv-‚â° (isSecret? _) vs t = refl
Œµ·µó-dup-ufv-‚â° (inj‚ÇÅ x) vs (label‚àô l‚äëh t) = refl
Œµ·µó-dup-ufv-‚â° (inj‚ÇÇ y) vs (label‚àô l‚äëh t)
  rewrite Œµ·µó-dup-ufv-‚â° (isSecret? _) vs t = refl
Œµ·µó-dup-ufv-‚â° (inj‚ÇÅ x) vs (unlabel l‚äëh t) = refl
Œµ·µó-dup-ufv-‚â° (inj‚ÇÇ (Mac·¥∏ l‚äëA)) vs (unlabel {Œ± = œÑ} l‚äëh t) with isSecret? œÑ
Œµ·µó-dup-ufv-‚â° (inj‚ÇÇ (Mac·¥∏ l‚äëA)) vs (unlabel l‚äëh t) | inj‚ÇÅ x
  rewrite Œµ·µó-dup-ufv-‚â° (isSecret? _) vs t = refl
Œµ·µó-dup-ufv-‚â° (inj‚ÇÇ (Mac·¥∏ l‚äëA)) vs (unlabel l‚äëh t) | inj‚ÇÇ y
  rewrite Œµ·µó-dup-ufv-‚â° (isSecret? _) vs t = refl
Œµ·µó-dup-ufv-‚â° (inj‚ÇÅ x) vs (unlabel‚àô l‚äëh t) = refl
Œµ·µó-dup-ufv-‚â° (inj‚ÇÇ (Mac·¥∏ l‚äëA)) vs (unlabel‚àô l‚äëh t)
  rewrite Œµ·µó-dup-ufv-‚â° (isSecret? _) vs t = refl
Œµ·µó-dup-ufv-‚â° (inj‚ÇÅ x) vs (fork l‚äëh t) = refl
Œµ·µó-dup-ufv-‚â° (inj‚ÇÇ y) vs (fork l‚äëh t)
  rewrite Œµ·µó-dup-ufv-‚â° (isSecret? _) vs t = refl
Œµ·µó-dup-ufv-‚â° x vs (deepDup t) = refl
Œµ·µó-dup-ufv-‚â° x vs ‚àô = refl

-- This is the proof that it is impossible to turn a high computation into a low one
-- We need this lemma to discharge those cases in which the Stack produce a Mac L
-- computation but the current term under evaluation has type Mac H.
¬¨secureStack : ‚àÄ {l h œÑ‚ÇÅ œÑ‚ÇÇ} -> Secret (Mac h œÑ‚ÇÅ) -> Public (Mac l œÑ‚ÇÇ) -> Stack l (Mac h œÑ‚ÇÅ) (Mac l œÑ‚ÇÇ) -> ‚ä•
¬¨secureStack (Mac·¥¥ h‚ã§A) (Mac·¥∏ l‚äëA) [] = ‚ä•-elim (h‚ã§A l‚äëA)
¬¨secureStack x y (# x‚ààœÄ ‚à∑ S) = ¬¨secureStack x y S
¬¨secureStack (Mac·¥¥ h‚ã§A) (Mac·¥∏ l‚äëA) (Bind x‚ÇÅ ‚à∑ S) = ¬¨secureStack (Mac·¥¥ h‚ã§A) (Mac·¥∏ l‚äëA) S
¬¨secureStack (Mac·¥¥ h‚ã§A) (Mac·¥∏ l‚äëA) ‚àô = {!!} -- No because ‚àô can freely choose types also the insecure ones

--------------------------------------------------------------------------------
-- Env lemmas

member·¥± : ‚àÄ {l œÄ œÄ' œÑ} {Œî : Env l œÄ} {t : Term œÄ' œÑ} {œÑ‚ààœÄ : œÑ ‚àà œÄ} ->
          (l‚äëA : l ‚äë A) -> œÑ‚ààœÄ ‚Ü¶ t ‚àà·¥± Œî -> œÑ‚ààœÄ ‚Ü¶ (Œµ·µÄ t) ‚àà·¥± (Œµ·¥± (yes l‚äëA) Œî)
member·¥± l‚äëA here = here
member·¥± l‚äëA (there t‚ààŒî) = there (member·¥± l‚äëA t‚ààŒî)

update·¥± : ‚àÄ {l œÄ œÄ' œÑ} {Œî Œî' : Env l œÄ} {mt : Maybe (Term œÄ' œÑ)} {œÑ‚ààœÄ : œÑ ‚àà œÄ}
          (l‚äëA : l ‚äë A) -> Update·¥± mt œÑ‚ààœÄ Œî Œî' -> Update·¥± (M.map Œµ·µÄ mt) œÑ‚ààœÄ (Œµ·¥± (yes l‚äëA) Œî) (Œµ·¥± (yes l‚äëA) Œî')
update·¥± l‚äëA here = here
update·¥± l‚äëA (there x) = there (update·¥± l‚äëA x)
update·¥± l‚äëA ‚àô = ‚àô

--------------------------------------------------------------------------------
-- Heap Lemmas

update·¥¥‚àô : ‚àÄ {l ls œÄ} {Œî : Env l œÄ} {Œì Œì' : Heap ls} -> l ‚ã§ A -> Œì' ‚âî Œì [ l ‚Ü¶ Œî ]·¥¥ -> Œµ·¥¥ Œì' ‚â° Œµ·¥¥ Œì
update·¥¥‚àô {l} l‚ã§A here with l ‚äë? A
update·¥¥‚àô l‚ã§A here | yes p = ‚ä•-elim (l‚ã§A p)
update·¥¥‚àô l‚ã§A here | no ¬¨p = {!refl!} -- No because of type-level œÄ
update·¥¥‚àô l‚ã§A (there x) rewrite update·¥¥‚àô l‚ã§A x = refl

insert·¥¥‚àô : ‚àÄ {l ls œÑ œÄ} {Œî : Env l œÄ} {Œì Œì' : Heap ls} {t : Term œÄ œÑ} ->
          l ‚ã§ A -> Œì' ‚âî Œì [ l ‚Ü¶ insert t Œî ]·¥¥ -> Œµ·¥¥ Œì' ‚â° Œµ·¥¥ Œì
insert·¥¥‚àô {l} ¬¨p here with l ‚äë? A
insert·¥¥‚àô ¬¨p here | yes p = ‚ä•-elim (¬¨p p)
insert·¥¥‚àô ¬¨p‚ÇÅ here | no ¬¨p = {!refl!} -- No because of type-level œÄ
insert·¥¥‚àô ¬¨p (there x) rewrite insert·¥¥‚àô ¬¨p x = refl

member·¥¥ : ‚àÄ {l ls œÄ} {Œì : Heap ls} {Œî : Env l œÄ} -> (l‚äëA : l ‚äë A) -> l ‚Ü¶ Œî ‚àà·¥¥ Œì -> l ‚Ü¶ (Œµ·¥± (yes l‚äëA) Œî) ‚àà·¥¥ (Œµ·¥¥ Œì)
member·¥¥ {l} p here with l ‚äë? A
member·¥¥ {Œî = Œî} p‚ÇÅ here | yes p rewrite Œµ·¥±-ext (yes p) (yes p‚ÇÅ) Œî = here
member·¥¥ p here | no ¬¨p = ‚ä•-elim (¬¨p p)
member·¥¥ p (there x) = there (member·¥¥ p x)

insert·¥¥ : ‚àÄ {l œÄ œÑ ls} {Œì Œì' : Heap ls} {Œî : Env l œÄ} {t : Term œÄ œÑ} (l‚äëA : l ‚äë A) ->
            Œì' ‚âî Œì [ l ‚Ü¶ insert t Œî ]·¥¥ -> Œµ·¥¥ Œì' ‚âî (Œµ·¥¥ Œì) [ l ‚Ü¶ insert (Œµ·µó (isSecret? œÑ) t) (Œµ·¥± (yes l‚äëA) Œî) ]·¥¥
insert·¥¥ {l} l‚äëA here with l ‚äë? A
insert·¥¥ {l} {Œî = []} l‚äëA here | yes p = here
insert·¥¥ {l} {Œî = t ‚à∑ Œî} l‚äëA here | yes p  rewrite Œµ·¥±-ext (yes p) (yes l‚äëA) Œî = here
insert·¥¥ {l} {Œî = ‚àô} l‚äëA here | yes p = here
insert·¥¥ l‚äëA here | no ¬¨p = ‚ä•-elim (¬¨p l‚äëA)
insert·¥¥ l‚äëA (there x) = there (insert·¥¥ l‚äëA x)

update·¥¥ : ‚àÄ {l ls œÄ} {Œî : Env l œÄ} {Œì Œì' : Heap ls} -> (l‚äëA : l ‚äë A) -> Œì' ‚âî Œì [ l ‚Ü¶ Œî ]·¥¥ -> (Œµ·¥¥ Œì') ‚âî (Œµ·¥¥ Œì) [ l ‚Ü¶ (Œµ·¥± (yes l‚äëA ) Œî) ]·¥¥
update·¥¥ {l} {Œî = Œî} l‚äëA here rewrite Œµ·¥±-ext (yes l‚äëA) (l ‚äë? A) Œî = here
update·¥¥ l‚äëA (there x) = there (update·¥¥ l‚äëA x)

-- Simulation Property
-- Note that I fixed the type of the whole configuration to be Mac l œÑ, in order
-- to tie the security level of the computation to that of the stack.
-- It is also with the fact that all of these computations will be threads
-- in the concurrent semantics.
-- Since the actual term under evaluation can have any type the property
-- is still sufficiently general.
Œµ-sim : ‚àÄ {l œÑ ls} (s‚ÇÅ s‚ÇÇ : State ls l (Mac l œÑ)) (x : Level (Mac l œÑ)) -> s‚ÇÅ ‚áù s‚ÇÇ -> Œµ x s‚ÇÅ ‚áù Œµ x s‚ÇÇ
Œµ-sim ._ ._ (inj‚ÇÅ (Mac·¥¥ h‚ã§A)) (App‚ÇÅ Œî‚ààŒì u·¥¥)
  rewrite insert·¥¥‚àô h‚ã§A u·¥¥ = Hole
Œµ-sim ._ ._ (inj‚ÇÅ x) (App‚ÇÇ y‚ààœÄ x‚ààœÄ) = Hole
Œµ-sim ._ ._ (inj‚ÇÅ (Mac·¥¥ h‚ã§A)) (Var‚ÇÅ Œî‚ààŒì x‚ààœÄ t‚ààŒî ¬¨val r·¥± u·¥¥)
  rewrite update·¥¥‚àô h‚ã§A u·¥¥ = Hole
Œµ-sim ._ ._ (inj‚ÇÅ x) (Var‚ÇÅ' Œî‚ààŒì x‚ààœÄ v‚ààŒî val) = Hole
Œµ-sim ._ ._ (inj‚ÇÅ (Mac·¥¥ h‚ã§A)) (Var‚ÇÇ Œî‚ààŒì x‚ààœÄ val u·¥± u·¥¥)
  rewrite update·¥¥‚àô h‚ã§A u·¥¥ = Hole
Œµ-sim ‚ü® x , ._ , x‚ÇÇ ‚ü© ‚ü® .x , x‚ÇÑ , ._ ‚ü© (inj‚ÇÅ _) If = Hole
Œµ-sim ‚ü® x , .True , ._ ‚ü© ‚ü® .x , x‚ÇÑ , x‚ÇÖ ‚ü© (inj‚ÇÅ _) IfTrue = Hole
Œµ-sim ‚ü® x , .False , ._ ‚ü© ‚ü® .x , x‚ÇÑ , x‚ÇÖ ‚ü© (inj‚ÇÅ _) IfFalse = Hole
Œµ-sim ‚ü® x , ._ , x‚ÇÇ ‚ü© ‚ü® .x , ._ , .x‚ÇÇ ‚ü© (inj‚ÇÅ _) Return = Hole
Œµ-sim ‚ü® x , ._ , x‚ÇÇ ‚ü© ‚ü® .x , x‚ÇÑ , ._ ‚ü© (inj‚ÇÅ _) Bind‚ÇÅ = Hole
Œµ-sim ‚ü® x , ._ , ._ ‚ü© ‚ü® .x , ._ , x‚ÇÖ ‚ü© (inj‚ÇÅ _) Bind‚ÇÇ = Hole
Œµ-sim ‚ü® Œì , ._ , x‚ÇÇ ‚ü© ‚ü® .Œì , ._ , .x‚ÇÇ ‚ü© (inj‚ÇÅ _) (Label' p) = Hole
Œµ-sim ._ ._ (inj‚ÇÅ _) (Label'‚àô p‚ÇÅ) = Hole
Œµ-sim ‚ü® Œì , .(unlabel p x‚ÇÑ) , x‚ÇÇ ‚ü© ‚ü® .Œì , x‚ÇÑ , .(unlabel p ‚à∑ x‚ÇÇ) ‚ü© (inj‚ÇÅ _) (Unlabel‚ÇÅ p) = Hole
Œµ-sim ‚ü® Œì , ._ , .(unlabel p ‚à∑ x‚ÇÖ) ‚ü© ‚ü® .Œì , ._ , x‚ÇÖ ‚ü© (inj‚ÇÅ _) (Unlabel‚ÇÇ p) = Hole
Œµ-sim ‚ü® Œì , ._ , ._ ‚ü© ‚ü® .Œì , ._ , ._ ‚ü© (inj‚ÇÅ _) (Unlabel‚àô‚ÇÅ p) = Hole
Œµ-sim ‚ü® Œì , ._ , .(unlabel‚àô p ‚à∑ x‚ÇÖ) ‚ü© ‚ü® .Œì , ._ , x‚ÇÖ ‚ü© (inj‚ÇÅ _) (Unlabel‚àô‚ÇÇ p) = Hole
Œµ-sim ‚ü® x , .(unId x‚ÇÑ) , x‚ÇÇ ‚ü© ‚ü® .x , x‚ÇÑ , .(unId ‚à∑ x‚ÇÇ) ‚ü© (inj‚ÇÅ _) UnId‚ÇÅ = Hole
Œµ-sim ‚ü® x , .(Id x‚ÇÑ) , .(unId ‚à∑ x‚ÇÖ) ‚ü© ‚ü® .x , x‚ÇÑ , x‚ÇÖ ‚ü© (inj‚ÇÅ _) UnId‚ÇÇ = Hole
Œµ-sim ‚ü® Œì , ._ , x‚ÇÇ ‚ü© ‚ü® .Œì , ._ , .x‚ÇÇ ‚ü© (inj‚ÇÅ _) (Fork p) = Hole
Œµ-sim ._ ._ (inj‚ÇÅ (Mac·¥¥ h‚ã§A)) (DeepDup Œî‚ààŒì t‚ààŒî u·¥¥)
  rewrite insert·¥¥‚àô h‚ã§A u·¥¥ = Hole
Œµ-sim ._ ._ (inj‚ÇÅ (Mac·¥¥ h‚ã§A)) (DeepDup' ¬¨var Œî‚ààŒì u·¥¥)
  rewrite insert·¥¥‚àô h‚ã§A u·¥¥ = Hole
Œµ-sim ‚ü® x , .‚àô , .‚àô ‚ü© ‚ü® .x , .‚àô , .‚àô ‚ü© (inj‚ÇÅ _) Hole = Hole

Œµ-sim ._ ._ (inj‚ÇÇ y) (App‚ÇÅ {œÑ‚ÇÇ = œÑ‚ÇÇ} Œî‚ààŒì u·¥¥) with isSecret? œÑ‚ÇÇ
Œµ-sim ._ ._ (inj‚ÇÇ y) (App‚ÇÅ {S = S} Œî‚ààŒì u·¥¥) | inj‚ÇÅ (Mac·¥¥ h‚ã§A) = ‚ä•-elim (¬¨secureStack (Mac·¥¥ h‚ã§A) y S)
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (App‚ÇÅ Œî‚ààŒì u·¥¥) | inj‚ÇÇ y = App‚ÇÅ (member·¥¥ l‚äëA Œî‚ààŒì) (insert·¥¥ l‚äëA u·¥¥)
Œµ-sim ‚ü® Œì , Abs t , ._ ‚à∑ S ‚ü© ._ (inj‚ÇÇ y') (App‚ÇÇ {Œ≤ = Œ≤} y‚ààœÄ x‚ààœÄ) rewrite Œµ-subst (Var x‚ààœÄ) t (isSecret? _) = App‚ÇÇ y‚ààœÄ x‚ààœÄ
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (Var‚ÇÅ Œî‚ààŒì x‚ààœÄ t‚ààŒî ¬¨val r·¥± u·¥¥) = Var‚ÇÅ (member·¥¥ l‚äëA Œî‚ààŒì) x‚ààœÄ (member·¥± l‚äëA t‚ààŒî) (Œµ·µÄ¬¨Val ¬¨val) (update·¥± l‚äëA r·¥±) (update·¥¥ l‚äëA u·¥¥)
Œµ-sim ‚ü® _ , _ , S ‚ü© ._ (inj‚ÇÇ y) (Var‚ÇÅ' {œÑ = œÑ} Œî‚ààŒì œÑ‚ààœÄ v‚ààŒî val) with isSecret? œÑ
Œµ-sim ‚ü® _ , _ , S ‚ü© ._ (inj‚ÇÇ (Mac·¥∏ y)) (Var‚ÇÅ' Œî‚ààŒì œÑ‚ààœÄ v‚ààŒî val) | inj‚ÇÅ (Mac·¥¥ x) = ‚ä•-elim (¬¨secureStack (Mac·¥¥ x) (Mac·¥∏ y) S)
Œµ-sim ‚ü® _ , _ , S ‚ü© ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (Var‚ÇÅ' {v = v} Œî‚ààŒì œÑ‚ààœÄ v‚ààŒî val) | inj‚ÇÇ y
  rewrite Œµ·µó-ext (inj‚ÇÇ y) (isSecret? _) v = Var‚ÇÅ' (member·¥¥ l‚äëA Œî‚ààŒì) œÑ‚ààœÄ (member·¥± l‚äëA v‚ààŒî) (Œµ·µÄ-Val y val)
Œµ-sim ._ ._ (inj‚ÇÇ y) (Var‚ÇÇ {œÑ = œÑ} Œî‚ààŒì œÑ‚ààœÄ val u·¥± u·¥¥) with isSecret? œÑ
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ y)) (Var‚ÇÇ {S = S} Œî‚ààŒì œÑ‚ààœÄ val u·¥± u·¥¥) | inj‚ÇÅ (Mac·¥¥ x) = ‚ä•-elim (¬¨secureStack (Mac·¥¥ x) (Mac·¥∏ y) S)
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (Var‚ÇÇ {v = v} Œî‚ààŒì œÑ‚ààœÄ val u·¥± u·¥¥) | inj‚ÇÇ y
  rewrite Œµ·µó-ext (inj‚ÇÇ y) (isSecret? _) v = Var‚ÇÇ (member·¥¥ l‚äëA Œî‚ààŒì) œÑ‚ààœÄ (Œµ·µÄ-Val y val) (update·¥± l‚äëA u·¥±) (update·¥¥ l‚äëA u·¥¥)
Œµ-sim ‚ü® _ , ._ , S ‚ü© ._ (inj‚ÇÇ y) (If {œÑ = œÑ}) with isSecret? œÑ
Œµ-sim ‚ü® x , ._ , S ‚ü© ._ (inj‚ÇÇ y) If | inj‚ÇÅ (Mac·¥¥ h‚ã§A) = ‚ä•-elim (¬¨secureStack (Mac·¥¥ h‚ã§A) y S)
Œµ-sim ‚ü® _ , ._ , S ‚ü© _ (inj‚ÇÇ y) If | inj‚ÇÇ _ = If
Œµ-sim ._ ._ (inj‚ÇÇ p) IfTrue = IfTrue
Œµ-sim ._ ._ (inj‚ÇÇ p) IfFalse = IfFalse
Œµ-sim ._ ‚ü® _ , Mac {Œ± = œÑ} l t , S ‚ü© (inj‚ÇÇ y) Return with isSecret? (Mac l œÑ)
Œµ-sim .(‚ü® Œì , Return l t , S ‚ü©) ‚ü® Œì , Mac l t , S ‚ü© (inj‚ÇÇ (Mac·¥∏ l‚äëh)) Return | inj‚ÇÅ x = ‚ä•-elim (secretNotPublic x (Mac·¥∏ l‚äëh))
Œµ-sim .(‚ü® x , Return l t , S ‚ü©) ‚ü® x , Mac l t , S ‚ü© (inj‚ÇÇ y) Return | inj‚ÇÇ y' = Return
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ {œÑ} {l} l‚äëA)) Bind‚ÇÅ with isSecret? (Mac l œÑ)
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) Bind‚ÇÅ | inj‚ÇÅ x = ‚ä•-elim (secretNotPublic x (Mac·¥∏ l‚äëA))
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ {l = l} l‚äëA‚ÇÅ)) Bind‚ÇÅ | inj‚ÇÇ (Mac·¥∏ l‚äëA) with l ‚äë? A
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA‚ÇÅ)) Bind‚ÇÅ | inj‚ÇÇ (Mac·¥∏ l‚äëA) | yes p = Bind‚ÇÅ
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA‚ÇÅ)) Bind‚ÇÅ | inj‚ÇÇ (Mac·¥∏ l‚äëA) | no ¬¨p = ‚ä•-elim (¬¨p l‚äëA‚ÇÅ)
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ {œÑ} {l} l‚äëA)) Bind‚ÇÇ with isSecret? (Mac l œÑ)
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) Bind‚ÇÇ | inj‚ÇÅ x = ‚ä•-elim (secretNotPublic x (Mac·¥∏ l‚äëA))
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ {l = l} l‚äëA)) Bind‚ÇÇ | inj‚ÇÇ y with l ‚äë? A
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) Bind‚ÇÇ | inj‚ÇÇ y | yes p = Bind‚ÇÇ
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) Bind‚ÇÇ | inj‚ÇÇ y | no ¬¨p = ‚ä•-elim (¬¨p l‚äëA)
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ {œÑ} {l} l‚äëA)) (Label' p‚ÇÅ) with isSecret? (Mac l œÑ)
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (Label' p‚ÇÅ) | inj‚ÇÅ x = ‚ä•-elim (secretNotPublic x (Mac·¥∏ l‚äëA))
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ {l = l} l‚äëA)) (Label' p‚ÇÅ) | inj‚ÇÇ y with l ‚äë? A
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (Label' {h = h} p‚ÇÅ) | inj‚ÇÇ y | yes p with h ‚äë? A
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (Label' p‚ÇÇ) | inj‚ÇÇ y | yes p‚ÇÅ | yes p = Label' p‚ÇÇ
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (Label' p‚ÇÅ) | inj‚ÇÇ y | yes p | no ¬¨p = Label'‚àô p‚ÇÅ
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (Label' p‚ÇÅ) | inj‚ÇÇ y | no ¬¨p = ‚ä•-elim (¬¨p l‚äëA)
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ {œÑ} {l} l‚äëA)) (Label'‚àô p‚ÇÅ) with isSecret? (Mac l œÑ)
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (Label'‚àô p‚ÇÅ) | inj‚ÇÅ x = ‚ä•-elim (secretNotPublic x (Mac·¥∏ l‚äëA))
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ {l = l} l‚äëA)) (Label'‚àô p‚ÇÅ) | inj‚ÇÇ y with l ‚äë? A
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (Label'‚àô {h = h} p‚ÇÅ) | inj‚ÇÇ y | yes p with h ‚äë? A
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (Label'‚àô p‚ÇÇ) | inj‚ÇÇ y | yes p‚ÇÅ | yes p = Label'‚àô p‚ÇÇ
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (Label'‚àô p‚ÇÅ) | inj‚ÇÇ y | yes p | no ¬¨p = Label'‚àô p‚ÇÅ
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (Label'‚àô p‚ÇÅ) | inj‚ÇÇ y | no ¬¨p = ‚ä•-elim (¬¨p l‚äëA)
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ {œÑ} {l} l‚äëA)) (Unlabel‚ÇÅ p‚ÇÅ) with isSecret? (Mac l œÑ)
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (Unlabel‚ÇÅ p‚ÇÅ) | inj‚ÇÅ x = ‚ä•-elim (secretNotPublic x (Mac·¥∏ l‚äëA))
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ {l = l} l‚äëA)) (Unlabel‚ÇÅ p‚ÇÅ) | inj‚ÇÇ y with l ‚äë? A
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (Unlabel‚ÇÅ {œÑ = œÑ‚ÇÅ} p‚ÇÅ) | inj‚ÇÇ y | yes p with isSecret? œÑ‚ÇÅ
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (Unlabel‚ÇÅ p‚ÇÅ) | inj‚ÇÇ y | yes p | inj‚ÇÅ x = Unlabel‚àô‚ÇÅ p‚ÇÅ
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (Unlabel‚ÇÅ p‚ÇÅ) | inj‚ÇÇ y‚ÇÅ | yes p | inj‚ÇÇ y = Unlabel‚ÇÅ p‚ÇÅ
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (Unlabel‚ÇÅ p‚ÇÅ) | inj‚ÇÇ y | no ¬¨p = ‚ä•-elim (¬¨p l‚äëA)
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ {œÑ} {l} l‚äëA)) (Unlabel‚ÇÇ p‚ÇÅ) with isSecret? (Mac l œÑ)
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (Unlabel‚ÇÇ p‚ÇÅ) | inj‚ÇÅ x = ‚ä•-elim (secretNotPublic x (Mac·¥∏ l‚äëA))
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ {l = l} l‚äëA)) (Unlabel‚ÇÇ p‚ÇÅ) | inj‚ÇÇ y with l ‚äë? A
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (Unlabel‚ÇÇ {l' = l'} p‚ÇÅ) | inj‚ÇÇ y | yes p with l' ‚äë? A
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (Unlabel‚ÇÇ {œÑ = œÑ} p‚ÇÇ) | inj‚ÇÇ y | yes p‚ÇÅ | yes p with isSecret? œÑ
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (Unlabel‚ÇÇ p‚ÇÇ) | inj‚ÇÇ y | yes p‚ÇÅ | yes p | inj‚ÇÅ (Mac·¥¥ h‚ã§A) = Unlabel‚àô‚ÇÇ p‚ÇÇ
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (Unlabel‚ÇÇ p‚ÇÇ) | inj‚ÇÇ y‚ÇÅ | yes p‚ÇÅ | yes p | inj‚ÇÇ y = Unlabel‚ÇÇ p‚ÇÇ
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (Unlabel‚ÇÇ p‚ÇÅ) | inj‚ÇÇ y | yes p | no ¬¨p = ‚ä•-elim (¬¨p (trans-‚äë p‚ÇÅ l‚äëA))
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (Unlabel‚ÇÇ p‚ÇÅ) | inj‚ÇÇ y | no ¬¨p = ‚ä•-elim (¬¨p l‚äëA)
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ {œÑ} {l} l‚äëA)) (Unlabel‚àô‚ÇÅ p) with isSecret? (Mac l œÑ)
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (Unlabel‚àô‚ÇÅ p) | inj‚ÇÅ x = ‚ä•-elim (secretNotPublic x (Mac·¥∏ l‚äëA))
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ {l = l} l‚äëA)) (Unlabel‚àô‚ÇÅ p) | inj‚ÇÇ y with l ‚äë? A
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (Unlabel‚àô‚ÇÅ p‚ÇÅ) | inj‚ÇÇ y | yes p = Unlabel‚àô‚ÇÅ p‚ÇÅ
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (Unlabel‚àô‚ÇÅ p) | inj‚ÇÇ y | no ¬¨p = ‚ä•-elim (¬¨p l‚äëA)
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ {œÑ} {l} l‚äëA)) (Unlabel‚àô‚ÇÇ p) with isSecret? (Mac l œÑ)
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (Unlabel‚àô‚ÇÇ p) | inj‚ÇÅ x = ‚ä•-elim (secretNotPublic x (Mac·¥∏ l‚äëA))
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ {l = l} l‚äëA)) (Unlabel‚àô‚ÇÇ p) | inj‚ÇÇ y with l ‚äë? A
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (Unlabel‚àô‚ÇÇ {l' = l'}  p‚ÇÅ) | inj‚ÇÇ y | yes p with l' ‚äë? A
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (Unlabel‚àô‚ÇÇ p‚ÇÇ) | inj‚ÇÇ y | yes p‚ÇÅ | yes p = Unlabel‚àô‚ÇÇ p‚ÇÇ
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (Unlabel‚àô‚ÇÇ p‚ÇÅ) | inj‚ÇÇ y | yes p | no ¬¨p = Unlabel‚àô‚ÇÇ p‚ÇÅ
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (Unlabel‚àô‚ÇÇ p) | inj‚ÇÇ y | no ¬¨p = ‚ä•-elim (¬¨p l‚äëA)
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (UnId‚ÇÅ {œÑ = œÑ}) with isSecret? œÑ
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (UnId‚ÇÅ {S = S}) | inj‚ÇÅ (Mac·¥¥ h‚ã§A) = ‚ä•-elim (¬¨secureStack (Mac·¥¥ h‚ã§A) (Mac·¥∏ l‚äëA) S)
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) UnId‚ÇÅ | inj‚ÇÇ y = UnId‚ÇÅ
Œµ-sim ._ ._ (inj‚ÇÇ p) UnId‚ÇÇ = UnId‚ÇÇ
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ {œÑ} {l} l‚äëA)) (Fork p‚ÇÅ) with isSecret? (Mac l œÑ)
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (Fork p‚ÇÅ) | inj‚ÇÅ x = ‚ä•-elim (secretNotPublic x (Mac·¥∏ l‚äëA))
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ {l = l} l‚äëA)) (Fork p‚ÇÅ) | inj‚ÇÇ y with l ‚äë? A
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (Fork p‚ÇÅ) | inj‚ÇÇ y | yes p = Fork p‚ÇÅ
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (Fork p‚ÇÅ) | inj‚ÇÇ y | no ¬¨p = ‚ä•-elim (¬¨p l‚äëA)
Œµ-sim ._ ._ (inj‚ÇÇ p) (DeepDup {œÑ = œÑ} Œî‚ààŒì t‚ààŒî u·¥¥) with isSecret? œÑ
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (DeepDup {S = S} Œî‚ààŒì t‚ààŒî u·¥¥) | inj‚ÇÅ (Mac·¥¥ h‚ã§A) = ‚ä•-elim (¬¨secureStack (Mac·¥¥ h‚ã§A) (Mac·¥∏ l‚äëA) S)
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (DeepDup {t = t} Œî‚ààŒì t‚ààŒî u·¥¥) | inj‚ÇÇ y with insert·¥¥ l‚äëA u·¥¥
... | u·¥¥' rewrite Œµ·µó-dup-ufv-‚â° (isSecret? _) [] t = DeepDup (member·¥¥ l‚äëA Œî‚ààŒì) (member·¥± l‚äëA t‚ààŒî) u·¥¥'
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (DeepDup' {œÑ = œÑ} ¬¨var Œî‚ààŒì u·¥¥) with isSecret? œÑ
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (DeepDup'{S = S}  ¬¨var Œî‚ààŒì u·¥¥) | inj‚ÇÅ (Mac·¥¥ h‚ã§A) = ‚ä•-elim (¬¨secureStack (Mac·¥¥ h‚ã§A) (Mac·¥∏ l‚äëA) S)
Œµ-sim ._ ._ (inj‚ÇÇ (Mac·¥∏ l‚äëA)) (DeepDup' {t = t} ¬¨var Œî‚ààŒì u·¥¥) | inj‚ÇÇ y
  rewrite Œµ·µó-ext (inj‚ÇÇ y) (isSecret? _) t = DeepDup' (Œµ·µó¬¨Var (isSecret? _) ¬¨var) (member·¥¥ l‚äëA Œî‚ààŒì) (insert·¥¥ l‚äëA u·¥¥)
Œµ-sim ._ ._ (inj‚ÇÇ p) Hole = Hole
