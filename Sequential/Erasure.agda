open import Types
import Lattice
open Lattice.Lattice ­ЮЊЏ renaming (_РЅЪ_ to _РЅЪр┤И_)

module Sequential.Erasure (A : Label) where  -- A is the security level of the attacker

open import Sequential.Calculus
open import Sequential.Semantics
open import Data.Sum

-- A view over sensitive (secret) computation types.
-- lр┤г is the attacker's security level
data Secret : Ty -> Set where
  Macр┤┤ : Рѕђ {h ¤ё} -> (hРІцlр┤г : h РІц A) -> Secret (Mac h ¤ё)
  -- Resр┤┤ is not here because it is always erased homomorphically
  -- like Public types, except for the constructor Res.


-- A view over insensitive (public) types.
-- lр┤г is the attacker's security level
data Public : Ty -> Set where
  Macр┤И : Рѕђ {¤ё l} -> (lРіЉlр┤г : l РіЉ A) -> Public (Mac l ¤ё)
  Res : Рѕђ {¤ё l} -> (lРіЉ?lр┤г : Dec (l РіЉ A)) -> Public (Res l ¤ё)
  №╝ѕ№╝Ѕ : Public №╝ѕ№╝Ѕ
  Bool : Public Bool
  Id : Рѕђ {¤ё} ->  Public (Id ¤ё)
  Fun : Рѕђ {╬▒ ╬▓} -> Public (╬▒ => ╬▓)

-- Secret and insensitive are mutually exclusive
secretNotPublic : Рѕђ {¤ё} -> Secret ¤ё -> Public ¤ё -> РіЦ
secretNotPublic (Macр┤┤ ┬гp) (Macр┤И p) = ┬гp p

Level : Ty -> Set
Level ¤ё = (Secret ¤ё) Ріј (Public ¤ё)

isSecret? : (¤ё : Ty) -> Level ¤ё
isSecret? №╝ѕ№╝Ѕ = injРѓѓ №╝ѕ№╝Ѕ
isSecret? Bool = injРѓѓ Bool
isSecret? (¤ё => ¤ёРѓЂ) = injРѓѓ Fun
isSecret? (Mac l ¤ё) with l РіЉ? A
isSecret? (Mac l ¤ё) | yes p = injРѓѓ (Macр┤И p)
isSecret? (Mac l ¤ё) | no ┬гp = injРѓЂ (Macр┤┤ ┬гp)
isSecret? (Res l ¤ё) = injРѓѓ (Res (l РіЉ? A))
isSecret? (Id ¤ё) = injРѓѓ Id

--------------------------------------------------------------------------------

open import Data.Product

level : Ty -> Set
level №╝ѕ№╝Ѕ = Ріц
level Bool = Ріц
level (¤ё => ¤ёРѓЂ) = level ¤ё ├Ќ level ¤ёРѓЂ
level (Mac l ¤ё) = (Dec (l РіЉ A)) ├Ќ (level ¤ё)
level (Res l ¤ё) = (Dec (l РіЉ A)) ├Ќ (level ¤ё)
level (Id ¤ё) = level ¤ё

level[_] : (¤ё : Ty) -> level ¤ё
level[ №╝ѕ№╝Ѕ ] = tt
level[ Bool ] = tt
level[ ¤ё => ¤ёРѓЂ ] = level[ ¤ё ] , level[ ¤ёРѓЂ ]
level[ Mac l ¤ё ] = (l РіЉ? A) , level[ ¤ё ]
level[ Res l ¤ё ] = (l РіЉ? A) , level[ ¤ё ]
level[ Id ¤ё ] = level[ ¤ё ]

╬хрхЌ : Рѕђ {¤ё n } {¤ђ : Context n} -> level ¤ё -> Term ¤ђ ¤ё -> Term ¤ђ ¤ё
╬хрхЌ x №╝ѕ№╝Ѕ = №╝ѕ№╝Ѕ
╬хрхЌ x True = True
╬хрхЌ x False = False
╬хрхЌ x (Id t) = Id (╬хрхЌ x t)
╬хрхЌ {№╝ѕ№╝Ѕ} x (unId t) = unId (╬хрхЌ x t)
╬хрхЌ {Bool} x (unId t) = unId (╬хрхЌ x t)
╬хрхЌ {¤ё => ¤ёРѓЂ} x (unId t) = unId (╬хрхЌ x t)
╬хрхЌ {Mac l ¤ё} (yes p , projРѓѓ) (unId t) = unId (╬хрхЌ (yes p , projРѓѓ) t)
╬хрхЌ {Mac l ¤ё} (no ┬гp , projРѓѓ) (unId t) = РѕЎ
╬хрхЌ {Res l ¤ё} x (unId t) = unId (╬хрхЌ x t)
╬хрхЌ {Id ¤ё} x (unId t) = unId (╬хрхЌ x t)
╬хрхЌ x (Var xРѕѕ¤ђ) = Var xРѕѕ¤ђ
╬хрхЌ (projРѓЂ , projРѓѓ) (Abs x t) = Abs x (╬хрхЌ projРѓѓ t)
╬хрхЌ {№╝ѕ№╝Ѕ} x (App {╬▒} t tРѓЂ) = App (╬хрхЌ (level[ ╬▒ ] , tt) t) (╬хрхЌ level[ ╬▒ ] tРѓЂ)
╬хрхЌ {Bool} x (App {╬▒} t tРѓЂ) = App (╬хрхЌ (level[ ╬▒ ] , tt) t) (╬хрхЌ level[ ╬▒ ] tРѓЂ)
╬хрхЌ {¤ё => ¤ёРѓЂ} x (App {╬▒} t tРѓЂ) = App (╬хрхЌ (level[ ╬▒ ] , x) t) (╬хрхЌ level[ ╬▒ ] tРѓЂ)
╬хрхЌ {Mac l ¤ё} (yes p , projРѓѓ) (App {╬▒} t tРѓЂ) = App (╬хрхЌ (level[ ╬▒ ] , yes p , projРѓѓ) t) (╬хрхЌ level[ ╬▒ ] tРѓЂ)
╬хрхЌ {Mac l ¤ё} (no ┬гp , projРѓѓ) (App t tРѓЂ) = РѕЎ
╬хрхЌ {Res l ¤ё} x (App {╬▒} t tРѓЂ) = App (╬хрхЌ (level[ ╬▒ ] , x) t) (╬хрхЌ level[ ╬▒ ] tРѓЂ)
╬хрхЌ {Id ¤ё} x (App {╬▒} t tРѓЂ) = App (╬хрхЌ (level[ ╬▒ ] , x) t) (╬хрхЌ level[ ╬▒ ] tРѓЂ)
╬хрхЌ {№╝ѕ№╝Ѕ} x (If t Then tРѓЂ Else tРѓѓ) = If (╬хрхЌ tt t) Then (╬хрхЌ tt tРѓЂ) Else (╬хрхЌ tt tРѓѓ)
╬хрхЌ {Bool} x (If t Then tРѓЂ Else tРѓѓ) = If (╬хрхЌ tt t) Then (╬хрхЌ tt tРѓЂ) Else (╬хрхЌ tt tРѓѓ)
╬хрхЌ {¤ё => ¤ёРѓЂ} x (If t Then tРѓЂ Else tРѓѓ) = If (╬хрхЌ tt t) Then (╬хрхЌ x tРѓЂ) Else (╬хрхЌ x tРѓѓ)
╬хрхЌ {Mac l ¤ё} (yes p , projРѓѓ) (If t Then tРѓЂ Else tРѓѓ) = If (╬хрхЌ tt t) Then (╬хрхЌ (yes p , projРѓѓ) tРѓЂ) Else (╬хрхЌ (yes p , projРѓѓ) tРѓѓ)
╬хрхЌ {Mac l ¤ё} (no ┬гp , projРѓѓ) (If t Then tРѓЂ Else tРѓѓ) = РѕЎ
╬хрхЌ {Res l ¤ё} x (If t Then tРѓЂ Else tРѓѓ) = If (╬хрхЌ tt t) Then (╬хрхЌ x tРѓЂ) Else (╬хрхЌ x tРѓѓ)
╬хрхЌ {Id ¤ё} x (If t Then tРѓЂ Else tРѓѓ) = If (╬хрхЌ tt t) Then (╬хрхЌ x tРѓЂ) Else (╬хрхЌ x tРѓѓ)
╬хрхЌ (yes p , projРѓѓ) (Return l t) = Return l (╬хрхЌ projРѓѓ t)
╬хрхЌ (no ┬гp , projРѓѓ) (Return l t) = РѕЎ
╬хрхЌ (yes p , projРѓѓ) (_>>=_ {╬▒ = ╬▒} t tРѓЂ) = (╬хрхЌ ((yes p) , level[ ╬▒ ]) t) >>= (╬хрхЌ (level[ ╬▒ ] , (yes p , projРѓѓ)) tРѓЂ)
╬хрхЌ (no ┬гp , projРѓѓ) (t >>= tРѓЂ) = РѕЎ
╬хрхЌ (yes p , projРѓѓ) (Mac l t) = Mac l (╬хрхЌ projРѓѓ t)
╬хрхЌ (no ┬гp , projРѓѓ) (Mac l t) = РѕЎ
╬хрхЌ (yes p , projРѓѓ) (Res l t) = Res l (╬хрхЌ projРѓѓ t)
╬хрхЌ (no ┬гp , projРѓѓ) (Res l t) = Res l РѕЎ
╬хрхЌ (yes AРіЉL , yes p , ╬▒РѓЂ) (label LРіЉH t) = label LРіЉH (╬хрхЌ ╬▒РѓЂ t)
╬хрхЌ (yes AРіЉL , no ┬гp , ╬▒РѓЂ) (label LРіЉH t) = labelРѕЎ LРіЉH (╬хрхЌ ╬▒РѓЂ t)
╬хрхЌ (no ┬гAРіЉL , x , ╬▒РѓЂ) (label lРіЉh t) = РѕЎ
╬хрхЌ (yes AРіЉL , x , ╬▒РѓЂ) (labelРѕЎ LРіЉH t) = labelРѕЎ LРіЉH (╬хрхЌ ╬▒РѓЂ t)
╬хрхЌ (no ┬гAРіЉL , x , ╬▒РѓЂ) (labelРѕЎ lРіЉh t) = РѕЎ
╬хрхЌ (yes p , projРѓѓ) (unlabel lРіЉh t) = unlabel lРіЉh (╬хрхЌ ((yes (trans-РіЉ lРіЉh p)) , projРѓѓ) t)
╬хрхЌ (no ┬гp , projРѓѓ) (unlabel lРіЉh t) = РѕЎ
╬хрхЌ (yes p , projРѓѓ) (fork lРіЉh t) = fork lРіЉh (╬хрхЌ level[ (Mac _ №╝ѕ№╝Ѕ) ] t)
╬хрхЌ (no ┬гp , projРѓѓ) (fork lРіЉh t) = РѕЎ
╬хрхЌ {№╝ѕ№╝Ѕ} x (deepDup xРѓЂ) = deepDup xРѓЂ
╬хрхЌ {Bool} x (deepDup xРѓЂ) = deepDup xРѓЂ
╬хрхЌ {¤ё => ¤ёРѓЂ} x (deepDup xРѓЂ) = deepDup xРѓЂ
╬хрхЌ {Mac l ¤ё} (yes p , projРѓѓ) (deepDup xРѓЂ) = deepDup xРѓЂ
╬хрхЌ {Mac l ¤ё} (no ┬гp , projРѓѓ) (deepDup xРѓЂ) = РѕЎ
╬хрхЌ {Res l ¤ё} x (deepDup xРѓЂ) = deepDup xРѓЂ
╬хрхЌ {Id ¤ё} x (deepDup xРѓЂ) = deepDup xРѓЂ
╬хрхЌ x РѕЎ = РѕЎ

╬хрхђ : Рѕђ {¤ё n } {¤ђ : Context n} -> Term ¤ђ ¤ё -> Term ¤ђ ¤ё
╬хрхђ {¤ё} t = ╬хрхЌ level[ ¤ё ] t

--------------------------------------------------------------------------------

open import Data.Product as P
open import Data.Maybe as M
open import Function

-- Point-wise erasure of a RawEnv
╬хр┤┐ : Рѕђ {n} {¤ђ : Context n} -> RawEnv ¤ђ -> RawEnv ¤ђ
╬хр┤┐ M n with M n
╬хр┤┐ M nРѓЂ | ¤ё , mt = ¤ё , M.map ╬хрхђ mt

-- Constant mapping to РѕЎ (it can be modified and this is a problem)
-- We need the old environment for the type
РѕЎр┤┐ : Рѕђ {n} {¤ђ : Context n} -> RawEnv ¤ђ -> RawEnv ¤ђ
РѕЎр┤┐ M n = projРѓЂ (M n) , just РѕЎ

╬хр┤▒ : Рѕђ {l n} {¤ђ : Context n} -> Dec (l РіЉ A) ->  Env l ¤ђ -> Env l ¤ђ
╬хр┤▒ {_} {lр┤г} (yes p) (RE x) = RE (╬хр┤┐ x)
╬хр┤▒ (no ┬гp) (RE x) = RE (РѕЎр┤┐ x)  -- Here I should have a different Env that is not updateable

-- Heap Erasure Function
╬х╩░ : Heap -> Heap
╬х╩░ ╬Њ l with ╬Њ l
╬х╩░ ╬Њ l | n , ¤ђ , ╬ћ = n , ¤ђ , ╬хр┤▒ (l РіЉ? A) ╬ћ
--------------------------------------------------------------------------------

╬хрХю : Рѕђ {¤ёРѓЂ ¤ёРѓѓ} -> Cont ¤ёРѓЂ ¤ёРѓѓ -> Cont ¤ёРѓЂ ¤ёРѓѓ
╬хрХю (Var xРѕѕ¤ђ) = Var xРѕѕ¤ђ
╬хрХю (# xРѕѕ¤ђ) = # xРѕѕ¤ђ
╬хрХю {¤ёРѓѓ = ¤ёРѓѓ} (Then tРѓЂ Else tРѓѓ) = Then (╬хрхђ tРѓЂ) Else ╬хрхђ tРѓѓ
╬хрХю {¤ёРѓЂ = Mac .l ╬▒} {¤ёРѓѓ = Mac l ╬▓} (Bind t) = Bind (╬хрхђ t)
╬хрХю (unlabel p) = unlabel p
╬хрХю unId = unId

-- This definition is inconvinient because we inspect the result of calling ╬х╦б,
-- hence it is not clear to Agda that it is homomorphic.
-- I propose to use the Stack label as an approximation
-- of the sensitivity of the computation.
-- For instance unId :: >>= t :: [] : Stack H, is a stack that at some point will yield
-- a computation Mac H.
--

-- Plan
-- 1) Add labels to Cont
-- 2) Tie Cont l in the >>= and unlabel constructor.
-- 3) Erase terms to РѕЎ if the the label of the stack is H.
-- 4) The label of the stack corresponds to the security level of the term under evaluation
--    How can we enforce that ?

╬х╦б : Рѕђ {¤ёРѓЂ ¤ёРѓѓ l} -> Level ¤ёРѓЂ -> Level ¤ёРѓѓ -> Stack l ¤ёРѓЂ ¤ёРѓѓ -> Stack l ¤ёРѓЂ ¤ёРѓѓ
╬х╦б a b РѕЎ = РѕЎ
╬х╦б (injРѓЂ x) b [] = РѕЎ
╬х╦б (injРѓѓ y) b [] = []
╬х╦б (injРѓЂ x) b (xРѓЂ Рѕи S) = РѕЎ
╬х╦б (injРѓѓ y) (injРѓЂ x) (xРѓЂ Рѕи S) = РѕЎ
╬х╦б (injРѓѓ y) (injРѓѓ yРѓЂ) (x Рѕи S) with ╬х╦б (isSecret? _) (isSecret? _) S
╬х╦б (injРѓѓ y) (injРѓѓ yРѓЂ) (x Рѕи S) | РѕЎ = РѕЎ
╬х╦б (injРѓѓ y) (injРѓѓ yРѓЂ) (x Рѕи S) | S' = (╬хрХю x) Рѕи S'

╬хр┤и : Рѕђ {¤ёРѓЂ ¤ёРѓѓ l} -> Stack l ¤ёРѓЂ ¤ёРѓѓ -> Stack l ¤ёРѓЂ ¤ёРѓѓ
╬хр┤и S = ╬х╦б (isSecret? _) (isSecret? _) S

--------------------------------------------------------------------------------

╬х : Рѕђ {l ¤ё} -> State l ¤ё -> State l ¤ё
╬х РЪе ╬Њ , t , S РЪЕ with ╬хр┤и S
╬х {¤ё = ¤ё} (РЪе_,_,_РЪЕ {¤ђ = ¤ђ} ╬Њ t S) | РѕЎ = РЪе (╬х╩░ ╬Њ) , РѕЎ {¤ђ = ¤ђ} , РѕЎ {¤ёРѓЂ = ¤ё}РЪЕ
╬х РЪе ╬Њ , t , S РЪЕ | S' = РЪе (╬х╩░ ╬Њ) , (╬хрхђ t) , S' РЪЕ


--------------------------------------------------------------------------------

{-

Homomorphic erasure function for MAC H and stack does works for BindРѓЂ but not for BindРѓѓ

BindРѓЂ:
(╬Њ , tРѓЂ >>= tРѓѓ , S) Рєњ (╬Њ , tРѓЂ , >>= tРѓѓ : S)

(╬х(╬Њ) , ╬х(tРѓЂ) >>= ╬х(tРѓѓ) , ╬х(S)) Рєњ (╬х(╬Њ) , ╬х(tРѓЂ) , >>= ╬х(tРѓѓ) : ╬х(S))

BindРѓѓ:
(╬Њ , Mac tРѓЂ , >>= tРѓѓ : S) Рєњ (╬Њ , tРѓѓ tРѓЂ , S)

(╬х(╬Њ) , Mac РѕЎ , >>= ╬х(tРѓѓ) : ╬х(S)) РєЏ (╬х(╬Њ) , ╬х(tРѓѓ) ╬х(tРѓЂ) , ╬х(S))  -- tРѓЂ РЅа РѕЎ

-}

-- ╬х-sim' : Рѕђ {l n n' ¤ёРѓЂ ¤ёРѓѓ}{¤ђ : Context n} {¤ђ' : Context n'} {S : Stack l ¤ёРѓЂ ¤ёРѓѓ} {tРѓЂ : Term ¤ђ ¤ёРѓЂ} {tРѓѓ : Term ¤ђ' ¤ёРѓЂ'} ->



-- Simulation Property
╬х-sim : Рѕђ {l ¤ё} (sРѓЂ sРѓѓ : State l ¤ё) -> sРѓЂ РЄЮ sРѓѓ -> ╬х sРѓЂ РЄЮ ╬х sРѓѓ
╬х-sim РЪе ╬Њ , t , S РЪЕ sРѓѓ step with ╬хр┤и S
╬х-sim РЪе ╬Њ , t , S РЪЕ sРѓѓ step | [] = {!!}
╬х-sim РЪе ╬Њ , t , S РЪЕ sРѓѓ step | x Рѕи r = {!!}
╬х-sim РЪе ╬Њ , ._ , S РЪЕ ._ (AppРѓЂ ╬ћРѕѕ╬Њ) | РѕЎ = {!!}
╬х-sim РЪе ╬Њ , ._ , ._ РЪЕ ._ (AppРѓѓ yРѕѕ¤ђ xРѕѕ¤ђ) | РѕЎ = {!!}
╬х-sim РЪе ╬Њ , .(Var xРѕѕ¤ђ) , S РЪЕ ._ (VarРѓЂ ╬ћРѕѕ╬Њ xРѕѕ¤ђ tРѕѕ╬ћ ┬гval) | РѕЎ = {!!}
╬х-sim РЪе ╬Њ , .(Var xРѕѕ¤ђ) , S РЪЕ ._ (VarРѓЂ' ╬ћРѕѕ╬Њ xРѕѕ¤ђ vРѕѕ╬ћ val) | РѕЎ = {!!}
╬х-sim РЪе ╬Њ , t , ._ РЪЕ ._ (VarРѓѓ ╬ћРѕѕ╬Њ xРѕѕ¤ђ val) | РѕЎ = {!!}
╬х-sim РЪе ╬Њ , ._ , S РЪЕ ._ If | РѕЎ = {!!}
╬х-sim РЪе ╬Њ , .True , ._ РЪЕ ._ IfTrue | РѕЎ = {!!}
╬х-sim РЪе ╬Њ , .False , ._ РЪЕ ._ IfFalse | РѕЎ = {!!}
╬х-sim РЪе ╬Њ , ._ , S РЪЕ ._ Return | РѕЎ = {!!}
╬х-sim РЪе ╬Њ , ._ , S РЪЕ ._ BindРѓЂ | РѕЎ = {!!}
╬х-sim РЪе ╬Њ , ._ , ._ РЪЕ ._ BindРѓѓ | РѕЎ = {!!}
╬х-sim РЪе ╬Њ , ._ , S РЪЕ ._ (Label' p) | РѕЎ = {!!}
╬х-sim РЪе ╬Њ , ._ , S РЪЕ ._ (UnlabelРѓЂ p) | РѕЎ = {!!}
╬х-sim РЪе ╬Њ , ._ , ._ РЪЕ ._ (UnlabelРѓѓ p) | РѕЎ = {!!}
╬х-sim РЪе ╬Њ , ._ , S РЪЕ ._ UnIdРѓЂ | РѕЎ = {!!}
╬х-sim РЪе ╬Њ , ._ , ._ РЪЕ ._ UnIdРѓѓ | РѕЎ = {!!}
╬х-sim РЪе ╬Њ , ._ , S РЪЕ ._ (Fork p) | РѕЎ = {!!}
╬х-sim РЪе ╬Њ , .РѕЎ , .РѕЎ РЪЕ .(РЪе ╬Њ , РѕЎ , РѕЎ РЪЕ) Hole | РѕЎ = Hole
