import Lattice as L

module Sequential.LowEq (ùìõ : L.Lattice) (A : L.Label ùìõ) where

open import Types ùìõ
open import Sequential.Erasure ùìõ A as SE
open import Sequential.Graph ùìõ A

--------------------------------------------------------------------------------
-- Temporarily side-step bug #2245

import Sequential.Calculus as SC
open SC ùìõ

--------------------------------------------------------------------------------

open import Relation.Binary.PropositionalEquality
open import Data.Empty
open import Relation.Nullary
open import Data.Maybe as M
open import Data.Product using (_√ó_ ; proj‚ÇÅ ; proj‚ÇÇ)
import Data.Product as P

--------------------------------------------------------------------------------

_‚âÖ·µÄ_ : ‚àÄ {œÄ œÑ} (t‚ÇÅ t‚ÇÇ : Term œÄ œÑ) -> Set
t‚ÇÅ ‚âÖ·µÄ t‚ÇÇ = Œµ·µÄ t‚ÇÅ ‚â° Œµ·µÄ t‚ÇÇ

data _‚âà·µÄ_ {œÄ œÑ} (t‚ÇÅ t‚ÇÇ : Term œÄ œÑ) : Set where
  ‚ü®_,_‚ü© : ‚àÄ {t' : Term œÄ œÑ} -> (e‚ÇÅ : Erase·µÄ t‚ÇÅ t') (e‚ÇÇ : Erase·µÄ t‚ÇÇ t') -> t‚ÇÅ ‚âà·µÄ t‚ÇÇ

‚åû_‚åü·µÄ : ‚àÄ {œÄ œÑ} {t‚ÇÅ t‚ÇÇ : Term œÄ œÑ} -> t‚ÇÅ ‚âà·µÄ t‚ÇÇ -> t‚ÇÅ ‚âÖ·µÄ t‚ÇÇ
‚åû ‚ü® e‚ÇÅ , e‚ÇÇ ‚ü© ‚åü·µÄ rewrite unlift-Œµ·µÄ e‚ÇÅ | unlift-Œµ·µÄ e‚ÇÇ = refl

‚åú_‚åù·µÄ : ‚àÄ {œÄ œÑ} {t‚ÇÅ t‚ÇÇ : Term œÄ œÑ} -> t‚ÇÅ ‚âÖ·µÄ t‚ÇÇ -> t‚ÇÅ ‚âà·µÄ t‚ÇÇ
‚åú_‚åù·µÄ {t‚ÇÅ = t‚ÇÅ} {t‚ÇÇ} eq with lift-Œµ·µÄ t‚ÇÅ | lift-Œµ·µÄ t‚ÇÇ
... | x | y rewrite eq = ‚ü® x , y ‚ü©

--------------------------------------------------------------------------------

_‚âÖ·∂ú_ : ‚àÄ {l œÄ œÑ‚ÇÅ œÑ‚ÇÇ} (C‚ÇÅ C‚ÇÇ : Cont l œÄ œÑ‚ÇÅ œÑ‚ÇÇ) -> Set
C‚ÇÅ ‚âÖ·∂ú C‚ÇÇ = Œµ·∂ú C‚ÇÅ ‚â° Œµ·∂ú C‚ÇÇ

data _‚âà·∂ú_ {l œÄ œÑ‚ÇÅ œÑ‚ÇÇ} (C‚ÇÅ C‚ÇÇ : Cont l œÄ œÑ‚ÇÅ œÑ‚ÇÇ) : Set where
  K·∂ú : ‚àÄ {C·¥± : Cont l œÄ œÑ‚ÇÅ œÑ‚ÇÇ} -> Erase·∂ú C‚ÇÅ C·¥± -> Erase·∂ú C‚ÇÇ C·¥± -> C‚ÇÅ ‚âà·∂ú C‚ÇÇ

‚åû_‚åü·∂ú : ‚àÄ {l œÄ œÑ‚ÇÅ œÑ‚ÇÇ} {C‚ÇÅ C‚ÇÇ : Cont l œÄ œÑ‚ÇÅ œÑ‚ÇÇ} -> C‚ÇÅ ‚âà·∂ú C‚ÇÇ -> C‚ÇÅ ‚âÖ·∂ú C‚ÇÇ
‚åû K·∂ú e‚ÇÅ e‚ÇÇ ‚åü·∂ú rewrite unlift-Œµ·∂ú e‚ÇÅ | unlift-Œµ·∂ú e‚ÇÇ = refl

‚åú_‚åù·∂ú : ‚àÄ {l œÄ œÑ‚ÇÅ œÑ‚ÇÇ} {C‚ÇÅ C‚ÇÇ : Cont l œÄ œÑ‚ÇÅ œÑ‚ÇÇ} -> C‚ÇÅ ‚âÖ·∂ú C‚ÇÇ -> C‚ÇÅ ‚âà·∂ú C‚ÇÇ
‚åú_‚åù·∂ú {C‚ÇÅ = C‚ÇÅ} {C‚ÇÇ} eq with lift-Œµ·∂ú C‚ÇÅ | lift-Œµ·∂ú C‚ÇÇ
... | e‚ÇÅ | e‚ÇÇ rewrite eq = K·∂ú e‚ÇÅ e‚ÇÇ

--------------------------------------------------------------------------------

_‚âÖÀ¢_ : ‚àÄ {l œÄ œÑ‚ÇÅ œÑ‚ÇÇ} (S‚ÇÅ S‚ÇÇ : Stack l œÄ œÑ‚ÇÅ œÑ‚ÇÇ) -> Set
S‚ÇÅ ‚âÖÀ¢ S‚ÇÇ = ŒµÀ¢ S‚ÇÅ ‚â° ŒµÀ¢ S‚ÇÇ

data _‚âàÀ¢_ {l œÄ œÑ‚ÇÅ œÑ‚ÇÇ } (S‚ÇÅ S‚ÇÇ : Stack l œÄ œÑ‚ÇÅ œÑ‚ÇÇ) : Set where
  KÀ¢ : ‚àÄ {S·¥± : Stack l œÄ œÑ‚ÇÅ œÑ‚ÇÇ} -> EraseÀ¢ S‚ÇÅ S·¥± -> EraseÀ¢ S‚ÇÇ S·¥± -> S‚ÇÅ ‚âàÀ¢ S‚ÇÇ

‚åû_‚åüÀ¢ : ‚àÄ {l œÄ œÑ‚ÇÅ œÑ‚ÇÇ} {S‚ÇÅ S‚ÇÇ : Stack l œÄ œÑ‚ÇÅ œÑ‚ÇÇ} -> S‚ÇÅ ‚âàÀ¢ S‚ÇÇ -> S‚ÇÅ ‚âÖÀ¢ S‚ÇÇ
‚åû KÀ¢ e‚ÇÅ e‚ÇÇ ‚åüÀ¢ rewrite unlift-ŒµÀ¢ e‚ÇÅ | unlift-ŒµÀ¢ e‚ÇÇ = refl

‚åú_‚åùÀ¢ : ‚àÄ {l œÄ œÑ‚ÇÅ œÑ‚ÇÇ} {S‚ÇÅ S‚ÇÇ : Stack l œÄ œÑ‚ÇÅ œÑ‚ÇÇ} -> S‚ÇÅ ‚âÖÀ¢ S‚ÇÇ -> S‚ÇÅ ‚âàÀ¢ S‚ÇÇ
‚åú_‚åùÀ¢ {S‚ÇÅ = S‚ÇÅ} {S‚ÇÇ} eq with lift-ŒµÀ¢ S‚ÇÅ | lift-ŒµÀ¢ S‚ÇÇ
... | e‚ÇÅ | e‚ÇÇ rewrite eq = KÀ¢ e‚ÇÅ e‚ÇÇ

--------------------------------------------------------------------------------

-- TODO remove?

data _‚âà·¥π·µÄ_ {œÄ œÑ} : Maybe (Term œÄ œÑ) -> Maybe (Term œÄ œÑ) -> Set where
  nothing : nothing ‚âà·¥π·µÄ nothing
  just : ‚àÄ {t‚ÇÅ t‚ÇÇ : Term œÄ œÑ} -> t‚ÇÅ ‚âà·µÄ t‚ÇÇ -> just t‚ÇÅ ‚âà·¥π·µÄ just t‚ÇÇ

_‚âÖ·¥π·µÄ_ : ‚àÄ {œÄ œÑ} (mt‚ÇÅ mt‚ÇÇ : Maybe (Term œÄ œÑ)) -> Set
mt‚ÇÅ ‚âÖ·¥π·µÄ mt‚ÇÇ = M.map Œµ·µÄ mt‚ÇÅ ‚â° M.map Œµ·µÄ mt‚ÇÇ

‚åú_‚åù·¥π·µÄ : ‚àÄ {œÄ œÑ} {mt‚ÇÅ mt‚ÇÇ : Maybe (Term œÄ œÑ)} -> mt‚ÇÅ ‚âÖ·¥π·µÄ mt‚ÇÇ -> mt‚ÇÅ ‚âà·¥π·µÄ mt‚ÇÇ
‚åú_‚åù·¥π·µÄ {mt‚ÇÅ = just x} {just x‚ÇÅ} eq = just ‚åú split eq ‚åù·µÄ
  where split : ‚àÄ {œÄ œÑ} {t‚ÇÅ t‚ÇÇ : Term œÄ œÑ} -> _‚â°_ {_} {Maybe (Term œÄ œÑ)} (just t‚ÇÅ) (just t‚ÇÇ) -> t‚ÇÅ ‚â° t‚ÇÇ
        split refl = refl
‚åú_‚åù·¥π·µÄ {mt‚ÇÅ = just x} {nothing} ()
‚åú_‚åù·¥π·µÄ {mt‚ÇÅ = nothing} {just x} ()
‚åú_‚åù·¥π·µÄ {mt‚ÇÅ = nothing} {nothing} refl = nothing

--------------------------------------------------------------------------------

-- -- TODO remove?

-- data _‚âà·¥¥‚ü®_‚ü©_ {l œÄ} (Œî‚ÇÅ : Heap l œÄ) (x : Dec (l ‚äë A)) (Œî‚ÇÇ : Heap l œÄ) : Set where
--   K·¥¥ : ‚àÄ {Œî·¥± : Heap l œÄ} -> Erase·¥¥ x Œî‚ÇÅ Œî·¥± -> Erase·¥¥ x Œî‚ÇÇ Œî·¥± -> Œî‚ÇÅ ‚âà·¥¥‚ü® x ‚ü© Œî‚ÇÇ

--------------------------------------------------------------------------------
-- Structural low-equivalence for Heaps

_map-‚âÖ·¥¥_ : ‚àÄ {ls} (Œì‚ÇÅ Œì‚ÇÇ : Heaps ls) -> Set
Œì‚ÇÅ map-‚âÖ·¥¥ Œì‚ÇÇ = map-Œµ·¥¥ Œì‚ÇÅ ‚â° map-Œµ·¥¥ Œì‚ÇÇ

data _map-‚âà·¥¥_ {ls} (Œì‚ÇÅ Œì‚ÇÇ : Heaps ls) : Set where
  K-map·¥¥ : ‚àÄ {Œì·¥± : Heaps ls} -> EraseMap·¥¥ Œì‚ÇÅ Œì·¥± -> EraseMap·¥¥ Œì‚ÇÇ Œì·¥± -> Œì‚ÇÅ map-‚âà·¥¥ Œì‚ÇÇ

map-‚åû_‚åü·¥¥ : ‚àÄ {ls} {Œì‚ÇÅ Œì‚ÇÇ : Heaps ls} -> Œì‚ÇÅ map-‚âà·¥¥ Œì‚ÇÇ -> Œì‚ÇÅ map-‚âÖ·¥¥ Œì‚ÇÇ
map-‚åû K-map·¥¥ e‚ÇÅ e‚ÇÇ ‚åü·¥¥ rewrite unlift-map-Œµ·¥¥ e‚ÇÅ | unlift-map-Œµ·¥¥ e‚ÇÇ = refl

map-‚åú_‚åù·¥¥ : ‚àÄ {ls} {Œì‚ÇÅ Œì‚ÇÇ : Heaps ls} -> Œì‚ÇÅ map-‚âÖ·¥¥ Œì‚ÇÇ -> Œì‚ÇÅ map-‚âà·¥¥ Œì‚ÇÇ
map-‚åú_‚åù·¥¥ {Œì‚ÇÅ = Œì‚ÇÅ} {Œì‚ÇÇ} eq with lift-map-Œµ·¥¥ Œì‚ÇÅ | lift-map-Œµ·¥¥ Œì‚ÇÇ
... | e‚ÇÅ | e‚ÇÇ rewrite eq = K-map·¥¥ e‚ÇÅ e‚ÇÇ

trans-‚âà·¥¥ : ‚àÄ {ls} {Œì‚ÇÅ Œì‚ÇÇ Œì‚ÇÉ : Heaps ls} -> Œì‚ÇÅ map-‚âà·¥¥ Œì‚ÇÇ -> Œì‚ÇÇ map-‚âà·¥¥ Œì‚ÇÉ -> Œì‚ÇÅ map-‚âà·¥¥ Œì‚ÇÉ
trans-‚âà·¥¥ a b = map-‚åú trans map-‚åû a ‚åü·¥¥ map-‚åû b ‚åü·¥¥ ‚åù·¥¥

--------------------------------------------------------------------------------

_map-‚âÖ·¥π_ : ‚àÄ {ls} (Ms‚ÇÅ Ms‚ÇÇ : Memories ls) -> Set
Ms‚ÇÅ map-‚âÖ·¥π Ms‚ÇÇ = map-Œµ·¥π Ms‚ÇÅ ‚â° map-Œµ·¥π Ms‚ÇÇ

data _map-‚âà·¥π_ {ls} (Ms‚ÇÅ Ms‚ÇÇ : Memories ls) : Set where
  K-map·¥π : ‚àÄ {Ms·¥± : Memories ls} -> EraseMap·¥π Ms‚ÇÅ Ms·¥± -> EraseMap·¥π Ms‚ÇÇ Ms·¥± -> Ms‚ÇÅ map-‚âà·¥π Ms‚ÇÇ

map-‚åû_‚åü·¥π : ‚àÄ {ls} {Ms‚ÇÅ Ms‚ÇÇ : Memories ls} -> Ms‚ÇÅ map-‚âà·¥π Ms‚ÇÇ -> Ms‚ÇÅ map-‚âÖ·¥π Ms‚ÇÇ
map-‚åû K-map·¥π e‚ÇÅ e‚ÇÇ ‚åü·¥π rewrite unlift-map-Œµ·¥π e‚ÇÅ | unlift-map-Œµ·¥π e‚ÇÇ = refl

map-‚åú_‚åù·¥π : ‚àÄ {ls} {Ms‚ÇÅ Ms‚ÇÇ : Memories ls} -> Ms‚ÇÅ map-‚âÖ·¥π Ms‚ÇÇ -> Ms‚ÇÅ map-‚âà·¥π Ms‚ÇÇ
map-‚åú_‚åù·¥π {Ms‚ÇÅ = Ms‚ÇÅ} {Ms‚ÇÇ} eq with lift-map-Œµ·¥π Ms‚ÇÅ | lift-map-Œµ·¥π Ms‚ÇÇ
... | e‚ÇÅ | e‚ÇÇ rewrite eq = K-map·¥π e‚ÇÅ e‚ÇÇ

--------------------------------------------------------------------------------

_‚âÖ·¥æ‚ü®_‚ü©_ : ‚àÄ {l ls œÑ} -> Program l ls œÑ -> Dec (l ‚äë A) -> Program l ls œÑ -> Set
p‚ÇÅ ‚âÖ·¥æ‚ü® x ‚ü© p‚ÇÇ = Œµ‚ÇÅ·¥æ x p‚ÇÅ ‚â° Œµ‚ÇÅ·¥æ x p‚ÇÇ

-- Program low-equivalence
data _‚âà·¥æ‚ü®_‚ü©_ {l ls œÑ} (p‚ÇÅ : Program l ls œÑ) (x : Dec (l ‚äë A)) (p‚ÇÇ : Program l ls œÑ) : Set where
  K·¥æ : ‚àÄ {p·¥± : Program l ls œÑ} -> Erase·¥æ x p‚ÇÅ p·¥± -> Erase·¥æ x p‚ÇÇ p·¥± -> p‚ÇÅ ‚âà·¥æ‚ü® x ‚ü© p‚ÇÇ

‚åú_‚åù·¥æ : ‚àÄ {l ls œÑ} {p‚ÇÅ p‚ÇÇ : Program l ls œÑ} {x : Dec _} -> p‚ÇÅ ‚âÖ·¥æ‚ü® x ‚ü© p‚ÇÇ -> p‚ÇÅ ‚âà·¥æ‚ü® x ‚ü© p‚ÇÇ
‚åú_‚åù·¥æ {p‚ÇÅ = p‚ÇÅ} {p‚ÇÇ} {x} eq with lift-Œµ·¥æ x p‚ÇÅ | lift-Œµ·¥æ x p‚ÇÇ
... | e‚ÇÅ | e‚ÇÇ rewrite eq = K·¥æ e‚ÇÅ e‚ÇÇ

‚åû_‚åü·¥æ : ‚àÄ {l ls œÑ} {p‚ÇÅ p‚ÇÇ : Program l ls œÑ} {x : Dec _} -> p‚ÇÅ ‚âà·¥æ‚ü® x ‚ü© p‚ÇÇ -> p‚ÇÅ ‚âÖ·¥æ‚ü® x ‚ü© p‚ÇÇ
‚åû K·¥æ e‚ÇÅ e‚ÇÇ ‚åü·¥æ rewrite unlift-Œµ·¥æ e‚ÇÅ | unlift-Œµ·¥æ e‚ÇÇ = refl

_‚âÖ·¥æ_ : ‚àÄ {l ls œÑ} -> Program l ls œÑ -> Program l ls œÑ -> Set
p‚ÇÅ ‚âÖ·¥æ p‚ÇÇ = p‚ÇÅ ‚âÖ·¥æ‚ü® (_ ‚äë? A) ‚ü© p‚ÇÇ

_‚â°·¥æ_ : ‚àÄ {ls l œÑ} -> Program l ls œÑ -> Program l ls œÑ -> Set
_‚â°·¥æ_ = _‚â°_

lift-‚âà·¥æ : ‚àÄ {l ls œÑ œÑ' œÄ} {Ms‚ÇÅ Ms‚ÇÇ : Memories ls} {Œì‚ÇÅ Œì‚ÇÇ : Heaps ls} {t‚ÇÅ t‚ÇÇ : Term œÄ œÑ} {S‚ÇÅ S‚ÇÇ : Stack l œÄ œÑ œÑ'} (l‚äëA : l ‚äë A)
            -> Ms‚ÇÅ map-‚âà·¥π Ms‚ÇÇ -> Œì‚ÇÅ map-‚âà·¥¥ Œì‚ÇÇ -> t‚ÇÅ ‚âà·µÄ t‚ÇÇ -> S‚ÇÅ ‚âàÀ¢ S‚ÇÇ -> ‚ü® Ms‚ÇÅ , Œì‚ÇÅ , t‚ÇÅ , S‚ÇÅ ‚ü© ‚âà·¥æ‚ü® yes l‚äëA ‚ü© ‚ü® Ms‚ÇÇ , Œì‚ÇÇ , t‚ÇÇ , S‚ÇÇ ‚ü©
lift-‚âà·¥æ {Ms‚ÇÅ = Ms‚ÇÅ} {Ms‚ÇÇ} {Œì‚ÇÅ} {Œì‚ÇÇ} {t‚ÇÅ} {t‚ÇÇ} {S‚ÇÅ} {S‚ÇÇ} l‚äëA Ms‚ÇÅ‚âàMs‚ÇÇ Œì‚ÇÅ‚âàŒì‚ÇÇ t‚ÇÅ‚âàt‚ÇÇ S‚ÇÅ‚âàS‚ÇÇ
  = ‚åú aux map-‚åû Ms‚ÇÅ‚âàMs‚ÇÇ ‚åü·¥π map-‚åû Œì‚ÇÅ‚âàŒì‚ÇÇ ‚åü·¥¥ ‚åû t‚ÇÅ‚âàt‚ÇÇ ‚åü·µÄ ‚åû S‚ÇÅ‚âàS‚ÇÇ ‚åüÀ¢ ‚åù·¥æ
  where aux : ‚àÄ {l ls œÑ œÑ' œÄ} {Ms‚ÇÅ Ms‚ÇÇ : Memories ls} {Œì‚ÇÅ Œì‚ÇÇ : Heaps ls} {t‚ÇÅ t‚ÇÇ : Term œÄ œÑ} {S‚ÇÅ S‚ÇÇ : Stack l œÄ œÑ œÑ'} ->
              Ms‚ÇÅ ‚â° Ms‚ÇÇ -> Œì‚ÇÅ ‚â° Œì‚ÇÇ -> t‚ÇÅ ‚â° t‚ÇÇ -> S‚ÇÅ ‚â° S‚ÇÇ -> ‚ü® Ms‚ÇÅ , Œì‚ÇÅ , t‚ÇÅ , S‚ÇÅ ‚ü© ‚â°·¥æ ‚ü® Ms‚ÇÇ , Œì‚ÇÇ , t‚ÇÇ , S‚ÇÇ ‚ü©
        aux eq‚ÇÅ eq‚ÇÇ eq‚ÇÉ eq‚ÇÑ rewrite eq‚ÇÅ | eq‚ÇÇ | eq‚ÇÉ | eq‚ÇÑ = refl

data _‚àº·¥æ‚ü®_‚ü©_ {l ls œÑ} : Program l ls œÑ -> l ‚äë A -> Program l ls œÑ -> Set where
  ‚ü®_,_,_,_‚ü© : ‚àÄ {Ms‚ÇÅ Ms‚ÇÇ Œì‚ÇÅ Œì‚ÇÇ œÑ' œÄ S‚ÇÅ S‚ÇÇ} {t‚ÇÅ t‚ÇÇ : Term œÄ œÑ'} {l‚äëA : l ‚äë A} ->
                (Ms‚ÇÅ‚âàMs‚ÇÇ : Ms‚ÇÅ map-‚âà·¥π Ms‚ÇÇ) (Œì‚ÇÅ‚âàŒì‚ÇÇ : Œì‚ÇÅ map-‚âà·¥¥ Œì‚ÇÇ) (t‚ÇÅ‚âàt‚ÇÇ : t‚ÇÅ ‚âà·µÄ t‚ÇÇ) (S‚ÇÅ‚âàS‚ÇÇ : S‚ÇÅ ‚âàÀ¢ S‚ÇÇ) ->
                ‚ü® Ms‚ÇÅ , Œì‚ÇÅ , t‚ÇÅ , S‚ÇÅ ‚ü© ‚àº·¥æ‚ü® l‚äëA ‚ü© ‚ü® Ms‚ÇÇ , Œì‚ÇÇ , t‚ÇÇ , S‚ÇÇ ‚ü©


‚àº-‚âà·¥æ : ‚àÄ {l ls œÑ} {p‚ÇÅ p‚ÇÇ : Program l ls œÑ} {l‚äëA : l ‚äë A} -> p‚ÇÅ ‚àº·¥æ‚ü® l‚äëA ‚ü© p‚ÇÇ -> p‚ÇÅ ‚âà·¥æ‚ü® yes l‚äëA ‚ü© p‚ÇÇ
‚àº-‚âà·¥æ ‚ü® Ms‚ÇÅ‚âàMs‚ÇÇ , Œì‚ÇÅ‚âàŒì‚ÇÇ , t‚ÇÅ‚âàt‚ÇÇ , S‚ÇÅ‚âàS‚ÇÇ ‚ü© = lift-‚âà·¥æ _ Ms‚ÇÅ‚âàMs‚ÇÇ Œì‚ÇÅ‚âàŒì‚ÇÇ t‚ÇÅ‚âàt‚ÇÇ S‚ÇÅ‚âàS‚ÇÇ

‚âà-‚àº·¥æ : ‚àÄ {l ls œÑ œÑ' œÄ} {Ms‚ÇÅ Ms‚ÇÇ : Memories ls} {Œì‚ÇÅ Œì‚ÇÇ : Heaps ls} {t‚ÇÅ t‚ÇÇ : Term œÄ œÑ} {S‚ÇÅ S‚ÇÇ : Stack l œÄ œÑ œÑ'} {l‚äëA : l ‚äë A} ->
       let p‚ÇÅ = ‚ü® Ms‚ÇÅ , Œì‚ÇÅ , t‚ÇÅ , S‚ÇÅ ‚ü©
           p‚ÇÇ = ‚ü® Ms‚ÇÇ , Œì‚ÇÇ , t‚ÇÇ , S‚ÇÇ ‚ü© in p‚ÇÅ ‚âà·¥æ‚ü® yes l‚äëA ‚ü© p‚ÇÇ -> p‚ÇÅ ‚àº·¥æ‚ü® l‚äëA ‚ü© p‚ÇÇ
‚âà-‚àº·¥æ (K·¥æ ‚ü® x , x‚ÇÉ , x‚ÇÅ , x‚ÇÇ ‚ü© ‚ü® x‚ÇÑ , x‚ÇÖ , x‚ÇÜ , x‚Çá ‚ü©) = ‚ü® (K-map·¥π x x‚ÇÑ) , (K-map·¥¥ x‚ÇÉ x‚ÇÖ) , ‚ü® x‚ÇÅ , x‚ÇÜ ‚ü© , (KÀ¢ x‚ÇÇ x‚Çá) ‚ü©
