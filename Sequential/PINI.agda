import Lattice as L

module Sequential.PINI (ùìõ : L.Lattice) (A : L.Label ùìõ) where

open import Types ùìõ
open import Sequential.Calculus ùìõ
open import Sequential.Semantics ùìõ
open import Sequential.Determinism ùìõ
open import Sequential.Erasure ùìõ A

open import Relation.Binary.PropositionalEquality

data _‚âà·¥æ_ {l ls œÑ} (p‚ÇÅ p‚ÇÇ : Program l ls œÑ) : Set where
  Œµ-refl : Œµ·¥æ p‚ÇÅ ‚â° Œµ·¥æ p‚ÇÇ -> p‚ÇÅ ‚âà·¥æ p‚ÇÇ

pini : ‚àÄ {l ls œÑ} {p‚ÇÅ p‚ÇÅ' p‚ÇÇ p‚ÇÇ' : Program l ls œÑ} -> p‚ÇÅ ‚âà·¥æ p‚ÇÇ -> p‚ÇÅ ‚üº p‚ÇÅ' -> p‚ÇÇ ‚üº p‚ÇÇ' -> p‚ÇÅ' ‚âà·¥æ p‚ÇÇ'
pini (Œµ-refl eq) s‚ÇÅ s‚ÇÇ = Œµ-refl (aux eq (Œµ·¥æ-sim s‚ÇÅ) (Œµ·¥æ-sim s‚ÇÇ))
  where aux : ‚àÄ {l ls œÑ} {p‚ÇÅ p‚ÇÅ' p‚ÇÇ p‚ÇÇ' : Program l ls œÑ} -> p‚ÇÅ ‚â° p‚ÇÇ -> p‚ÇÅ ‚üº p‚ÇÅ' -> p‚ÇÇ ‚üº p‚ÇÇ' -> p‚ÇÅ' ‚â° p‚ÇÇ'
        aux refl x y = determinism‚üº x y
