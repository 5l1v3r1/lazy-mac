open import Lattice

module Sequential.Semantics {- (ùìõ : Lattice) -} where

open import Types
open import Sequential.Calculus
open import Data.Maybe
open import Data.Product
open import Data.Map
open import Relation.Binary.PropositionalEquality hiding ([_] ; subst)

--------------------------------------------------------------------------------
-- DeepDup helper functions and data types

open import Data.Bool using (not)
open import Data.List using (filter)
open import Relation.Nullary.Decidable using (‚åä_‚åã)

-- Unguarded free variables
-- It should be a set, but there is no simple standard implementation of sets,
-- therefore I will start with a simple list and see where this takes us.
ufv : Term -> List ‚Ñï
ufv ÔºàÔºâ = []
ufv True = []
ufv False = []
ufv (Id t) = ufv t
ufv (unId t) = ufv t
ufv (Var x) = x ‚à∑ []
ufv (Abs n t) = filter (Œª m ‚Üí not ‚åä n ‚âü m ‚åã) (ufv t)
ufv (App t t‚ÇÅ) = ufv t ++ ufv t‚ÇÅ
ufv (If t Then t‚ÇÅ Else t‚ÇÇ) = ufv t ++ ufv t‚ÇÅ ++ ufv t‚ÇÇ
ufv (Return l t) = ufv t
ufv (Bind l t t‚ÇÅ) = ufv t ++ ufv t‚ÇÅ
ufv (Mac l t) = ufv t
ufv (Res l t) = ufv t
ufv (label l‚äëh t) = ufv t
ufv (label‚àô l‚äëh t) = ufv t
ufv (unlabel l‚äëh t) = ufv t
ufv (fork l‚äëh t) = ufv t
ufv (deepDup x) = [] -- Unguarded
ufv ‚àô = []

-- Unguareded Free Variables (we might need this as a data type)
data UFV : Term -> List ‚Ñï -> Set where
-- ...

-- DeepDupHeap l Œì ns ns' Œì' corresponds to Œì' = Œì[ n' ‚Ü¶ deepDup n | (n , n') <- zip ns ns']
data DeepDupHeap (l : Label) : Heap -> List ‚Ñï -> List ‚Ñï -> Heap -> Set where
  done : ‚àÄ {Œì} -> DeepDupHeap l Œì [] [] Œì
  addNext : ‚àÄ {Œì‚ÇÅ Œì‚ÇÇ Œì‚ÇÉ n n' ns ns'} -> Œì‚ÇÇ ‚âî·¥¨ Œì‚ÇÅ [ n' ‚Ü¶ (l , deepDup n) ]
                                     -> DeepDupHeap l Œì‚ÇÇ ns ns' Œì‚ÇÉ
                                     -> DeepDupHeap l Œì‚ÇÅ (n ‚à∑ ns) (n' ‚à∑ ns') Œì‚ÇÉ

-- Syntatic Sugar for DeepDupHeap
_‚âî·¥∞_[_‚Ü¶_] : Heap -> Heap -> List ‚Ñï -> Label √ó List ‚Ñï -> Set
Œì' ‚âî·¥∞ Œì [ ns' ‚Ü¶ (l , ns) ] = DeepDupHeap l Œì ns ns' Œì'

--------------------------------------------------------------------------------

-- Operational Semantics
-- Here since we use the Substs proof we implicitly rule out name clashes in substitutions.
-- Terms that do not comply with this assumption are not reducible according to this semantics,
-- however they could be after Œ±-conversion (we simply don't want to deal with that,
-- and assume they have already been Œ±-converted).
-- Note that stuck terms will be dealt with in the concurrent semantics.
data _‚áù_ {l : Label} : State l -> State l -> Set where

 App‚ÇÅ : ‚àÄ {Œì Œì' S t‚ÇÅ t‚ÇÇ n} -> Œì' ‚âî·¥¨ Œì [ n ‚Ü¶ (l , t‚ÇÇ) ]
                           -> ‚ü® Œì , App t‚ÇÅ t‚ÇÇ , S ‚ü© ‚áù ‚ü® Œì' , t‚ÇÅ , Var n ‚à∑ S ‚ü©

 App‚ÇÇ : ‚àÄ {Œì n m t t' S} -> Subst m (Var n) t t' -> ‚ü® Œì , Abs m t , Var n ‚à∑ S ‚ü© ‚áù ‚ü® Œì , t' , S ‚ü©
 
 Var‚ÇÅ : ‚àÄ {Œì Œì' n t S l'} -> ¬¨ (Value t)
                          -> Œì ‚âî·¥ø Œì' [ n ‚Ü¶ (l' , t) ]
                          -> ‚ü® Œì' , Var n , S ‚ü© ‚áù ‚ü® Œì , t , (# l n) ‚à∑ S ‚ü©

 Var‚ÇÅ' : ‚àÄ {Œì Œì' n v S l'} -> Value v
                           -> n ‚Ü¶ (l' , v) ‚àà Œì
                           -> ‚ü® Œì' , Var n , S ‚ü© ‚áù ‚ü® Œì , v , S ‚ü©

 Var‚ÇÇ : ‚àÄ {Œì Œì' n v S} -> Œì' ‚âî·¥æ Œì [ n ‚Ü¶ (l , v) ]
                       -> Value v
                       -> ‚ü® Œì , v , (# l n) ‚à∑ S ‚ü© ‚áù ‚ü® Œì' , v , S ‚ü©

 If : ‚àÄ {Œì t‚ÇÅ t‚ÇÇ t‚ÇÉ S} -> ‚ü® Œì , (If t‚ÇÅ Then t‚ÇÇ Else t‚ÇÉ) , S ‚ü© ‚áù ‚ü® Œì , t‚ÇÅ , (Then t‚ÇÇ Else t‚ÇÉ) ‚à∑ S ‚ü©
 IfTrue : ‚àÄ {Œì t‚ÇÇ t‚ÇÉ S} -> ‚ü® Œì , True , (Then t‚ÇÇ Else t‚ÇÉ) ‚à∑ S ‚ü© ‚áù ‚ü® Œì , t‚ÇÇ , S ‚ü©
 IfFalse : ‚àÄ {Œì t‚ÇÇ t‚ÇÉ S} -> ‚ü® Œì , False , (Then t‚ÇÇ Else t‚ÇÉ) ‚à∑ S ‚ü© ‚áù ‚ü® Œì , t‚ÇÉ , S ‚ü©

 Return : ‚àÄ {Œì t S} -> ‚ü® Œì , Return l t , S ‚ü© ‚áù ‚ü® Œì , Mac l t , S ‚ü©
 Bind‚ÇÅ : ‚àÄ {Œì t‚ÇÅ t‚ÇÇ S} -> ‚ü® Œì , Bind l t‚ÇÅ t‚ÇÇ , S ‚ü© ‚áù ‚ü® Œì , t‚ÇÅ , (Bind l t‚ÇÇ ‚à∑ S ) ‚ü©
 Bind‚ÇÇ : ‚àÄ {Œì t‚ÇÅ t‚ÇÇ S} -> ‚ü® Œì , Mac l t‚ÇÅ , Bind l t‚ÇÇ ‚à∑ S ‚ü© ‚áù ‚ü® Œì , App t‚ÇÇ t‚ÇÅ , S  ‚ü©

 Label' : ‚àÄ {Œì t S h} -> (p : l ‚äë h) -> ‚ü® Œì , label p t , S ‚ü© ‚áù ‚ü® Œì , (Return l (Res h (Id t))) , S ‚ü©

 Unlabel‚ÇÅ : ‚àÄ {Œì t S l'} -> (p : l' ‚äë l) -> ‚ü® Œì , unlabel p t , S ‚ü© ‚áù ‚ü® Œì , t , unlabel p ‚à∑ S ‚ü©
 Unlabel‚ÇÇ : ‚àÄ {Œì t S l'} -> (p : l' ‚äë l) -> ‚ü® Œì , Res l t , unlabel p ‚à∑ S ‚ü© ‚áù ‚ü® Œì , t , unId ‚à∑ S ‚ü©

 UnId‚ÇÅ : ‚àÄ {Œì t S} -> ‚ü® Œì , unId t , S ‚ü© ‚áù ‚ü® Œì , t , unId ‚à∑ S ‚ü© 
 UnId‚ÇÇ : ‚àÄ {Œì t S} -> ‚ü® Œì , Id t , unId ‚à∑ S ‚ü© ‚áù ‚ü® Œì , t , S ‚ü© 

 Fork : ‚àÄ {Œì t S h} -> (p : l ‚äë h) -> ‚ü® Œì , (fork p t) , S ‚ü© ‚áù ‚ü® Œì , Return l ÔºàÔºâ , S ‚ü© 

 Hole : ‚àÄ {Œì S} -> ‚ü® Œì , ‚àô , S ‚ü© ‚áù ‚ü® Œì , ‚àô , S ‚ü©

 DeepDup : ‚àÄ {Œì‚ÇÅ Œì‚ÇÇ Œì‚ÇÉ n n' ns' S l' t t'} -> n ‚Ü¶ (l' , t) ‚àà Œì‚ÇÅ
                                -> Substs t (ufv t) ns' t'
                                -> Œì‚ÇÇ ‚âî·¥∞ Œì‚ÇÅ [ ns' ‚Ü¶ (l , ufv t) ]
                                -> Œì‚ÇÉ ‚âî·¥¨ Œì‚ÇÇ [ n' ‚Ü¶ (l , t') ]
                                -> ‚ü® Œì‚ÇÅ , (deepDup n) , S ‚ü© ‚áù ‚ü® Œì‚ÇÉ , Var n' , S ‚ü©


-- Type preservation
ty-preservation : ‚àÄ {l œÄ‚ÇÅ œÄ‚ÇÇ œÑ Œì‚ÇÅ Œì‚ÇÇ t‚ÇÅ t‚ÇÇ} {S‚ÇÅ S‚ÇÇ : Stack l} ->
                   let s‚ÇÅ = ‚ü® Œì‚ÇÅ , t‚ÇÅ , S‚ÇÅ ‚ü©
                       s‚ÇÇ = ‚ü® Œì‚ÇÇ , t‚ÇÇ , S‚ÇÇ ‚ü© in œÄ‚ÇÅ , œÄ‚ÇÇ ‚ä¢À¢ s‚ÇÅ ‚à∑ œÑ -> s‚ÇÅ ‚áù s‚ÇÇ -> œÄ‚ÇÅ , œÄ‚ÇÇ ‚ä¢À¢ s‚ÇÇ ‚à∑ œÑ
ty-preservation (EStack wtc) (App‚ÇÅ x‚ÇÅ) = {!!} -- App x‚ÇÅ {!!} {!x!}
ty-preservation (EStack x) (Var‚ÇÅ x‚ÇÅ x‚ÇÇ) = {!!}
ty-preservation (EStack x) (Var‚ÇÅ' x‚ÇÅ x‚ÇÇ) = {!!}
ty-preservation (EStack x) If = {!!}
ty-preservation (EStack x) Return = {!!}
ty-preservation (EStack x) Bind‚ÇÅ = {!!}
ty-preservation (EStack x) (Label' p) = {!!}
ty-preservation (EStack x) (Unlabel‚ÇÅ p) = {!!}
ty-preservation (EStack x) UnId‚ÇÅ = UnId (EStack x)
ty-preservation (EStack (WTC wtŒì u (fork wt-t))) (Fork p) = EStack (WTC wtŒì u (Return ÔºàÔºâ))
ty-preservation (EStack x) Hole = EStack x
ty-preservation (EStack x) (DeepDup x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ) = {!!}
ty-preservation (If x) step = {!!}
ty-preservation (Bind x) step = {!!}
ty-preservation (Unlabel p x) step = {!!}
ty-preservation (UnId x) step = {!!}
ty-preservation (App x x‚ÇÅ x‚ÇÇ) step = {!!}
ty-preservation (Var x x‚ÇÅ x‚ÇÇ) step = {!!}
