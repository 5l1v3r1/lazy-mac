open import Lattice

module Sequential.Semantics {- (­ЮЊЏ : Lattice) -} where

open import Types
open import Sequential.Calculus
open import Data.Maybe
open import Data.Product
open import Data.Map
open import Relation.Binary.PropositionalEquality hiding ([_] ; subst)

--------------------------------------------------------------------------------
-- DeepDup helper functions and data types

open import Data.Bool using (not)
open import Data.List using (filter)
open import Relation.Nullary.Decidable using (Рїі_РїІ)

-- Unguarded free variables
-- It should be a set, but there is no simple standard implementation of sets,
-- therefore I will start with a simple list and see where this takes us.
ufv : Term -> List РёЋ
ufv №╝ѕ№╝Ѕ = []
ufv True = []
ufv False = []
ufv (Id t) = ufv t
ufv (unId t) = ufv t
ufv (Var x) = x Рѕи []
ufv (Abs n t) = filter (╬╗ m Рєњ not Рїі n РЅЪ m РїІ) (ufv t)
ufv (App t tРѓЂ) = ufv t ++ ufv tРѓЂ
ufv (If t Then tРѓЂ Else tРѓѓ) = ufv t ++ ufv tРѓЂ ++ ufv tРѓѓ
ufv (Return l t) = ufv t
ufv (Bind l t tРѓЂ) = ufv t ++ ufv tРѓЂ
ufv (Mac l t) = ufv t
ufv (Res l t) = ufv t
ufv (label lРіЉh t) = ufv t
ufv (labelРѕЎ lРіЉh t) = ufv t
ufv (unlabel lРіЉh t) = ufv t
ufv (fork lРіЉh t) = ufv t
ufv (deepDup x) = [] -- Unguarded
ufv РѕЎ = []

-- Unguareded Free Variables (we might need this as a data type)
data UFV : Term -> List РёЋ -> Set where
-- ...

-- DeepDupHeap l ╬Њ ns ns' ╬Њ' corresponds to ╬Њ' = ╬Њ[ n' Рєд deepDup n | (n , n') <- zip ns ns']
data DeepDupHeap (l : Label) : Heap -> List РёЋ -> List РёЋ -> Heap -> Set where
  done : Рѕђ {╬Њ} -> DeepDupHeap l ╬Њ [] [] ╬Њ
  addNext : Рѕђ {╬ЊРѓЂ ╬ЊРѓѓ ╬ЊРѓЃ n n' ns ns'} -> ╬ЊРѓѓ РЅћр┤г ╬ЊРѓЂ [ n' Рєд (l , deepDup n) ]
                                     -> DeepDupHeap l ╬ЊРѓѓ ns ns' ╬ЊРѓЃ
                                     -> DeepDupHeap l ╬ЊРѓЂ (n Рѕи ns) (n' Рѕи ns') ╬ЊРѓЃ

-- Syntatic Sugar for DeepDupHeap
_РЅћр┤░_[_Рєд_] : Heap -> Heap -> List РёЋ -> Label ├Ќ List РёЋ -> Set
╬Њ' РЅћр┤░ ╬Њ [ ns' Рєд (l , ns) ] = DeepDupHeap l ╬Њ ns ns' ╬Њ'

--------------------------------------------------------------------------------

-- Operational Semantics
-- Here since we use the Substs proof we implicitly rule out name clashes in substitutions.
-- Terms that do not comply with this assumption are not reducible according to this semantics,
-- however they could be after ╬▒-conversion (we simply don't want to deal with that,
-- and assume they have already been ╬▒-converted).
-- Note that stuck terms will be dealt with in the concurrent semantics.
data _РЄЮ_ {l : Label} : State l -> State l -> Set where

 AppРѓЂ : Рѕђ {╬Њ ╬Њ' S tРѓЂ tРѓѓ n} -> ╬Њ' РЅћр┤г ╬Њ [ n Рєд (l , tРѓѓ) ]
                           -> РЪе ╬Њ , App tРѓЂ tРѓѓ , S РЪЕ РЄЮ РЪе ╬Њ' , tРѓЂ , Var n Рѕи S РЪЕ

 AppРѓѓ : Рѕђ {╬Њ n m t t' S} -> Subst m (Var n) t t' -> РЪе ╬Њ , Abs m t , Var n Рѕи S РЪЕ РЄЮ РЪе ╬Њ , t' , S РЪЕ
 
 VarРѓЂ : Рѕђ {╬Њ ╬Њ' n t S l'} -> ┬г (Value t)
                          -> ╬Њ РЅћр┤┐ ╬Њ' [ n Рєд (l' , t) ]
                          -> РЪе ╬Њ' , Var n , S РЪЕ РЄЮ РЪе ╬Њ , t , (# l n) Рѕи S РЪЕ

 VarРѓЂ' : Рѕђ {╬Њ n v S l'} -> Value v
                           -> n Рєд (l' , v) Рѕѕ ╬Њ
                           -> РЪе ╬Њ , Var n , S РЪЕ РЄЮ РЪе ╬Њ , v , S РЪЕ

 VarРѓѓ : Рѕђ {╬Њ ╬Њ' n v S} -> ╬Њ' РЅћр┤Й ╬Њ [ n Рєд (l , v) ]
                       -> Value v
                       -> РЪе ╬Њ , v , (# l n) Рѕи S РЪЕ РЄЮ РЪе ╬Њ' , v , S РЪЕ

 If : Рѕђ {╬Њ tРѓЂ tРѓѓ tРѓЃ S} -> РЪе ╬Њ , (If tРѓЂ Then tРѓѓ Else tРѓЃ) , S РЪЕ РЄЮ РЪе ╬Њ , tРѓЂ , (Then tРѓѓ Else tРѓЃ) Рѕи S РЪЕ
 IfTrue : Рѕђ {╬Њ tРѓѓ tРѓЃ S} -> РЪе ╬Њ , True , (Then tРѓѓ Else tРѓЃ) Рѕи S РЪЕ РЄЮ РЪе ╬Њ , tРѓѓ , S РЪЕ
 IfFalse : Рѕђ {╬Њ tРѓѓ tРѓЃ S} -> РЪе ╬Њ , False , (Then tРѓѓ Else tРѓЃ) Рѕи S РЪЕ РЄЮ РЪе ╬Њ , tРѓЃ , S РЪЕ

 Return : Рѕђ {╬Њ t S} -> РЪе ╬Њ , Return l t , S РЪЕ РЄЮ РЪе ╬Њ , Mac l t , S РЪЕ
 BindРѓЂ : Рѕђ {╬Њ tРѓЂ tРѓѓ S} -> РЪе ╬Њ , Bind l tРѓЂ tРѓѓ , S РЪЕ РЄЮ РЪе ╬Њ , tРѓЂ , (Bind l tРѓѓ Рѕи S ) РЪЕ
 BindРѓѓ : Рѕђ {╬Њ tРѓЂ tРѓѓ S} -> РЪе ╬Њ , Mac l tРѓЂ , Bind l tРѓѓ Рѕи S РЪЕ РЄЮ РЪе ╬Њ , App tРѓѓ tРѓЂ , S  РЪЕ

 Label' : Рѕђ {╬Њ t S h} -> (p : l РіЉ h) -> РЪе ╬Њ , label p t , S РЪЕ РЄЮ РЪе ╬Њ , (Return l (Res h (Id t))) , S РЪЕ

 UnlabelРѓЂ : Рѕђ {╬Њ t S l'} -> (p : l' РіЉ l) -> РЪе ╬Њ , unlabel p t , S РЪЕ РЄЮ РЪе ╬Њ , t , unlabel p Рѕи S РЪЕ
 UnlabelРѓѓ : Рѕђ {╬Њ t S l'} -> (p : l' РіЉ l) -> РЪе ╬Њ , Res l' t , unlabel p Рѕи S РЪЕ РЄЮ РЪе ╬Њ , Return l (unId t) , S РЪЕ

 UnIdРѓЂ : Рѕђ {╬Њ t S} -> РЪе ╬Њ , unId t , S РЪЕ РЄЮ РЪе ╬Њ , t , unId Рѕи S РЪЕ 
 UnIdРѓѓ : Рѕђ {╬Њ t S} -> РЪе ╬Њ , Id t , unId Рѕи S РЪЕ РЄЮ РЪе ╬Њ , t , S РЪЕ 

 Fork : Рѕђ {╬Њ t S h} -> (p : l РіЉ h) -> РЪе ╬Њ , (fork p t) , S РЪЕ РЄЮ РЪе ╬Њ , Return l №╝ѕ№╝Ѕ , S РЪЕ 

 Hole : Рѕђ {╬Њ S} -> РЪе ╬Њ , РѕЎ , S РЪЕ РЄЮ РЪе ╬Њ , РѕЎ , S РЪЕ

 DeepDup : Рѕђ {╬ЊРѓЂ ╬ЊРѓѓ ╬ЊРѓЃ n n' ns' S l' t t'} -> n Рєд (l' , t) Рѕѕ ╬ЊРѓЂ
                                -> Substs t (ufv t) ns' t'
                                -> ╬ЊРѓѓ РЅћр┤░ ╬ЊРѓЂ [ ns' Рєд (l , ufv t) ]
                                -> ╬ЊРѓЃ РЅћр┤г ╬ЊРѓѓ [ n' Рєд (l , t') ]
                                -> РЪе ╬ЊРѓЂ , (deepDup n) , S РЪЕ РЄЮ РЪе ╬ЊРѓЃ , Var n' , S РЪЕ


add-wt : Рѕђ {¤ђРѓЂ ¤ђРѓѓ ¤ђРѓЃ ╬ЊРѓЂ ╬ЊРѓѓ n l t ¤ё}
         -> ¤ђРѓЂ Рібр┤┤ ╬ЊРѓЂ Рѕи ¤ђРѓѓ -> ╬ЊРѓѓ РЅћр┤г ╬ЊРѓЂ [ n Рєд l , t ]
         -> ¤ђРѓЃ РЅћр┤╣ ¤ђРѓЂ Ріћ ¤ђРѓѓ -> ¤ђРѓЃ Ріб t Рѕи ¤ё
         -> РѕЃ (╬╗ ¤ђРѓЃ' -> ¤ђРѓЃ' РЅћр┤╣ ¤ђРѓЂ Ріћ {!!} ├Ќ ¤ђРѓЂ Рібр┤┤ ╬ЊРѓѓ Рѕи ¤ђРѓЃ')
add-wt = {!!}

-- wken-

-- 1) Define Ріѓ for mapping
-- 2) Define wken for Heap, Stack and Terms
-- 3)

--wt-subst : Subst n' (Var n) t tРѓѓ -> 

wt-lookup : Рѕђ {n l t ╬Њ ¤ё ¤ђРѓЂ ¤ђРѓѓ ¤ђРѓЃ} -> ¤ђРѓЂ Рібр┤┤ ╬Њ Рѕи ¤ђРѓѓ
                                   -> ¤ђРѓЃ РЅћр┤╣ ¤ђРѓЂ Ріћ ¤ђРѓѓ
                                   -> n Рєд ¤ё Рѕѕ ¤ђРѓЃ
                                   -> n Рєд (l , t) Рѕѕ ╬Њ
                                   -> ¤ђРѓЃ Ріб t Рѕи ¤ё
wt-lookup (Cons wt-╬Њ РѕЁРѓЂ wt-t a-¤ђ a-╬Њ) РѕЁРѓЂ here here = {!!}
wt-lookup (Cons wt-╬Њ РѕЁРѓѓ wt-t a-¤ђ a-╬Њ) РѕЁРѓЂ here here = {!!}
wt-lookup (Cons wt-╬Њ ¤ђРѓЂ-Ріћ-¤ђРѓѓ wt-t a-¤ђ a-╬Њ) РѕЁРѓѓ here here = {!!}
wt-lookup (Cons wt-╬Њ ¤ђРѓЂ-Ріћ-¤ђРѓѓ wt-t a-¤ђ a-╬Њ) (x Рѕи m) here here = {!!}
wt-lookup wt-╬Њ m wt-n (next nРѕѕ╬Њ) = {!!}

-- Type preservation
ty-preservation : Рѕђ {l ¤ђ ¤ё ╬ЊРѓЂ ╬ЊРѓѓ tРѓЂ tРѓѓ} {SРѓЂ SРѓѓ : Stack l} ->
                   let sРѓЂ = РЪе ╬ЊРѓЂ , tРѓЂ , SРѓЂ РЪЕ
                       sРѓѓ = РЪе ╬ЊРѓѓ , tРѓѓ , SРѓѓ РЪЕ in ¤ђ Ріб╦б sРѓЂ Рѕи ¤ё -> sРѓЂ РЄЮ sРѓѓ -> ¤ђ Ріб╦б sРѓѓ Рѕи ¤ё
ty-preservation WT[ ¤ђРѓЂ-Ріћ-¤ђРѓѓ ]РЪе wt-╬Њ , App wt-t wt-tРѓЂ , wt-S РЪЕ (AppРѓЂ x) = WT[ {!!} ]РЪе {!!} , wt-t , (Var {!!} Рѕи wt-S) РЪЕ
ty-preservation WT[ ¤ђРѓЂ-Ріћ-¤ђРѓѓ ]РЪе wt-╬Њ , Abs x wt-t , Var wt-n Рѕи wt-S РЪЕ (AppРѓѓ xРѓЂ) = WT[ ¤ђРѓЂ-Ріћ-¤ђРѓѓ ]РЪе wt-╬Њ , {!!} , wt-S РЪЕ
ty-preservation WT[ ¤ђРѓЂ-Ріћ-¤ђРѓѓ ]РЪе wt-╬Њ , Var x , wt-S РЪЕ (VarРѓЂ xРѓЂ xРѓѓ) = WT[ {!!} ]РЪе {!!} , {!!} , (# _ _ Рѕи wt-S) РЪЕ
ty-preservation WT[ ¤ђРѓЂ-Ріћ-¤ђРѓѓ ]РЪе wt-╬Њ , Var x , wt-S РЪЕ (VarРѓЂ' xРѓЂ xРѓѓ) = WT[ ¤ђРѓЂ-Ріћ-¤ђРѓѓ ]РЪе wt-╬Њ , wt-lookup wt-╬Њ ¤ђРѓЂ-Ріћ-¤ђРѓѓ x xРѓѓ , wt-S РЪЕ
ty-preservation wt (VarРѓѓ x xРѓЂ) = {!!}
ty-preservation WT[ ¤ђРѓЂ-Ріћ-¤ђРѓѓ ]РЪе wt-╬Њ , If wt-t Then wt-tРѓЂ Else wt-tРѓѓ , wt-S РЪЕ If = WT[ ¤ђРѓЂ-Ріћ-¤ђРѓѓ ]РЪе wt-╬Њ , wt-t , (Then wt-tРѓЂ Else wt-tРѓѓ) Рѕи wt-S РЪЕ
ty-preservation WT[ ¤ђРѓЂ-Ріћ-¤ђРѓѓ ]РЪе wt-╬Њ , True , (Then wt-tРѓѓ Else wt-tРѓЃ) Рѕи wt-S РЪЕ IfTrue = WT[ ¤ђРѓЂ-Ріћ-¤ђРѓѓ ]РЪе wt-╬Њ , wt-tРѓѓ , wt-S РЪЕ
ty-preservation WT[ ¤ђРѓЂ-Ріћ-¤ђРѓѓ ]РЪе wt-╬Њ , False , (Then wt-tРѓѓ Else wt-tРѓЃ) Рѕи wt-S РЪЕ IfFalse = WT[ ¤ђРѓЂ-Ріћ-¤ђРѓѓ ]РЪе wt-╬Њ , wt-tРѓЃ , wt-S РЪЕ
ty-preservation WT[ ¤ђРѓЂ-Ріћ-¤ђРѓѓ ]РЪе wt-╬Њ , Return wt-t , wt-S РЪЕ Return = WT[ ¤ђРѓЂ-Ріћ-¤ђРѓѓ ]РЪе wt-╬Њ , Mac wt-t , wt-S РЪЕ
ty-preservation WT[ ¤ђРѓЂ-Ріћ-¤ђРѓѓ ]РЪе wt-╬Њ , Bind wt-t wt-tРѓЂ , wt-S РЪЕ BindРѓЂ = WT[ ¤ђРѓЂ-Ріћ-¤ђРѓѓ ]РЪе wt-╬Њ , wt-t , Bind wt-tРѓЂ Рѕи wt-S РЪЕ
ty-preservation WT[ ¤ђРѓЂ-Ріћ-¤ђРѓѓ ]РЪе wt-╬Њ , Mac wt-t , Bind wt-tРѓѓ Рѕи wt-S РЪЕ BindРѓѓ = WT[ ¤ђРѓЂ-Ріћ-¤ђРѓѓ ]РЪе wt-╬Њ , App wt-tРѓѓ wt-t , wt-S РЪЕ
ty-preservation WT[ ¤ђРѓЂ-Ріћ-¤ђРѓѓ ]РЪе wt-╬Њ , label wt-t , wt-S РЪЕ (Label' p) = WT[ ¤ђРѓЂ-Ріћ-¤ђРѓѓ ]РЪе wt-╬Њ , Return (Res (Id wt-t)) , wt-S РЪЕ
ty-preservation WT[ ¤ђРѓЂ-Ріћ-¤ђРѓѓ ]РЪе wt-╬Њ , unlabel wt-t , wt-S РЪЕ (UnlabelРѓЂ p) = WT[ ¤ђРѓЂ-Ріћ-¤ђРѓѓ ]РЪе wt-╬Њ , wt-t , unlabel p Рѕи wt-S РЪЕ
ty-preservation WT[ ¤ђРѓЂ-Ріћ-¤ђРѓѓ ]РЪе wt-╬Њ , Res wt-t , unlabel p Рѕи wt-S РЪЕ (UnlabelРѓѓ .p) = WT[ ¤ђРѓЂ-Ріћ-¤ђРѓѓ ]РЪе wt-╬Њ , Return (unId wt-t) , wt-S РЪЕ
ty-preservation WT[ ¤ђРѓЂ-Ріћ-¤ђРѓѓ ]РЪе wt-╬Њ , unId wt-t , wt-S РЪЕ UnIdРѓЂ = WT[ ¤ђРѓЂ-Ріћ-¤ђРѓѓ ]РЪе wt-╬Њ , wt-t , unId Рѕи wt-S РЪЕ
ty-preservation WT[ ¤ђРѓЂ-Ріћ-¤ђРѓѓ ]РЪе wt-╬Њ , Id wt-t , unId Рѕи wt-S РЪЕ UnIdРѓѓ = WT[ ¤ђРѓЂ-Ріћ-¤ђРѓѓ ]РЪе wt-╬Њ , wt-t , wt-S РЪЕ
ty-preservation WT[ ¤ђРѓЂ-Ріћ-¤ђРѓѓ ]РЪе wt-╬Њ , fork wt-t , wt-S РЪЕ (Fork p) = WT[ ¤ђРѓЂ-Ріћ-¤ђРѓѓ ]РЪе wt-╬Њ , Return №╝ѕ№╝Ѕ , wt-S РЪЕ
ty-preservation WT[ ¤ђРѓЂ-Ріћ-¤ђРѓѓ ]РЪе wt-╬Њ , РѕЎ , wt-S РЪЕ Hole = WT[ ¤ђРѓЂ-Ріћ-¤ђРѓѓ ]РЪе wt-╬Њ , РѕЎ , wt-S РЪЕ
ty-preservation WT[ ¤ђРѓЂ-Ріћ-¤ђРѓѓ ]РЪе wt-╬Њ , deepDup x , wt-S РЪЕ (DeepDup xРѓЂ xРѓѓ xРѓЃ xРѓё) = {!!}
