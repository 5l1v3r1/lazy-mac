open import Lattice

module Sequential.Semantics {- (ùìõ : Lattice) -} where

open import Types
open import Sequential.Calculus
open import Data.Maybe
open import Data.Product
open import Relation.Binary.PropositionalEquality hiding ([_] ; subst)

--------------------------------------------------------------------------------
-- DeepDup helper functions and data types

open import Data.Bool using (not)
open import Data.List using (filter)
open import Relation.Nullary.Decidable using (‚åä_‚åã)

-- Unguarded free variables
-- It should be a set, but there is no simple standard implementation of sets,
-- therefore I will start with a simple list and see where this takes us.
ufv : Term -> List Variable
ufv ÔºàÔºâ = []
ufv True = []
ufv False = []
ufv (Id t) = ufv t
ufv (unId t) = ufv t
ufv (Var x) = x ‚à∑ []
ufv (Abs n t) = filter (Œª m ‚Üí not ‚åä n ‚âü‚±Ω m ‚åã) (ufv t)
ufv (App t t‚ÇÅ) = ufv t ++ ufv t‚ÇÅ
ufv (If t Then t‚ÇÅ Else t‚ÇÇ) = ufv t ++ ufv t‚ÇÅ ++ ufv t‚ÇÇ
ufv (Return l t) = ufv t
ufv (Bind l t t‚ÇÅ) = ufv t ++ ufv t‚ÇÅ
ufv (Mac l t) = ufv t
ufv (Res l t) = ufv t
ufv (label l‚äëh t) = ufv t
ufv (label‚àô l‚äëh t) = ufv t
ufv (unlabel l‚äëh t) = ufv t
ufv (fork l‚äëh t) = ufv t
ufv (deepDup x) = [] -- Unguarded
ufv ‚àô = []

-- Unguareded Free Variables (we might need this as a data type)
data UFV : Term -> List ‚Ñï -> Set where
-- ...

-- DeepDupHeap l Œì ns ns' Œì' corresponds to Œì' = Œì[ n' ‚Ü¶ deepDup n | (n , n') <- zip ns ns']
-- data DeepDupHeap (l : Label) : Heap -> List ‚Ñï -> List ‚Ñï -> Heap -> Set where
--   done : ‚àÄ {Œì} -> DeepDupHeap l Œì [] [] Œì
--   addNext : ‚àÄ {Œì‚ÇÅ Œì‚ÇÇ Œì‚ÇÉ n n' ns ns'} -> Œì‚ÇÇ ‚âî·¥¨ Œì‚ÇÅ [ n' ‚Ü¶ (l , deepDup n) ]
--                                      -> DeepDupHeap l Œì‚ÇÇ ns ns' Œì‚ÇÉ
--                                      -> DeepDupHeap l Œì‚ÇÅ (n ‚à∑ ns) (n' ‚à∑ ns') Œì‚ÇÉ

-- Syntatic Sugar for DeepDupHeap
-- _‚âî·¥∞_[_‚Ü¶_] : Heap -> Heap -> List ‚Ñï -> Label √ó List ‚Ñï -> Set
-- Œì' ‚âî·¥∞ Œì [ ns' ‚Ü¶ (l , ns) ] = DeepDupHeap l Œì ns ns' Œì'

--------------------------------------------------------------------------------

-- Operational Semantics
-- Here since we use the Substs proof we implicitly rule out name clashes in substitutions.
-- Terms that do not comply with this assumption are not reducible according to this semantics,
-- however they could be after Œ±-conversion (we simply don't want to deal with that,
-- and assume they have already been Œ±-converted).
-- Note that stuck terms will be dealt with in the concurrent semantics.
data _‚áù_ {l : Label} : State l -> State l -> Set where

 App‚ÇÅ : ‚àÄ {Œì S t‚ÇÅ t‚ÇÇ n} -> fresh (l , n) Œì ->
                         ‚ü® Œì , App t‚ÇÅ t‚ÇÇ , S ‚ü© ‚áù ‚ü® Œì [ l , n ‚Ü¶ just t‚ÇÇ ] , t‚ÇÅ , Var (l , n ) ‚à∑ S ‚ü©

 App‚ÇÇ : ‚àÄ {Œì n m t t' S} -> Subst m (Var n) t t' -> ‚ü® Œì , Abs m t , Var n ‚à∑ S ‚ü© ‚áù ‚ü® Œì , t' , S ‚ü©
 
 Var‚ÇÅ : ‚àÄ {Œì x t S} -> (x‚ààŒì : x ‚Ü¶ just t ‚àà Œì)
                    -> (¬¨val : ¬¨ (Value t))
                    -> ‚ü® Œì , Var x , S ‚ü© ‚áù ‚ü® Œì [ x ‚Ü¶ nothing ] , t , # x ‚à∑ S ‚ü© 

 Var‚ÇÅ' : ‚àÄ {Œì x v S} -> (val : Value v)
                     -> (x‚ààŒì : x ‚Ü¶ just v ‚àà Œì)
                     -> ‚ü® Œì , Var x , S ‚ü© ‚áù ‚ü® Œì , v , S ‚ü©

 Var‚ÇÇ : ‚àÄ {Œì x v S} -> (val : Value v) -> ‚ü® Œì , v , # x ‚à∑ S ‚ü© ‚áù ‚ü® Œì [ x ‚Ü¶ nothing ] , v , S ‚ü©

 If : ‚àÄ {Œì t‚ÇÅ t‚ÇÇ t‚ÇÉ S} -> ‚ü® Œì , (If t‚ÇÅ Then t‚ÇÇ Else t‚ÇÉ) , S ‚ü© ‚áù ‚ü® Œì , t‚ÇÅ , (Then t‚ÇÇ Else t‚ÇÉ) ‚à∑ S ‚ü©
 IfTrue : ‚àÄ {Œì t‚ÇÇ t‚ÇÉ S} -> ‚ü® Œì , True , (Then t‚ÇÇ Else t‚ÇÉ) ‚à∑ S ‚ü© ‚áù ‚ü® Œì , t‚ÇÇ , S ‚ü©
 IfFalse : ‚àÄ {Œì t‚ÇÇ t‚ÇÉ S} -> ‚ü® Œì , False , (Then t‚ÇÇ Else t‚ÇÉ) ‚à∑ S ‚ü© ‚áù ‚ü® Œì , t‚ÇÉ , S ‚ü©

 Return : ‚àÄ {Œì t S} -> ‚ü® Œì , Return l t , S ‚ü© ‚áù ‚ü® Œì , Mac l t , S ‚ü©
 Bind‚ÇÅ : ‚àÄ {Œì t‚ÇÅ t‚ÇÇ S} -> ‚ü® Œì , Bind l t‚ÇÅ t‚ÇÇ , S ‚ü© ‚áù ‚ü® Œì , t‚ÇÅ , (Bind l t‚ÇÇ ‚à∑ S ) ‚ü©
 Bind‚ÇÇ : ‚àÄ {Œì t‚ÇÅ t‚ÇÇ S} -> ‚ü® Œì , Mac l t‚ÇÅ , Bind l t‚ÇÇ ‚à∑ S ‚ü© ‚áù ‚ü® Œì , App t‚ÇÇ t‚ÇÅ , S  ‚ü©

 Label' : ‚àÄ {Œì t S h} -> (p : l ‚äë h) -> ‚ü® Œì , label p t , S ‚ü© ‚áù ‚ü® Œì , (Return l (Res h (Id t))) , S ‚ü©

 Unlabel‚ÇÅ : ‚àÄ {Œì t S l'} -> (p : l' ‚äë l) -> ‚ü® Œì , unlabel p t , S ‚ü© ‚áù ‚ü® Œì , t , unlabel p ‚à∑ S ‚ü©
 Unlabel‚ÇÇ : ‚àÄ {Œì t S l'} -> (p : l' ‚äë l) -> ‚ü® Œì , Res l' t , unlabel p ‚à∑ S ‚ü© ‚áù ‚ü® Œì , Return l (unId t) , S ‚ü©

 UnId‚ÇÅ : ‚àÄ {Œì t S} -> ‚ü® Œì , unId t , S ‚ü© ‚áù ‚ü® Œì , t , unId ‚à∑ S ‚ü© 
 UnId‚ÇÇ : ‚àÄ {Œì t S} -> ‚ü® Œì , Id t , unId ‚à∑ S ‚ü© ‚áù ‚ü® Œì , t , S ‚ü© 

 Fork : ‚àÄ {Œì t S h} -> (p : l ‚äë h) -> ‚ü® Œì , (fork p t) , S ‚ü© ‚áù ‚ü® Œì , Return l ÔºàÔºâ , S ‚ü© 

 Hole : ‚àÄ {Œì S} -> ‚ü® Œì , ‚àô , S ‚ü© ‚áù ‚ü® Œì , ‚àô , S ‚ü©

 -- DeepDup : ‚àÄ {Œì‚ÇÅ Œì‚ÇÇ Œì‚ÇÉ n n' ns' S l' t t'} -> ? -- n ‚Ü¶ (l' , t) ‚àà Œì‚ÇÅ
 --                                -> Substs t (ufv t) ns' t'
 --                                -> ?Œì‚ÇÇ ‚âî·¥∞ Œì‚ÇÅ [ ns' ‚Ü¶ (l , ufv t) ]
 --                                -> Œì‚ÇÉ ‚âî·¥¨ Œì‚ÇÇ [ n' ‚Ü¶ (l , t') ]
 --                                -> ‚ü® Œì‚ÇÅ , (deepDup n) , S ‚ü© ‚áù ‚ü® Œì‚ÇÉ , Var n' , S ‚ü©


wken : ‚àÄ {œÄ t x œÑ‚ÇÅ œÑ‚ÇÇ Œì} -> ‚ä¢·¥¥ Œì ‚à∑ œÄ -> œÄ ‚ä¢ t ‚à∑ œÑ‚ÇÅ -> fresh x Œì -> œÄ [ x ‚Ü¶ œÑ‚ÇÇ ]·∂ú ‚ä¢ t ‚à∑ œÑ‚ÇÅ 
wken Œì-œÄ ÔºàÔºâ fx = ÔºàÔºâ
wken Œì-œÄ True fx = True
wken Œì-œÄ False fx = False
wken Œì-œÄ (If wt-t Then wt-t‚ÇÅ Else wt-t‚ÇÇ) fx = If (wken Œì-œÄ wt-t fx) Then (wken Œì-œÄ wt-t‚ÇÅ fx) Else (wken Œì-œÄ wt-t‚ÇÇ fx)
wken Œì-œÄ (Id wt-t) fx = {!!}
wken Œì-œÄ (unId wt-t) fx = {!!}
wken {x = x} {Œì = Œì} (just x‚ààŒì t-œÑ) (Var p) fx with Œì x
wken (just {lbl , num} x‚ààŒì t-œÑ) (Var {._} {lbl‚ÇÅ , num‚ÇÅ} p) () | just x
wken (just {lbl , num} x‚ààŒì t-œÑ) (Var {._} {lbl‚ÇÅ , num‚ÇÅ} p) fx | nothing = Var {!p!}
wken Œì-œÄ (Abs wt-t) fx = {!!}
wken Œì-œÄ (App wt-t wt-t‚ÇÅ) fx = {!!}
wken Œì-œÄ (Mac wt-t) fx = {!!}
wken Œì-œÄ (Return wt-t) fx = {!!}
wken Œì-œÄ (Bind wt-t wt-t‚ÇÅ) fx = {!!}
wken Œì-œÄ (Res wt-t) fx = {!!}
wken Œì-œÄ (label wt-t) fx = {!!}
wken Œì-œÄ (label‚àô wt-t) fx = {!!}
wken Œì-œÄ (unlabel wt-t) fx = {!!}
wken Œì-œÄ (fork wt-t) fx = {!!}
wken Œì-œÄ (deepDup x) fx = {!!}
wken Œì-œÄ ‚àô fx = {!!}

-- Type preservation
ty-preservation : ‚àÄ {l œÑ Œì‚ÇÅ Œì‚ÇÇ t‚ÇÅ t‚ÇÇ} {S‚ÇÅ S‚ÇÇ : Stack l} ->
                   let s‚ÇÅ = ‚ü® Œì‚ÇÅ , t‚ÇÅ , S‚ÇÅ ‚ü©
                       s‚ÇÇ = ‚ü® Œì‚ÇÇ , t‚ÇÇ , S‚ÇÇ ‚ü© in ‚ä¢À¢ s‚ÇÅ ‚à∑ œÑ -> s‚ÇÅ ‚áù s‚ÇÇ -> ‚ä¢À¢ s‚ÇÇ ‚à∑ œÑ
ty-preservation ‚ü® just x‚ààŒì t-œÑ , App t‚ÇÇ t‚ÇÑ , S ‚ü© (App‚ÇÅ p) = ‚ü® just {!x‚ààŒì!} {!!} , {!!} , (Var {!!} ‚à∑ S) ‚ü©
ty-preservation s (App‚ÇÇ x) = {!!}
ty-preservation s (Var‚ÇÅ x‚ààŒì ¬¨val) = {!!}
ty-preservation s (Var‚ÇÅ' val x‚ààŒì) = {!!}
ty-preservation s (Var‚ÇÇ val) = {!!}
ty-preservation ‚ü® x , If x‚ÇÇ Then x‚ÇÉ Else x‚ÇÑ , x‚ÇÅ ‚ü© If = ‚ü® x , x‚ÇÇ , (Then x‚ÇÉ Else x‚ÇÑ) ‚à∑ x‚ÇÅ ‚ü©
ty-preservation ‚ü® x , True , (Then wt-t‚ÇÇ Else wt-t‚ÇÉ) ‚à∑ x‚ÇÇ ‚ü© IfTrue = ‚ü® x , wt-t‚ÇÇ , x‚ÇÇ ‚ü©
ty-preservation ‚ü® x , False , (Then wt-t‚ÇÇ Else wt-t‚ÇÉ) ‚à∑ x‚ÇÇ ‚ü© IfFalse = ‚ü® x , wt-t‚ÇÉ , x‚ÇÇ ‚ü©
ty-preservation ‚ü® x , Return x‚ÇÇ , x‚ÇÅ ‚ü© Return = ‚ü® x , Mac x‚ÇÇ , x‚ÇÅ ‚ü©
ty-preservation ‚ü® x , Bind x‚ÇÇ x‚ÇÉ , x‚ÇÅ ‚ü© Bind‚ÇÅ = ‚ü® x , x‚ÇÇ , Bind x‚ÇÉ ‚à∑ x‚ÇÅ ‚ü©
ty-preservation ‚ü® x , Mac x‚ÇÅ , Bind wt-t‚ÇÇ ‚à∑ x‚ÇÇ ‚ü© Bind‚ÇÇ = ‚ü® x , App wt-t‚ÇÇ x‚ÇÅ , x‚ÇÇ ‚ü©
ty-preservation ‚ü® x , label x‚ÇÇ , x‚ÇÅ ‚ü© (Label' p) = ‚ü® x , Return (Res (Id x‚ÇÇ)) , x‚ÇÅ ‚ü©
ty-preservation ‚ü® x , unlabel x‚ÇÇ , x‚ÇÅ ‚ü© (Unlabel‚ÇÅ p) = ‚ü® x , x‚ÇÇ , unlabel p ‚à∑ x‚ÇÅ ‚ü©
ty-preservation ‚ü® x , Res x‚ÇÅ , unlabel p ‚à∑ x‚ÇÇ ‚ü© (Unlabel‚ÇÇ .p) = ‚ü® x , Return (unId x‚ÇÅ) , x‚ÇÇ ‚ü©
ty-preservation ‚ü® x , unId x‚ÇÅ , x‚ÇÇ ‚ü© UnId‚ÇÅ = ‚ü® x , x‚ÇÅ , unId ‚à∑ x‚ÇÇ ‚ü©
ty-preservation ‚ü® x , Id x‚ÇÅ , unId ‚à∑ x‚ÇÇ ‚ü© UnId‚ÇÇ = ‚ü® x , x‚ÇÅ , x‚ÇÇ ‚ü©
ty-preservation ‚ü® x , fork x‚ÇÇ , x‚ÇÅ ‚ü© (Fork p) = ‚ü® x , Return ÔºàÔºâ , x‚ÇÅ ‚ü©
ty-preservation ‚ü® x , ‚àô , x‚ÇÇ ‚ü© Hole = ‚ü® x , ‚àô , x‚ÇÇ ‚ü©
