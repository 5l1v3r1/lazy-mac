import Lattice as L

-- A is the security level of the attacker
module Sequential.Security.Simulation (ùìõ : L.Lattice) (A : L.Label ùìõ) where

open import Types ùìõ
open import Sequential.Calculus ùìõ
open import Sequential.Semantics ùìõ
open import Sequential.Security.Erasure ùìõ A

open import Data.Sum
open import Relation.Binary.PropositionalEquality hiding (subst ; [_])
open import Relation.Nullary
open import Data.Empty

-- Simulation Property
Œµ-sim : ‚àÄ {l œÑ} {s‚ÇÅ s‚ÇÇ : State l œÑ} (x : Dec (l ‚äë A)) -> s‚ÇÅ ‚áù s‚ÇÇ -> Œµ x s‚ÇÅ ‚áù Œµ x s‚ÇÇ
-- High-Computations
Œµ-sim (no x) s = Hole‚ÇÅ
-- Low-Computations
Œµ-sim (yes y) App‚ÇÅ = App‚ÇÅ
Œµ-sim (yes y) (App‚ÇÇ Œ±‚ààœÄ) = App‚ÇÇ Œ±‚ààœÄ
Œµ-sim (yes y) (Var‚ÇÅ œÑ‚ààœÄ t‚ààŒî ¬¨val r·¥±) = Var‚ÇÅ œÑ‚ààœÄ (member·¥± œÑ‚ààœÄ t‚ààŒî) (Œµ·µÄ¬¨Val ¬¨val) (update·¥± r·¥±)
Œµ-sim (yes y) (Var‚ÇÅ' œÑ‚ààœÄ v‚ààŒî val) = Var‚ÇÅ' œÑ‚ààœÄ (member·¥± œÑ‚ààœÄ v‚ààŒî) (Œµ·µÄ-Val val)
Œµ-sim (yes y) (Var‚ÇÇ œÑ‚ààœÄ val u·¥±) = Var‚ÇÇ œÑ‚ààœÄ (Œµ·µÄ-Val val) (update·¥± u·¥±)
Œµ-sim (yes y) If = If
Œµ-sim (yes y) IfTrue = IfTrue
Œµ-sim (yes y) IfFalse = IfFalse
Œµ-sim (yes y) Return = Return
Œµ-sim (yes y) Bind‚ÇÅ = Bind‚ÇÅ
Œµ-sim (yes y) Bind‚ÇÇ = Bind‚ÇÇ
Œµ-sim (yes y) (Label' {h = H} p) with H ‚äë? A
Œµ-sim (yes y) (Label' p‚ÇÅ) | yes p = Label' p‚ÇÅ
Œµ-sim (yes y) (Label' p) | no ¬¨p = Label'‚àô p
Œµ-sim (yes y) (Label'‚àô {h = H} p) with H ‚äë? A
Œµ-sim (yes y) (Label'‚àô p‚ÇÅ) | yes p = Label'‚àô p‚ÇÅ
Œµ-sim (yes y) (Label'‚àô p) | no ¬¨p = Label'‚àô p
Œµ-sim (yes y) (Unlabel‚ÇÅ p) = Unlabel‚ÇÅ p
Œµ-sim (yes y) (Unlabel‚ÇÇ {l' = L} p) with L ‚äë? A
Œµ-sim (yes y) (Unlabel‚ÇÇ p‚ÇÅ) | yes p = Unlabel‚ÇÇ p‚ÇÅ
Œµ-sim (yes y) (Unlabel‚ÇÇ p) | no ¬¨p = ‚ä•-elim (¬¨p (trans-‚äë p y))
Œµ-sim (yes y) UnId‚ÇÅ = UnId‚ÇÅ
Œµ-sim (yes y) UnId‚ÇÇ = UnId‚ÇÇ
Œµ-sim (yes y) (New‚ÇÅ {H = H} ¬¨var) with H ‚äë? A
Œµ-sim (yes y) (New‚ÇÅ ¬¨var) | yes p = New‚ÇÅ (Œµ·µÄ¬¨Var ¬¨var)
Œµ-sim (yes y) (New‚ÇÅ ¬¨var) | no ¬¨p = New‚àô‚ÇÅ (Œµ·µÄ¬¨Var ¬¨var)
Œµ-sim (yes y) (New‚àô‚ÇÅ ¬¨var) = New‚àô‚ÇÅ (Œµ·µÄ¬¨Var ¬¨var)
Œµ-sim (yes y) Read‚ÇÅ = Read‚ÇÅ
Œµ-sim (yes y) (Write‚ÇÅ {H = H}) with H ‚äë? A
Œµ-sim (yes y) Write‚ÇÅ | yes p = Write‚ÇÅ
Œµ-sim (yes y) Write‚ÇÅ | no ¬¨p = Write‚àô‚ÇÅ
Œµ-sim (yes y) Write‚àô‚ÇÅ = Write‚àô‚ÇÅ
Œµ-sim (yes y) Hole‚ÇÅ = Hole‚ÇÅ
Œµ-sim (yes y) Hole‚ÇÇ = Hole‚ÇÇ

open import Data.Product using (proj‚ÇÅ ; proj‚ÇÇ)

Œµ‚ÇÅ·¥æ-sim : ‚àÄ {l ls œÑ} {p‚ÇÅ p‚ÇÇ : Program l ls œÑ} (x : Dec (l ‚äë A)) -> p‚ÇÅ ‚üº p‚ÇÇ -> Œµ‚ÇÅ·¥æ x p‚ÇÅ ‚üº Œµ‚ÇÅ·¥æ x p‚ÇÇ
Œµ‚ÇÅ·¥æ-sim (yes p) (Pure l‚ààŒì step u·¥¥) = Pure (member·¥¥ p l‚ààŒì) (Œµ-sim (yes p) step) (update·¥¥ p u·¥¥)
Œµ‚ÇÅ·¥æ-sim (yes p) (New {H = H} H‚ààŒì u·¥¥) with H ‚äë? A
Œµ‚ÇÅ·¥æ-sim (yes p‚ÇÅ) (New H‚ààŒì u·¥¥) | yes p = New (member·¥π p H‚ààŒì) (update·¥π p u·¥¥)
Œµ‚ÇÅ·¥æ-sim (yes p) (New {M = M} {œÑ‚ààœÄ = ‚ü™ œÑ‚ààœÄ ‚ü´} {l‚äëH = l‚äëH}  H‚ààŒì u·¥¥) | no ¬¨p
  rewrite write·¥π‚àô-‚â° ¬¨p H‚ààŒì u·¥¥ = New‚àô
Œµ‚ÇÅ·¥æ-sim (yes p) (New‚àô {H = H}) with H ‚äë? A
Œµ‚ÇÅ·¥æ-sim (yes p‚ÇÅ) New‚àô | yes p = New‚àô
Œµ‚ÇÅ·¥æ-sim (yes p) New‚àô | no ¬¨p = New‚àô
Œµ‚ÇÅ·¥æ-sim (yes p) (Write‚ÇÇ {H = H} H‚ààŒì u·¥π uÀ¢) with H ‚äë? A
Œµ‚ÇÅ·¥æ-sim (yes p‚ÇÅ) (Write‚ÇÇ H‚ààŒì u·¥π uÀ¢) | yes p = Write‚ÇÇ (member·¥π p H‚ààŒì) u·¥π (update·¥π p uÀ¢)
Œµ‚ÇÅ·¥æ-sim (yes p) (Write‚ÇÇ {l‚äëH = l‚äëH} H‚ààŒì u·¥π uÀ¢) | no ¬¨p
  rewrite write·¥π‚àô-‚â° ¬¨p H‚ààŒì uÀ¢ = Write‚àô‚ÇÇ
Œµ‚ÇÅ·¥æ-sim (yes p) (Write·¥∞‚ÇÇ {H = H} H‚ààŒì u·¥π uÀ¢) with H ‚äë? A
Œµ‚ÇÅ·¥æ-sim (yes p‚ÇÅ) (Write·¥∞‚ÇÇ H‚ààŒì u·¥π uÀ¢) | yes p = Write·¥∞‚ÇÇ (member·¥π p H‚ààŒì) u·¥π (update·¥π p uÀ¢)
Œµ‚ÇÅ·¥æ-sim (yes p) (Write·¥∞‚ÇÇ {l‚äëH = l‚äëH} H‚ààŒì u·¥π uÀ¢) | no ¬¨p
  rewrite write·¥π‚àô-‚â° ¬¨p H‚ààŒì uÀ¢ = Write‚àô‚ÇÇ
Œµ‚ÇÅ·¥æ-sim (yes p) (Write‚àô‚ÇÇ {H = H}) with H ‚äë? A
Œµ‚ÇÅ·¥æ-sim (yes p‚ÇÅ) Write‚àô‚ÇÇ | yes p = Write‚àô‚ÇÇ
Œµ‚ÇÅ·¥æ-sim (yes p) Write‚àô‚ÇÇ | no ¬¨p = Write‚àô‚ÇÇ
Œµ‚ÇÅ·¥æ-sim {l} (yes p) (Read‚ÇÇ l‚ààŒì n‚ààM) with l ‚äë? A
Œµ‚ÇÅ·¥æ-sim (yes p‚ÇÅ) (Read‚ÇÇ l‚ààŒì n‚ààM) | yes p = Read‚ÇÇ (member·¥π p‚ÇÅ l‚ààŒì) n‚ààM
Œµ‚ÇÅ·¥æ-sim (yes p) (Read‚ÇÇ l‚ààŒì n‚ààM) | no ¬¨p = ‚ä•-elim (¬¨p p)
Œµ‚ÇÅ·¥æ-sim {l} (yes p') (Read·¥∞‚ÇÇ {L = L} {L‚äël = L‚äël} L‚ààŒì n‚ààM) with L ‚äë? A
... | yes p = Read·¥∞‚ÇÇ (member·¥π p L‚ààŒì) n‚ààM
... | no ¬¨p = ‚ä•-elim (¬¨p (trans-‚äë L‚äël p'))
Œµ‚ÇÅ·¥æ-sim (yes p) (DeepDup‚ÇÅ ¬¨var l‚ààŒì u·¥±) = DeepDup‚ÇÅ (Œµ·µÄ¬¨Var ¬¨var) (member·¥¥ p l‚ààŒì) (update·¥¥ p u·¥±)
Œµ‚ÇÅ·¥æ-sim (yes l‚äëA) (DeepDup‚ÇÇ {L‚äël = L‚äël} œÑ‚ààœÄ L‚ààŒì t‚ààŒî l‚ààŒì u·¥±)
  = DeepDup‚ÇÇ {L‚äël = L‚äël} œÑ‚ààœÄ (member·¥¥ (trans-‚äë L‚äël l‚äëA) L‚ààŒì) (member·¥± œÑ‚ààœÄ t‚ààŒî) (member·¥¥ l‚äëA l‚ààŒì) (update·¥¥ l‚äëA u·¥±)
Œµ‚ÇÅ·¥æ-sim (yes p) Hole = Hole
Œµ‚ÇÅ·¥æ-sim (no l‚ã§A) (Pure l‚ààŒì step u·¥¥) rewrite write·¥¥‚àô-‚â° l‚ã§A l‚ààŒì u·¥¥ = Hole
Œµ‚ÇÅ·¥æ-sim (no H‚ã§A) (New {l‚äëH = l‚äëH} H‚ààŒì u·¥¥) rewrite write·¥π‚àô-‚â° (trans-‚ã§ l‚äëH H‚ã§A) H‚ààŒì u·¥¥ = Hole
Œµ‚ÇÅ·¥æ-sim (no l‚ã§A) New‚àô = Hole
Œµ‚ÇÅ·¥æ-sim (no H‚ã§A) (Write‚ÇÇ {l‚äëH = l‚äëH} H‚ààŒì u·¥π uÀ¢) rewrite write·¥π‚àô-‚â° (trans-‚ã§ l‚äëH H‚ã§A) H‚ààŒì uÀ¢ = Hole
Œµ‚ÇÅ·¥æ-sim (no H‚ã§A) (Write·¥∞‚ÇÇ {l‚äëH = l‚äëH} H‚ààŒì u·¥π uÀ¢) rewrite write·¥π‚àô-‚â° (trans-‚ã§ l‚äëH H‚ã§A) H‚ààŒì uÀ¢ = Hole
Œµ‚ÇÅ·¥æ-sim (no l‚ã§A) Write‚àô‚ÇÇ = Hole
Œµ‚ÇÅ·¥æ-sim (no l‚ã§A) (Read‚ÇÇ l‚ààŒì n‚ààM) = Hole
Œµ‚ÇÅ·¥æ-sim (no l‚ã§A) (Read·¥∞‚ÇÇ L‚ààŒì n‚ààM) = Hole
Œµ‚ÇÅ·¥æ-sim (no l‚ã§A) (DeepDup‚ÇÅ ¬¨var l‚ààŒì u·¥±) with write·¥¥‚àô-‚â° l‚ã§A l‚ààŒì u·¥±
... | eq rewrite eq = Hole
Œµ‚ÇÅ·¥æ-sim (no l‚ã§A) (DeepDup‚ÇÇ œÑ‚ààœÄ L‚ààŒì t‚ààŒî l‚ààŒì u·¥±) with write·¥¥‚àô-‚â° l‚ã§A l‚ààŒì u·¥±
... | eq rewrite eq = Hole
Œµ‚ÇÅ·¥æ-sim (no l‚ã§A) Hole = Hole

Œµ·¥æ : ‚àÄ {l ls œÑ} -> Program l ls œÑ -> Program l ls œÑ
Œµ·¥æ {l} = Œµ‚ÇÅ·¥æ (l ‚äë? A)

Œµ·¥æ-sim : ‚àÄ {l ls œÑ} {p‚ÇÅ p‚ÇÇ : Program l ls œÑ} -> p‚ÇÅ ‚üº p‚ÇÇ -> Œµ·¥æ p‚ÇÅ ‚üº Œµ·¥æ p‚ÇÇ
Œµ·¥æ-sim {l} = Œµ‚ÇÅ·¥æ-sim (l ‚äë? A)
