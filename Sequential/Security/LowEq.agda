import Lattice as L

module Sequential.Security.LowEq (­ЮЊЏ : L.Lattice) (A : L.Label ­ЮЊЏ) where

open import Types ­ЮЊЏ
open import Sequential.Security.Erasure ­ЮЊЏ A as SE
import Sequential.Security.Graph as G
open G ­ЮЊЏ A

--------------------------------------------------------------------------------
-- Temporarily side-step bug #2245

import Sequential.Calculus as SC
open SC ­ЮЊЏ

--------------------------------------------------------------------------------

open import Relation.Binary.PropositionalEquality
open import Data.Empty
open import Relation.Nullary
open import Data.Maybe as M

--------------------------------------------------------------------------------

_РЅЁрхђ_ : Рѕђ {¤ђ ¤ё} (tРѓЂ tРѓѓ : Term ¤ђ ¤ё) -> Set
tРѓЂ РЅЁрхђ tРѓѓ = ╬хрхђ tРѓЂ РЅА ╬хрхђ tРѓѓ

data _РЅѕрхђ_ {¤ђ ¤ё} (tРѓЂ tРѓѓ : Term ¤ђ ¤ё) : Set where
  РЪе_,_РЪЕ : Рѕђ {t' : Term ¤ђ ¤ё} -> (eРѓЂ : Eraseрхђ tРѓЂ t') (eРѓѓ : Eraseрхђ tРѓѓ t') -> tРѓЂ РЅѕрхђ tРѓѓ

Рїъ_РїЪрхђ : Рѕђ {¤ђ ¤ё} {tРѓЂ tРѓѓ : Term ¤ђ ¤ё} -> tРѓЂ РЅѕрхђ tРѓѓ -> tРѓЂ РЅЁрхђ tРѓѓ
Рїъ РЪе eРѓЂ , eРѓѓ РЪЕ РїЪрхђ rewrite unlift-╬хрхђ eРѓЂ | unlift-╬хрхђ eРѓѓ = refl

Рїю_РїЮрхђ : Рѕђ {¤ђ ¤ё} {tРѓЂ tРѓѓ : Term ¤ђ ¤ё} -> tРѓЂ РЅЁрхђ tРѓѓ -> tРѓЂ РЅѕрхђ tРѓѓ
Рїю_РїЮрхђ {tРѓЂ = tРѓЂ} {tРѓѓ} eq with lift-╬хрхђ tРѓЂ | lift-╬хрхђ tРѓѓ
... | x | y rewrite eq = РЪе x , y РЪЕ

refl-РЅѕрхђ : Рѕђ {¤ђ ¤ё} {t : Term ¤ђ ¤ё} -> t РЅѕрхђ t
refl-РЅѕрхђ = Рїю refl РїЮрхђ

sym-РЅѕрхђ : Рѕђ {¤ђ ¤ё} {tРѓЂ tРѓѓ : Term ¤ђ ¤ё} -> tРѓЂ РЅѕрхђ tРѓѓ -> tРѓѓ РЅѕрхђ tРѓЂ
sym-РЅѕрхђ tРѓЂРЅѕtРѓѓ = Рїю sym Рїъ tРѓЂРЅѕtРѓѓ РїЪрхђ РїЮрхђ

trans-РЅѕрхђ : Рѕђ {¤ђ ¤ё} {tРѓЂ tРѓѓ tРѓЃ : Term ¤ђ ¤ё} -> tРѓЂ РЅѕрхђ tРѓѓ -> tРѓѓ РЅѕрхђ tРѓЃ -> tРѓЂ РЅѕрхђ tРѓЃ
trans-РЅѕрхђ tРѓЂРЅѕtРѓѓ tРѓѓРЅѕtРѓЃ = Рїю trans Рїъ tРѓЂРЅѕtРѓѓ РїЪрхђ Рїъ tРѓѓРЅѕtРѓЃ РїЪрхђ РїЮрхђ

--------------------------------------------------------------------------------

_РЅЁрХю_ : Рѕђ {l ¤ђ ¤ёРѓЂ ¤ёРѓѓ} (CРѓЂ CРѓѓ : Cont l ¤ђ ¤ёРѓЂ ¤ёРѓѓ) -> Set
CРѓЂ РЅЁрХю CРѓѓ = ╬хрХю CРѓЂ РЅА ╬хрХю CРѓѓ

data _РЅѕрХю_ {l ¤ђ ¤ёРѓЂ ¤ёРѓѓ} (CРѓЂ CРѓѓ : Cont l ¤ђ ¤ёРѓЂ ¤ёРѓѓ) : Set where
  KрХю : Рѕђ {Cр┤▒ : Cont l ¤ђ ¤ёРѓЂ ¤ёРѓѓ} -> EraseрХю CРѓЂ Cр┤▒ -> EraseрХю CРѓѓ Cр┤▒ -> CРѓЂ РЅѕрХю CРѓѓ

Рїъ_РїЪрХю : Рѕђ {l ¤ђ ¤ёРѓЂ ¤ёРѓѓ} {CРѓЂ CРѓѓ : Cont l ¤ђ ¤ёРѓЂ ¤ёРѓѓ} -> CРѓЂ РЅѕрХю CРѓѓ -> CРѓЂ РЅЁрХю CРѓѓ
Рїъ KрХю eРѓЂ eРѓѓ РїЪрХю rewrite unlift-╬хрХю eРѓЂ | unlift-╬хрХю eРѓѓ = refl

Рїю_РїЮрХю : Рѕђ {l ¤ђ ¤ёРѓЂ ¤ёРѓѓ} {CРѓЂ CРѓѓ : Cont l ¤ђ ¤ёРѓЂ ¤ёРѓѓ} -> CРѓЂ РЅЁрХю CРѓѓ -> CРѓЂ РЅѕрХю CРѓѓ
Рїю_РїЮрХю {CРѓЂ = CРѓЂ} {CРѓѓ} eq with lift-╬хрХю CРѓЂ | lift-╬хрХю CРѓѓ
... | eРѓЂ | eРѓѓ rewrite eq = KрХю eРѓЂ eРѓѓ

--------------------------------------------------------------------------------

_РЅЁ╦б_ : Рѕђ {l ¤ђ ¤ёРѓЂ ¤ёРѓѓ} (SРѓЂ SРѓѓ : Stack l ¤ђ ¤ёРѓЂ ¤ёРѓѓ) -> Set
SРѓЂ РЅЁ╦б SРѓѓ = ╬х╦б SРѓЂ РЅА ╬х╦б SРѓѓ

data _РЅѕ╦б_ {l ¤ђ ¤ёРѓЂ ¤ёРѓѓ } (SРѓЂ SРѓѓ : Stack l ¤ђ ¤ёРѓЂ ¤ёРѓѓ) : Set where
  K╦б : Рѕђ {Sр┤▒ : Stack l ¤ђ ¤ёРѓЂ ¤ёРѓѓ} (eРѓЂ : Erase╦б SРѓЂ Sр┤▒) (eРѓѓ : Erase╦б SРѓѓ Sр┤▒) -> SРѓЂ РЅѕ╦б SРѓѓ

Рїъ_РїЪ╦б : Рѕђ {l ¤ђ ¤ёРѓЂ ¤ёРѓѓ} {SРѓЂ SРѓѓ : Stack l ¤ђ ¤ёРѓЂ ¤ёРѓѓ} -> SРѓЂ РЅѕ╦б SРѓѓ -> SРѓЂ РЅЁ╦б SРѓѓ
Рїъ K╦б eРѓЂ eРѓѓ РїЪ╦б rewrite unlift-╬х╦б eРѓЂ | unlift-╬х╦б eРѓѓ = refl

Рїю_РїЮ╦б : Рѕђ {l ¤ђ ¤ёРѓЂ ¤ёРѓѓ} {SРѓЂ SРѓѓ : Stack l ¤ђ ¤ёРѓЂ ¤ёРѓѓ} -> SРѓЂ РЅЁ╦б SРѓѓ -> SРѓЂ РЅѕ╦б SРѓѓ
Рїю_РїЮ╦б {SРѓЂ = SРѓЂ} {SРѓѓ} eq with lift-╬х╦б SРѓЂ | lift-╬х╦б SРѓѓ
... | eРѓЂ | eРѓѓ rewrite eq = K╦б eРѓЂ eРѓѓ

--------------------------------------------------------------------------------

data _РЅѕр┤╣рхђ_ {¤ђ ¤ё} : Maybe (Term ¤ђ ¤ё) -> Maybe (Term ¤ђ ¤ё) -> Set where
  nothing : nothing РЅѕр┤╣рхђ nothing
  just : Рѕђ {tРѓЂ tРѓѓ : Term ¤ђ ¤ё} -> tРѓЂ РЅѕрхђ tРѓѓ -> just tРѓЂ РЅѕр┤╣рхђ just tРѓѓ

_РЅЁр┤╣рхђ_ : Рѕђ {¤ђ ¤ё} (mtРѓЂ mtРѓѓ : Maybe (Term ¤ђ ¤ё)) -> Set
mtРѓЂ РЅЁр┤╣рхђ mtРѓѓ = M.map ╬хрхђ mtРѓЂ РЅА M.map ╬хрхђ mtРѓѓ

Рїю_РїЮр┤╣рхђ : Рѕђ {¤ђ ¤ё} {mtРѓЂ mtРѓѓ : Maybe (Term ¤ђ ¤ё)} -> mtРѓЂ РЅЁр┤╣рхђ mtРѓѓ -> mtРѓЂ РЅѕр┤╣рхђ mtРѓѓ
Рїю_РїЮр┤╣рхђ {mtРѓЂ = just x} {just xРѓЂ} eq = just Рїю split eq РїЮрхђ
  where split : Рѕђ {¤ђ ¤ё} {tРѓЂ tРѓѓ : Term ¤ђ ¤ё} -> _РЅА_ {_} {Maybe (Term ¤ђ ¤ё)} (just tРѓЂ) (just tРѓѓ) -> tРѓЂ РЅА tРѓѓ
        split refl = refl
Рїю_РїЮр┤╣рхђ {mtРѓЂ = just x} {nothing} ()
Рїю_РїЮр┤╣рхђ {mtРѓЂ = nothing} {just x} ()
Рїю_РїЮр┤╣рхђ {mtРѓЂ = nothing} {nothing} refl = nothing

--------------------------------------------------------------------------------

_map-РЅЁрхђ_ : Рѕђ {l ¤ђ} -> Heap l ¤ђ  -> Heap l ¤ђ -> Set
╬ћРѓЂ map-РЅЁрхђ ╬ћРѓѓ = map-╬хрхђ ╬ћРѓЂ РЅА map-╬хрхђ ╬ћРѓѓ

data _map-РЅѕрхђ_ {l ¤ђ} (╬ћРѓЂ ╬ћРѓѓ : Heap l ¤ђ) : Set where
  K-mapрхђ : Рѕђ {╬ћр┤▒ : Heap l ¤ђ} -> (eРѓЂ : EraseMapрхђ ╬ћРѓЂ ╬ћр┤▒) (eРѓѓ : EraseMapрхђ ╬ћРѓѓ ╬ћр┤▒) -> ╬ћРѓЂ map-РЅѕрхђ ╬ћРѓѓ

map-Рїъ_РїЪрхђ : Рѕђ {l ¤ђ} {╬ћРѓЂ ╬ћРѓѓ : Heap l ¤ђ} -> ╬ћРѓЂ map-РЅѕрхђ ╬ћРѓѓ -> ╬ћРѓЂ map-РЅЁрхђ ╬ћРѓѓ
map-Рїъ K-mapрхђ eРѓЂ eРѓѓ РїЪрхђ rewrite unlift-map-╬хрхђ eРѓЂ | unlift-map-╬хрхђ eРѓѓ = refl

map-Рїю_РїЮрхђ : Рѕђ {l ¤ђ} {╬ћРѓЂ ╬ћРѓѓ : Heap l ¤ђ} -> ╬ћРѓЂ map-РЅЁрхђ ╬ћРѓѓ -> ╬ћРѓЂ map-РЅѕрхђ ╬ћРѓѓ
map-Рїю_РїЮрхђ {╬ћРѓЂ = ╬ћРѓЂ} {╬ћРѓѓ} eq with lift-map-╬хрхђ ╬ћРѓЂ | lift-map-╬хрхђ ╬ћРѓѓ
... | eРѓЂ | eРѓѓ rewrite eq = K-mapрхђ eРѓЂ eРѓѓ

--------------------------------------------------------------------------------

_РЅЁр┤┤РЪе_РЪЕ_ : Рѕђ {l} -> HeapРѕЎ l -> Dec (l РіЉ A) -> HeapРѕЎ l -> Set
HРѓЂ РЅЁр┤┤РЪе x РЪЕ HРѓѓ = ╬хр┤┤ x HРѓЂ РЅА ╬хр┤┤ x HРѓѓ

data _РЅѕр┤┤РЪе_РЪЕ_ {l} (HРѓЂ : HeapРѕЎ l) (x : Dec (l РіЉ A)) (HРѓѓ : HeapРѕЎ l) : Set where
  Kр┤┤ : Рѕђ {Hр┤▒ : HeapРѕЎ l} -> (eРѓЂ : Eraseр┤┤ x HРѓЂ Hр┤▒) (eРѓѓ : Eraseр┤┤ x HРѓѓ Hр┤▒) -> HРѓЂ РЅѕр┤┤РЪе x РЪЕ HРѓѓ

Рїъ_РїЪр┤┤ : Рѕђ {l} {HРѓЂ HРѓѓ : HeapРѕЎ l} {x : Dec (l РіЉ A)} -> HРѓЂ РЅѕр┤┤РЪе x РЪЕ HРѓѓ -> HРѓЂ РЅЁр┤┤РЪе x РЪЕ HРѓѓ
Рїъ Kр┤┤ eРѓЂ eРѓѓ РїЪр┤┤ rewrite unlift-╬хр┤┤ eРѓЂ | unlift-╬хр┤┤ eРѓѓ = refl

Рїю_РїЮр┤┤ : Рѕђ {l} {HРѓЂ HРѓѓ : HeapРѕЎ l} {x : Dec (l РіЉ A)} -> HРѓЂ РЅЁр┤┤РЪе x РЪЕ HРѓѓ -> HРѓЂ РЅѕр┤┤РЪе x РЪЕ HРѓѓ
Рїю_РїЮр┤┤ {HРѓЂ = HРѓЂ} {HРѓѓ} {x} eq with lift-╬хр┤┤ x HРѓЂ | lift-╬хр┤┤ x HРѓѓ
... | eРѓЂ | eРѓѓ rewrite eq = Kр┤┤ eРѓЂ eРѓѓ

--------------------------------------------------------------------------------
-- Structural low-equivalence for Heaps

_map-РЅЁр┤┤_ : Рѕђ {ls} (╬ЊРѓЂ ╬ЊРѓѓ : Heaps ls) -> Set
╬ЊРѓЂ map-РЅЁр┤┤ ╬ЊРѓѓ = map-╬хр┤┤ ╬ЊРѓЂ РЅА map-╬хр┤┤ ╬ЊРѓѓ

data _map-РЅѕр┤┤_ {ls} (╬ЊРѓЂ ╬ЊРѓѓ : Heaps ls) : Set where
  K-mapр┤┤ : Рѕђ {╬Њр┤▒ : Heaps ls} -> EraseMapр┤┤ ╬ЊРѓЂ ╬Њр┤▒ -> EraseMapр┤┤ ╬ЊРѓѓ ╬Њр┤▒ -> ╬ЊРѓЂ map-РЅѕр┤┤ ╬ЊРѓѓ

map-Рїъ_РїЪр┤┤ : Рѕђ {ls} {╬ЊРѓЂ ╬ЊРѓѓ : Heaps ls} -> ╬ЊРѓЂ map-РЅѕр┤┤ ╬ЊРѓѓ -> ╬ЊРѓЂ map-РЅЁр┤┤ ╬ЊРѓѓ
map-Рїъ K-mapр┤┤ eРѓЂ eРѓѓ РїЪр┤┤ rewrite unlift-map-╬хр┤┤ eРѓЂ | unlift-map-╬хр┤┤ eРѓѓ = refl

map-Рїю_РїЮр┤┤ : Рѕђ {ls} {╬ЊРѓЂ ╬ЊРѓѓ : Heaps ls} -> ╬ЊРѓЂ map-РЅЁр┤┤ ╬ЊРѓѓ -> ╬ЊРѓЂ map-РЅѕр┤┤ ╬ЊРѓѓ
map-Рїю_РїЮр┤┤ {╬ЊРѓЂ = ╬ЊРѓЂ} {╬ЊРѓѓ} eq with lift-map-╬хр┤┤ ╬ЊРѓЂ | lift-map-╬хр┤┤ ╬ЊРѓѓ
... | eРѓЂ | eРѓѓ rewrite eq = K-mapр┤┤ eРѓЂ eРѓѓ

trans-РЅѕр┤┤ : Рѕђ {ls} {╬ЊРѓЂ ╬ЊРѓѓ ╬ЊРѓЃ : Heaps ls} -> ╬ЊРѓЂ map-РЅѕр┤┤ ╬ЊРѓѓ -> ╬ЊРѓѓ map-РЅѕр┤┤ ╬ЊРѓЃ -> ╬ЊРѓЂ map-РЅѕр┤┤ ╬ЊРѓЃ
trans-РЅѕр┤┤ a b = map-Рїю trans map-Рїъ a РїЪр┤┤ map-Рїъ b РїЪр┤┤ РїЮр┤┤

--------------------------------------------------------------------------------

_РЅЁр┤╣РЪе_РЪЕ_ : Рѕђ {l} -> Memory l -> Dec (l РіЉ A) -> Memory l -> Set
MРѓЂ РЅЁр┤╣РЪе x РЪЕ MРѓѓ = ╬хр┤╣ x MРѓЂ РЅА ╬хр┤╣ x MРѓѓ

data _РЅѕр┤╣РЪе_РЪЕ_ {l} (MРѓЂ : Memory l) (x : Dec (l РіЉ A)) (MРѓѓ : Memory l) : Set where
  Kр┤╣ : Рѕђ {Mр┤▒ : Memory l} -> Eraseр┤╣ x MРѓЂ Mр┤▒ -> Eraseр┤╣ x MРѓѓ Mр┤▒ -> MРѓЂ РЅѕр┤╣РЪе x РЪЕ MРѓѓ

Рїъ_РїЪр┤╣ : Рѕђ {l} {MРѓЂ MРѓѓ : Memory l} {x : Dec _}  -> MРѓЂ РЅѕр┤╣РЪе x РЪЕ MРѓѓ -> MРѓЂ РЅЁр┤╣РЪе x РЪЕ MРѓѓ
Рїъ Kр┤╣ eРѓЂ eРѓѓ РїЪр┤╣ rewrite unlift-╬хр┤╣ eРѓЂ | unlift-╬хр┤╣ eРѓѓ = refl

Рїю_РїЮр┤╣ : Рѕђ {l} {MРѓЂ MРѓѓ : Memory l} {x : Dec (l РіЉ A)} -> MРѓЂ РЅЁр┤╣РЪе x РЪЕ MРѓѓ -> MРѓЂ РЅѕр┤╣РЪе x РЪЕ  MРѓѓ
Рїю_РїЮр┤╣ {MРѓЂ = MРѓЂ} {MРѓѓ} {x} eq with lift-╬хр┤╣ x MРѓЂ | lift-╬хр┤╣ x MРѓѓ
... | eРѓЂ | eРѓѓ rewrite eq = Kр┤╣ eРѓЂ eРѓѓ

--------------------------------------------------------------------------------

_map-РЅЁр┤╣_ : Рѕђ {ls} (MsРѓЂ MsРѓѓ : Memories ls) -> Set
MsРѓЂ map-РЅЁр┤╣ MsРѓѓ = map-╬хр┤╣ MsРѓЂ РЅА map-╬хр┤╣ MsРѓѓ

data _map-РЅѕр┤╣_ {ls} (MsРѓЂ MsРѓѓ : Memories ls) : Set where
  K-mapр┤╣ : Рѕђ {Msр┤▒ : Memories ls} -> EraseMapр┤╣ MsРѓЂ Msр┤▒ -> EraseMapр┤╣ MsРѓѓ Msр┤▒ -> MsРѓЂ map-РЅѕр┤╣ MsРѓѓ

map-Рїъ_РїЪр┤╣ : Рѕђ {ls} {MsРѓЂ MsРѓѓ : Memories ls} -> MsРѓЂ map-РЅѕр┤╣ MsРѓѓ -> MsРѓЂ map-РЅЁр┤╣ MsРѓѓ
map-Рїъ K-mapр┤╣ eРѓЂ eРѓѓ РїЪр┤╣ rewrite unlift-map-╬хр┤╣ eРѓЂ | unlift-map-╬хр┤╣ eРѓѓ = refl

map-Рїю_РїЮр┤╣ : Рѕђ {ls} {MsРѓЂ MsРѓѓ : Memories ls} -> MsРѓЂ map-РЅЁр┤╣ MsРѓѓ -> MsРѓЂ map-РЅѕр┤╣ MsРѓѓ
map-Рїю_РїЮр┤╣ {MsРѓЂ = MsРѓЂ} {MsРѓѓ} eq with lift-map-╬хр┤╣ MsРѓЂ | lift-map-╬хр┤╣ MsРѓѓ
... | eРѓЂ | eРѓѓ rewrite eq = K-mapр┤╣ eРѓЂ eРѓѓ

trans-РЅѕр┤╣ : Рѕђ {ls} {MsРѓЂ MsРѓѓ MsРѓЃ : Memories ls} -> MsРѓЂ map-РЅѕр┤╣ MsРѓѓ -> MsРѓѓ map-РЅѕр┤╣ MsРѓЃ -> MsРѓЂ map-РЅѕр┤╣ MsРѓЃ
trans-РЅѕр┤╣ a b = map-Рїю trans map-Рїъ a РїЪр┤╣ map-Рїъ b РїЪр┤╣ РїЮр┤╣


--------------------------------------------------------------------------------

_РЅЁрхђ╦бРЪе_РЪЕ_ : Рѕђ {l ¤ё} -> TSРѕЎ l ¤ё -> Dec (l РіЉ A) -> TSРѕЎ l ¤ё -> Set
TsРѓЂ  РЅЁрхђ╦бРЪе x РЪЕ TsРѓѓ = ╬хрхђ╦б x TsРѓЂ РЅА ╬хрхђ╦б x TsРѓѓ

data _РЅѕрхђ╦бРЪе_РЪЕ_ {l ¤ё} (TsРѓЂ : TSРѕЎ l ¤ё) (x : Dec (l РіЉ A)) (TsРѓѓ : TSРѕЎ l ¤ё) : Set where
  Kрхђ╦б : Рѕђ {Tsр┤▒ : TSРѕЎ l ¤ё} -> (eРѓЂ : Eraseрхђ╦б x TsРѓЂ Tsр┤▒) (eРѓѓ : Eraseрхђ╦б x TsРѓѓ Tsр┤▒) -> TsРѓЂ РЅѕрхђ╦бРЪе x РЪЕ TsРѓѓ

Рїъ_РїЪрхђ╦б : Рѕђ {l ¤ё} {TsРѓЂ TsРѓѓ : TSРѕЎ l ¤ё} {x : Dec (l РіЉ A)} -> TsРѓЂ РЅѕрхђ╦бРЪе x РЪЕ TsРѓѓ -> TsРѓЂ РЅЁрхђ╦бРЪе x РЪЕ TsРѓѓ
Рїъ Kрхђ╦б eРѓЂ eРѓѓ РїЪрхђ╦б rewrite unlift-╬хрхђ╦б eРѓЂ | unlift-╬хрхђ╦б eРѓѓ = refl

Рїю_РїЮрхђ╦б : Рѕђ {l ¤ё} {TsРѓЂ TsРѓѓ : TSРѕЎ l ¤ё} {x : Dec (l РіЉ A)} -> TsРѓЂ РЅЁрхђ╦бРЪе x РЪЕ TsРѓѓ -> TsРѓЂ РЅѕрхђ╦бРЪе x РЪЕ TsРѓѓ
Рїю_РїЮрхђ╦б {TsРѓЂ = TsРѓЂ} {TsРѓѓ} {x} eq with lift-╬хрхђ╦б x TsРѓЂ | lift-╬хрхђ╦б x TsРѓѓ
... | eРѓЂ | eРѓѓ rewrite eq = Kрхђ╦б eРѓЂ eРѓѓ


refl-РЅѕрхђ╦б : Рѕђ {l ¤ё} {Ts : TSРѕЎ l ¤ё} -> Ts РЅѕрхђ╦бРЪе l РіЉ? A РЪЕ Ts
refl-РЅѕрхђ╦б = Рїю refl РїЮрхђ╦б

sym-РЅѕрхђ╦б : Рѕђ {l ¤ё} {TsРѓЂ TsРѓѓ : TSРѕЎ l ¤ё} {x : Dec (l РіЉ A)} -> TsРѓЂ РЅѕрхђ╦бРЪе x РЪЕ TsРѓѓ -> TsРѓѓ РЅѕрхђ╦бРЪе x РЪЕ TsРѓЂ
sym-РЅѕрхђ╦б TsРѓЂРЅѕTsРѓѓ = Рїю sym Рїъ TsРѓЂРЅѕTsРѓѓ РїЪрхђ╦б РїЮрхђ╦б

trans-РЅѕрхђ╦б : Рѕђ {l ¤ё} {TsРѓЂ TsРѓѓ TsРѓЃ : TSРѕЎ l ¤ё} {x : Dec (l РіЉ A)} -> TsРѓЂ РЅѕрхђ╦бРЪе x РЪЕ TsРѓѓ -> TsРѓѓ РЅѕрхђ╦бРЪе x РЪЕ TsРѓЃ -> TsРѓЂ РЅѕрхђ╦бРЪе x РЪЕ TsРѓЃ
trans-РЅѕрхђ╦б TsРѓЂРЅѕTsРѓѓ TsРѓѓРЅѕTsРѓЃ = Рїю trans Рїъ TsРѓЂРЅѕTsРѓѓ РїЪрхђ╦б Рїъ TsРѓѓРЅѕTsРѓЃ РїЪрхђ╦б РїЮрхђ╦б

ext-РЅѕрхђ╦б : Рѕђ {l ¤ё} {TsРѓЂ TsРѓѓ : TSРѕЎ l ¤ё} {x y : Dec (l РіЉ A)} -> TsРѓЂ РЅѕрхђ╦бРЪе x РЪЕ TsРѓѓ -> TsРѓЂ РЅѕрхђ╦бРЪе y РЪЕ TsРѓѓ
ext-РЅѕрхђ╦б (Kрхђ╦б eРѓЂ eРѓѓ) = Kрхђ╦б (ext-╬хрхђ╦б eРѓЂ) (ext-╬хрхђ╦б eРѓѓ)

--------------------------------------------------------------------------------

_РЅЁр┤ЙРЪе_РЪЕ_ : Рѕђ {l ls ¤ё} -> Program l ls ¤ё -> Dec (l РіЉ A) -> Program l ls ¤ё -> Set
pРѓЂ РЅЁр┤ЙРЪе x РЪЕ pРѓѓ = ╬хРѓЂр┤Й x pРѓЂ РЅА ╬хРѓЂр┤Й x pРѓѓ

-- Program low-equivalence
record _РЅѕр┤ЙРЪе_РЪЕ_ {l ls ¤ё} (pРѓЂ : Program l ls ¤ё) (x : Dec (l РіЉ A)) (pРѓѓ : Program l ls ¤ё) : Set where
  constructor РЪе_,_,_РЪЕ
  field
    MsРѓЂРЅѕMsРѓѓ : (Ms pРѓЂ) map-РЅѕр┤╣ (Ms pРѓѓ)
    ╬ЊРѓЂРЅѕ╬ЊРѓѓ : (╬Њ pРѓЂ) map-РЅѕр┤┤ (╬Њ pРѓѓ)
    TsРѓЂРЅѕTsРѓѓ : (TS pРѓЂ) РЅѕрхђ╦бРЪе x РЪЕ (TS pРѓѓ)

Рїъ_РїЪр┤Й : Рѕђ {l ls ¤ё} {pРѓЂ pРѓѓ : Program l ls ¤ё} {x : Dec _} -> pРѓЂ РЅѕр┤ЙРЪе x РЪЕ pРѓѓ -> pРѓЂ РЅЁр┤ЙРЪе x РЪЕ pРѓѓ
Рїъ РЪе MsРѓЂРЅѕMsРѓѓ , ╬ЊРѓЂРЅѕ╬ЊРѓѓ , TsРѓЂРЅѕTsРѓѓ РЪЕ РїЪр┤Й rewrite map-Рїъ MsРѓЂРЅѕMsРѓѓ РїЪр┤╣ | map-Рїъ ╬ЊРѓЂРЅѕ╬ЊРѓѓ РїЪр┤┤ | Рїъ TsРѓЂРЅѕTsРѓѓ РїЪрхђ╦б = refl

Рїю_РїЮр┤Й : Рѕђ {l ls ¤ё} {pРѓЂ pРѓѓ : Program l ls ¤ё} {x : Dec _} -> pРѓЂ РЅЁр┤ЙРЪе x РЪЕ pРѓѓ -> pРѓЂ РЅѕр┤ЙРЪе x РЪЕ pРѓѓ
Рїю eq РїЮр┤Й = РЪе map-Рїю auxр┤╣ eq РїЮр┤╣ , map-Рїю auxр┤┤ eq РїЮр┤┤ , Рїю auxрхђ╦б eq РїЮрхђ╦б РЪЕ
  where auxр┤╣ : Рѕђ {l ls ¤ё} {pРѓЂ pРѓѓ : Program l ls ¤ё} -> pРѓЂ РЅА pРѓѓ -> (Ms pРѓЂ) РЅА (Ms pРѓѓ)
        auxр┤╣ refl = refl

        auxр┤┤ : Рѕђ {l ls ¤ё} {pРѓЂ pРѓѓ : Program l ls ¤ё} -> pРѓЂ РЅА pРѓѓ -> (╬Њ pРѓЂ) РЅА (╬Њ pРѓѓ)
        auxр┤┤ refl = refl

        auxрхђ╦б : Рѕђ {l ls ¤ё} {pРѓЂ pРѓѓ : Program l ls ¤ё} -> pРѓЂ РЅА pРѓѓ -> (TS pРѓЂ) РЅА (TS pРѓѓ)
        auxрхђ╦б refl = refl

_РЅЁр┤Й_ : Рѕђ {l ls ¤ё} -> Program l ls ¤ё -> Program l ls ¤ё -> Set
pРѓЂ РЅЁр┤Й pРѓѓ = pРѓЂ РЅЁр┤ЙРЪе (_ РіЉ? A) РЪЕ pРѓѓ

refl-РЅѕр┤Й : Рѕђ {l ls ¤ё} {p : Program l ls ¤ё} -> p РЅѕр┤ЙРЪе l РіЉ? A РЪЕ p
refl-РЅѕр┤Й {l} = Рїю refl РїЮр┤Й

sym-РЅѕр┤Й : Рѕђ {l ls ¤ё} {pРѓЂ pРѓѓ : Program l ls ¤ё} {x : Dec (l РіЉ A)} -> pРѓЂ РЅѕр┤ЙРЪе x РЪЕ pРѓѓ -> pРѓѓ РЅѕр┤ЙРЪе x РЪЕ pРѓЂ
sym-РЅѕр┤Й eq = Рїю sym Рїъ eq РїЪр┤Й РїЮр┤Й

trans-РЅѕр┤Й : Рѕђ {l ls ¤ё} {pРѓЂ pРѓѓ pРѓЃ : Program l ls ¤ё} {x : Dec (l РіЉ A)} -> pРѓЂ РЅѕр┤ЙРЪе x РЪЕ pРѓѓ -> pРѓѓ РЅѕр┤ЙРЪе x РЪЕ pРѓЃ -> pРѓЂ РЅѕр┤ЙРЪе x РЪЕ pРѓЃ
trans-РЅѕр┤Й eqРѓЂ eqРѓѓ = Рїю trans Рїъ eqРѓЂ РїЪр┤Й Рїъ eqРѓѓ РїЪр┤Й РїЮр┤Й

ext-РЅѕр┤Й : Рѕђ {l ls ¤ё} {x y : Dec (l РіЉ A)} {pРѓЂ pРѓѓ : Program l ls ¤ё} -> pРѓЂ РЅѕр┤ЙРЪе x РЪЕ pРѓѓ -> pРѓЂ РЅѕр┤ЙРЪе y РЪЕ pРѓѓ
ext-РЅѕр┤Й РЪе MsРѓЂРЅѕMsРѓѓ , ╬ЊРѓЂРЅѕ╬ЊРѓѓ , TsРѓЂРЅѕTsРѓѓ РЪЕ = РЪе MsРѓЂРЅѕMsРѓѓ , ╬ЊРѓЂРЅѕ╬ЊРѓѓ , (ext-РЅѕрхђ╦б TsРѓЂРЅѕTsРѓѓ) РЪЕ

ext-РЅЁр┤Й : Рѕђ {l ls ¤ё} {x y : Dec (l РіЉ A)} {pРѓЂ pРѓѓ : Program l ls ¤ё} -> pРѓЂ РЅЁр┤ЙРЪе x РЪЕ pРѓѓ -> pРѓЂ РЅЁр┤ЙРЪе y РЪЕ pРѓѓ
ext-РЅЁр┤Й {x = x} {y = y} eq = Рїъ_РїЪр┤Й (ext-РЅѕр┤Й {x = x} {y = y} Рїю eq РїЮр┤Й)

--------------------------------------------------------------------------------
-- Lemmas about visible РЅѕ terms and programs

import Sequential.Semantics as SS
open SS ­ЮЊЏ

import Sequential.Valid as V
open V ­ЮЊЏ

open import Sequential.Security.Simulation ­ЮЊЏ A

val-РЅѕ : Рѕђ {¤ђ ¤ё} {tРѓЂ tРѓѓ : Term ¤ђ ¤ё} -> tРѓЂ РЅѕрхђ tРѓѓ -> Value tРѓЂ -> Value tРѓѓ
val-РЅѕ РЪе eРѓЂ , eРѓѓ РЪЕ val = valРЂ╗р┤▒ eРѓѓ (valр┤▒ eРѓЂ val)

┬гval-РЅѕ : Рѕђ {¤ђ ¤ё} {tРѓЂ tРѓѓ : Term ¤ђ ¤ё} -> tРѓЂ РЅѕрхђ tРѓѓ -> ┬г (Value tРѓЂ) -> ┬г (Value tРѓѓ)
┬гval-РЅѕ eq = contrapositive (val-РЅѕ (sym-РЅѕрхђ eq))

var-РЅѕ : Рѕђ {¤ђ ¤ё} {tРѓЂ tРѓѓ : Term ¤ђ ¤ё} -> tРѓЂ РЅѕрхђ tРѓѓ -> IsVar tРѓЂ -> IsVar tРѓѓ
var-РЅѕ РЪе G.Var ¤ёРѕѕ¤ђ , G.Var .¤ёРѕѕ¤ђ РЪЕ (SC.Var .¤ёРѕѕ¤ђ) = SC.Var ¤ёРѕѕ¤ђ

┬гvar-РЅѕ : Рѕђ {¤ђ ¤ё} {tРѓЂ tРѓѓ : Term ¤ђ ¤ё} -> tРѓЂ РЅѕрхђ tРѓѓ -> ┬г (IsVar tРѓЂ) -> ┬г (IsVar tРѓѓ)
┬гvar-РЅѕ eq = contrapositive (var-РЅѕ (sym-РЅѕрхђ eq))

done-РЅѕ : Рѕђ {l ¤ё} {TsРѓЂ TsРѓѓ : TSРѕЎ l ¤ё} {lРіЉA : l РіЉ A} -> TsРѓЂ РЅѕрхђ╦бРЪе (yes lРіЉA) РЪЕ TsРѓѓ -> IsDoneTS TsРѓЂ -> IsDoneTS TsРѓѓ
done-РЅѕ (Kрхђ╦б eРѓЂ eРѓѓ) don = doneРЂ╗р┤▒ eРѓѓ (doneр┤▒ eРѓЂ don)

fork-РЅѕ : Рѕђ {¤ђ ¤ё} {tРѓЂ tРѓѓ : Term ¤ђ ¤ё} -> tРѓЂ РЅѕрхђ tРѓѓ -> (IsFork tРѓЂ) -> (IsFork tРѓѓ)
fork-РЅѕ РЪе eРѓЂ , eРѓѓ РЪЕ isFork = forkРЂ╗р┤▒ eРѓѓ (forkр┤▒ eРѓЂ isFork)

-- Gives more information about two low-eq forks
data Fork-РЅѕ {¤ђ} : Рѕђ {¤ё} -> (tРѓЂ tРѓѓ : Term ¤ђ ¤ё) -> Set where
  isFork-РЅѕ : Рѕђ {l h} {tРѓЂ tРѓѓ : Term ¤ђ (Mac h _)} {lРіЉh : l РіЉ h} -> tРѓЂ РЅѕрхђ tРѓѓ -> Fork-РЅѕ (fork lРіЉh tРѓЂ) (fork lРіЉh tРѓѓ)

fork-РЅѕ' : Рѕђ {¤ђ ¤ё ls} {MsРѓЂ MsРѓѓ : Memories ls} {tРѓЂ tРѓѓ : Term ¤ђ ¤ё} {{vРѓЂ : validрхђ MsРѓЂ tРѓЂ}} {{vРѓѓ : validрхђ MsРѓѓ tРѓѓ}} -> tРѓЂ РЅѕрхђ tРѓѓ -> IsFork tРѓЂ -> Fork-РЅѕ tРѓЂ tРѓѓ
fork-РЅѕ' {MsРѓЂ = MsРѓЂ} {MsРѓѓ = MsРѓѓ} {{vРѓЂ}} {{vРѓѓ}} eq x = aux vРѓЂ vРѓѓ x eq (fork-РЅѕ eq x)
  where import Sequential.Security.Graph.Base as B
        open B ­ЮЊЏ A

        aux : Рѕђ {¤ђ ¤ё} {tРѓЂ tРѓѓ : Term ¤ђ ¤ё} -> validрхђ MsРѓЂ tРѓЂ -> validрхђ MsРѓѓ tРѓѓ -> IsFork tРѓЂ -> tРѓЂ РЅѕрхђ tРѓѓ -> IsFork tРѓѓ -> Fork-РЅѕ tРѓЂ tРѓѓ
        aux vРѓЂ vРѓѓ (SC.Fork p t) РЪе B.fork .p hРіЉA eРѓЂ , B.fork .p hРіЉAРѓЂ eРѓѓ РЪЕ (SC.Fork .p tРѓЂ) = isFork-РЅѕ РЪе eРѓЂ , eРѓѓ РЪЕ
        aux vРѓЂ vРѓѓ (SC.Fork p t) РЪе B.fork' .p hРІцA eРѓЂ , B.fork' .p hРІцAРѓЂ eРѓѓ РЪЕ (SC.Fork .p tРѓЂ) = isFork-РЅѕ РЪе eРѓЂ , eРѓѓ РЪЕ
        aux vРѓЂ vРѓѓ (SC.Fork p t) РЪе B.fork' .p hРІцA eРѓЂ , B.forkРѕЎ .p eРѓѓ РЪЕ (SC.ForkРѕЎ .p tРѓЂ) = РіЦ-elim vРѓѓ
        aux vРѓЂ vРѓЃ (SC.ForkРѕЎ p t) eq f = РіЦ-elim vРѓЂ


forkTS-РЅѕ : Рѕђ {l ¤ё} {TsРѓЂ TsРѓѓ : TSРѕЎ l ¤ё} {lРіЉA : l РіЉ A} -> TsРѓЂ РЅѕрхђ╦бРЪе yes lРіЉA РЪЕ TsРѓѓ -> (IsForkTS TsРѓЂ) -> (IsForkTS TsРѓѓ)
forkTS-РЅѕ (Kрхђ╦б G.РЪе eрхђРѓЂ , e╦бРѓЂ РЪЕ G.РЪе eрхђ , e╦б РЪЕ) (SS.isForkTS isFork) = SS.isForkTS (fork-РЅѕ РЪе eрхђРѓЂ , eрхђ РЪЕ isFork)

redex-РЅѕ : Рѕђ {l ls ¤ё} {lРіЉA : l РіЉ A} {pРѓЂ pРѓѓ : Program l ls ¤ё} {{vРѓѓ : validр┤Й pРѓѓ}} ->
            pРѓЂ РЅѕр┤ЙРЪе (yes lРіЉA) РЪЕ pРѓѓ -> Redexр┤Й pРѓЂ  -> Redexр┤Й pРѓѓ
redex-РЅѕ {lРіЉA = lРіЉA} {pРѓЂ} {pРѓѓ} {{vРѓѓ}} pРѓЂРЅѕpРѓѓ redexРѓЂ with lift-╬хр┤Й (yes lРіЉA) pРѓЂ | lift-╬хр┤Й (yes lРіЉA) pРѓѓ
... | eРѓЂ | eРѓѓ rewrite Рїъ pРѓЂРЅѕpРѓѓ РїЪр┤Й = redexРЂ╗р┤▒ eРѓѓ (redexр┤▒ eРѓЂ redexРѓЂ)

newрхђ╦б-РЅѕ : Рѕђ {l h ¤ђ} {x : Dec (l РіЉ A)} {tРѓЂ tРѓѓ : Term ¤ђ (Mac h №╝ѕ№╝Ѕ)} -> tРѓЂ РЅѕрхђ tРѓѓ -> РЪе tРѓЂ , [] РЪЕ РЅѕрхђ╦бРЪе x РЪЕ РЪе tРѓѓ , [] РЪЕ
newрхђ╦б-РЅѕ {x = yes p} РЪе eРѓЂ , eРѓѓ РЪЕ = Kрхђ╦б РЪе eРѓЂ , [] РЪЕ РЪе eРѓѓ , [] РЪЕ
newрхђ╦б-РЅѕ {x = no ┬гp} РЪе eРѓЂ , eРѓѓ РЪЕ = Kрхђ╦б РѕЎ РѕЎ

--------------------------------------------------------------------------------

┬гfork-РЅѕ : Рѕђ {¤ђ ¤ё} {tРѓЂ tРѓѓ : Term ¤ђ ¤ё} -> tРѓЂ РЅѕрхђ tРѓѓ -> ┬г (IsFork tРѓЂ) -> ┬г (IsFork tРѓѓ)
┬гfork-РЅѕ tРѓЂРЅѕtРѓѓ = contrapositive (fork-РЅѕ (sym-РЅѕрхђ tРѓЂРЅѕtРѓѓ))

┬гIsForkTS-РЅѕ : Рѕђ {¤ё l} {TsРѓЂ TsРѓѓ : TSРѕЎ l ¤ё} {lРіЉA : l РіЉ A} -> TsРѓЂ РЅѕрхђ╦бРЪе yes lРіЉA РЪЕ TsРѓѓ -> ┬г (IsForkTS TsРѓЂ) -> ┬г (IsForkTS TsРѓѓ)
┬гIsForkTS-РЅѕ TsРѓЂРЅѕTsРѓѓ = contrapositive (forkTS-РЅѕ (sym-РЅѕрхђ╦б TsРѓЂРЅѕTsРѓѓ))

┬гdone-РЅѕ : Рѕђ {l ¤ё} {lРіЉA : l РіЉ A} {TsРѓЂ TsРѓѓ : TSРѕЎ l ¤ё} -> TsРѓЂ РЅѕрхђ╦бРЪе yes lРіЉA РЪЕ TsРѓѓ -> ┬г (IsDoneTS TsРѓЂ) -> ┬г (IsDoneTS TsРѓѓ)
┬гdone-РЅѕ TsРѓЂРЅѕTsРѓѓ  = contrapositive (done-РЅѕ (sym-РЅѕрхђ╦б TsРѓЂРЅѕTsРѓѓ))

┬гredex-РЅѕ : Рѕђ {l ls ¤ё} {lРіЉA : l РіЉ A} {pРѓЂ pРѓѓ : Program l ls ¤ё} {{vРѓЂ : validр┤Й pРѓЂ}} ->
             pРѓЂ РЅѕр┤ЙРЪе (yes lРіЉA) РЪЕ pРѓѓ -> ┬г (Redexр┤Й pРѓЂ)  -> ┬г (Redexр┤Й pРѓѓ)
┬гredex-РЅѕ pРѓЂРЅѕpРѓѓ = contrapositive (redex-РЅѕ (sym-РЅѕр┤Й pРѓЂРЅѕpРѓѓ))

deepDupрхђ-РЅѕ : Рѕђ {¤ђ ¤ё} {tРѓЂ tРѓѓ : Term ¤ђ ¤ё} -> tРѓЂ РЅѕрхђ tРѓѓ -> deepDupрхђ tРѓЂ РЅѕрхђ deepDupрхђ tРѓѓ
deepDupрхђ-РЅѕ РЪе eРѓЂ , eРѓѓ РЪЕ = РЪе (deepDupрхђр┤▒ eРѓЂ) , (deepDupрхђр┤▒ eРѓѓ) РЪЕ

open _РЅѕр┤ЙРЪе_РЪЕ_

open import Data.Product

stuck-РЅѕ : Рѕђ {l ls ¤ё} {pРѓЂ pРѓѓ : Program l ls ¤ё} {lРіЉA : l РіЉ A} {{vРѓЂ : validр┤Й pРѓЂ}} ->
            pРѓЂ РЅѕр┤ЙРЪе (yes lРіЉA) РЪЕ pРѓѓ -> Stuckр┤Й pРѓЂ -> Stuckр┤Й pРѓѓ
stuck-РЅѕ pРѓЂРЅѕpРѓѓ (┬гdone , ┬гredex , ┬гfork) = ┬гdone-РЅѕ (TsРѓЂРЅѕTsРѓѓ pРѓЂРЅѕpРѓѓ) ┬гdone , ┬гredex-РЅѕ pРѓЂРЅѕpРѓѓ ┬гredex  , ┬гIsForkTS-РЅѕ (TsРѓЂРЅѕTsРѓѓ pРѓЂРЅѕpРѓѓ) ┬гfork

--------------------------------------------------------------------------------
