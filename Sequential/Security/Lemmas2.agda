import Lattice as LРѓЂ

module Sequential.Security.Lemmas2 (­ЮЊЏ : LРѓЂ.Lattice) (A : LРѓЂ.Label ­ЮЊЏ) where

import Types as T
open T ­ЮЊЏ

open import Sequential.Security.Erasure ­ЮЊЏ A as SE hiding (updateр┤╣)
import Sequential.Security.Graph as G
open G ­ЮЊЏ A

--------------------------------------------------------------------------------
-- Temporarily side-step bug #2245

import Sequential.Calculus as SC
open SC ­ЮЊЏ

--------------------------------------------------------------------------------

import Sequential.Semantics as SS
open SS ­ЮЊЏ

import Sequential.Security.LowEq as L renaming (РЪе_,_,_РЪЕ to isРЅѕр┤Й)
open L ­ЮЊЏ A


import Sequential.Valid as V hiding (member╦б ; update╦б ; memberр┤▒ ; updateр┤▒ )
open V ­ЮЊЏ

open import Relation.Binary.PropositionalEquality
open import Data.Empty
open import Relation.Nullary
open import Data.Product
open import Data.Maybe

val-РЅѕ : Рѕђ {¤ђ ¤ё} {tРѓЂ tРѓѓ : Term ¤ђ ¤ё} -> tРѓЂ РЅѕрхђ tРѓѓ -> Value tРѓЂ -> Value tРѓѓ
val-РЅѕ L.РЪе eРѓЂ , eРѓѓ РЪЕ val = valр┤▒ eРѓѓ (valРѓЂр┤▒ eРѓЂ val)

var-РЅѕ : Рѕђ {¤ђ ¤ё} {tРѓЂ tРѓѓ : Term ¤ђ ¤ё} -> tРѓЂ РЅѕрхђ tРѓѓ -> IsVar tРѓЂ -> IsVar tРѓѓ
var-РЅѕ L.РЪе G.Var ¤ёРѕѕ¤ђ , G.Var .¤ёРѕѕ¤ђ РЪЕ (SC.Var .¤ёРѕѕ¤ђ) = SC.Var ¤ёРѕѕ¤ђ

┬гvar-РЅѕ : Рѕђ {¤ђ ¤ё} {tРѓЂ tРѓѓ : Term ¤ђ ¤ё} -> tРѓЂ РЅѕрхђ tРѓѓ -> ┬г (IsVar tРѓЂ) -> ┬г (IsVar tРѓѓ)
┬гvar-РЅѕ eq = contrapositive (var-РЅѕ (sym-РЅѕрхђ eq))

done-РЅѕ : Рѕђ {l ¤ё} {TsРѓЂ TsРѓѓ : TSРѕЎ l ¤ё} {lРіЉA : l РіЉ A} -> TsРѓЂ РЅѕрхђ╦бРЪе (yes lРіЉA) РЪЕ TsРѓѓ -> IsDoneTS TsРѓЂ -> IsDoneTS TsРѓѓ
done-РЅѕ (Kрхђ╦б G.РЪе xРѓЃ , G.[] РЪЕ G.РЪе xРѓЂ , G.[] РЪЕ) (SS.isDoneTS isVal) = isDoneTS (val-РЅѕ L.РЪе xРѓЃ , xРѓЂ РЪЕ isVal)

fork-РЅѕ : Рѕђ {¤ђ ¤ё} {tРѓЂ tРѓѓ : Term ¤ђ ¤ё} -> tРѓЂ РЅѕрхђ tРѓѓ -> (IsFork tРѓЂ) -> (IsFork tРѓѓ)
fork-РЅѕ tРѓЂРЅѕtРѓѓ isFork = fork-РЅѕ' isFork tРѓЂРЅѕtРѓѓ
  where -- Pattern matching in the original order hits a bug.
        fork-РЅѕ' : Рѕђ {¤ђ ¤ё} {tРѓЂ tРѓѓ : Term ¤ђ ¤ё} -> (IsFork tРѓЂ) -> tРѓЂ РЅѕрхђ tРѓѓ -> (IsFork tРѓѓ)
        fork-РЅѕ' (SC.Fork p t) L.РЪе G.fork .p hРіЉA eРѓЂ , G.fork .p hРіЉAРѓЂ eРѓѓ РЪЕ = SC.Fork p _
        fork-РЅѕ' (SC.Fork p t) L.РЪе G.fork' .p hРІцA eРѓЂ , G.fork' .p hРІцAРѓЂ eРѓѓ РЪЕ = SC.Fork p _
        fork-РЅѕ' (SC.Fork p t) L.РЪе G.fork' .p hРІцA eРѓЂ , G.forkРѕЎ .p eРѓѓ РЪЕ = SC.ForkРѕЎ p _
        fork-РЅѕ' (SC.ForkРѕЎ p t) L.РЪе G.forkРѕЎ .p eРѓЂ , G.fork' .p hРІцA eРѓѓ РЪЕ = SC.Fork p _
        fork-РЅѕ' (SC.ForkРѕЎ p t) L.РЪе G.forkРѕЎ .p eРѓЂ , G.forkРѕЎ .p eРѓѓ РЪЕ = SC.ForkРѕЎ p _

forkTS-РЅѕ : Рѕђ {l ¤ё} {TsРѓЂ TsРѓѓ : TSРѕЎ l ¤ё} {lРіЉA : l РіЉ A} -> TsРѓЂ РЅѕрхђ╦бРЪе yes lРіЉA РЪЕ TsРѓѓ -> (IsForkTS TsРѓЂ) -> (IsForkTS TsРѓѓ)
forkTS-РЅѕ (Kрхђ╦б G.РЪе eрхђРѓЂ , e╦бРѓЂ РЪЕ G.РЪе eрхђ , e╦б РЪЕ) (SS.isForkTS isFork) = SS.isForkTS (fork-РЅѕ L.РЪе eрхђРѓЂ , eрхђ РЪЕ isFork)

open import Data.Product as P
open import Function
import Sequential.Calculus renaming (РЪе_,_,_РЪЕ to mkр┤Й ; РЪе_,_РЪЕ to mkрхђ)

member-РЅѕр┤┤ : Рѕђ {l ¤ђРѓЂ ¤ђРѓѓ ¤ё} {╬ћРѓЂ ╬ћРѓѓ : Heap l ¤ђРѓЂ} {tРѓЂ : Term ¤ђРѓѓ ¤ё} {¤ёРѕѕ¤ђ : ¤ё РѕѕРЪе l РЪЕр┤┐ ¤ђРѓЂ} -> ╬ћРѓЂ map-РЅѕрхђ ╬ћРѓѓ -> ¤ёРѕѕ¤ђ Рєд tРѓЂ Рѕѕр┤┤ ╬ћРѓЂ ->
            ╬Б (Term ¤ђРѓѓ ¤ё) (╬╗ tРѓѓ Рєњ tРѓЂ РЅѕрхђ tРѓѓ ├Ќ ¤ёРѕѕ¤ђ Рєд tРѓѓ Рѕѕр┤┤ ╬ћРѓѓ)
member-РЅѕр┤┤ {¤ёРѕѕ¤ђ = ¤ёРѕѕ¤ђ} ╬ћРѓЂРЅѕ╬ћРѓѓ tРѕѕ╬ћ = aux ╬ћРѓЂРЅѕ╬ћРѓѓ tРѕѕ╬ћ
  where aux : Рѕђ {l ¤ђРѓЂ ¤ђРѓѓ ¤ё} {╬ћРѓЂ ╬ћРѓѓ : Heap l ¤ђРѓЂ} {tРѓЂ : Term ¤ђРѓѓ ¤ё} {¤ёРѕѕ¤ђ : ¤ё РѕѕРЪе l РЪЕ ¤ђРѓЂ} -> ╬ћРѓЂ map-РЅѕрхђ ╬ћРѓѓ -> Memberр┤┤ (just tРѓЂ) ¤ёРѕѕ¤ђ ╬ћРѓЂ ->
              ╬Б (Term ¤ђРѓѓ ¤ё) (╬╗ tРѓѓ Рєњ tРѓЂ РЅѕрхђ tРѓѓ ├Ќ Memberр┤┤ (just tРѓѓ) ¤ёРѕѕ¤ђ ╬ћРѓѓ)
        aux (L.K-mapрхђ (G.just x G.Рѕи eРѓЂ) (G.just xРѓЂ G.Рѕи eРѓѓ)) SC.here = _ , L.РЪе x , xРѓЂ РЪЕ , here
        aux (L.K-mapрхђ (x G.Рѕи eРѓЂ) (xРѓЂ G.Рѕи eРѓѓ)) (SC.there tРѕѕ╬ћРѓЂ) = P.map id (P.map id there) (aux (L.K-mapрхђ eРѓЂ eРѓѓ) tРѕѕ╬ћРѓЂ)

-- update-РЅѕр┤┤ : Рѕђ {l ¤ђРѓЂ ¤ђРѓѓ ¤ё} {╬ћРѓЂ ╬ћРѓЂ' ╬ћРѓѓ : Heap l ¤ђРѓЂ} {mtРѓЂ mtРѓѓ : Maybe (Term ¤ђРѓѓ ¤ё)} {¤ёРѕѕ¤ђ : ¤ё РѕѕРЪе l РЪЕ ¤ђРѓЂ} ->
--               ╬ћРѓЂ map-РЅѕрхђ ╬ћРѓѓ -> mtРѓЂ РЅѕр┤╣рхђ mtРѓѓ -> Updateр┤┤ mtРѓЂ ¤ёРѕѕ¤ђ ╬ћРѓЂ ╬ћРѓЂ' -> ╬Б (Heap l ¤ђРѓЂ) (╬╗ ╬ћРѓѓ' Рєњ Updateр┤┤ mtРѓѓ ¤ёРѕѕ¤ђ ╬ћРѓѓ ╬ћРѓѓ')
-- update-РЅѕр┤┤ ╬ћРѓЂРЅѕ╬ћРѓѓ mtРѓЂРЅѕmtРѓѓ u = {!!}

member-РЅѕр┤▒ : Рѕђ {l ls ¤ђ} {╬ЊРѓЂ ╬ЊРѓѓ : Heaps ls} {╬ћРѓЂ : Heap l ¤ђ} (lРіЉA : l РіЉ A) -> ╬ЊРѓЂ map-РЅѕр┤┤ ╬ЊРѓѓ -> l Рєд РЪе ╬ћРѓЂ РЪЕ Рѕѕр┤▒ ╬ЊРѓЂ ->
            ╬Б (Heap l ¤ђ) (╬╗ ╬ћРѓѓ Рєњ РЪе ╬ћРѓЂ РЪЕ РЅѕр┤┤РЪе yes lРіЉA РЪЕ РЪе ╬ћРѓѓ РЪЕ ├Ќ l Рєд РЪе ╬ћРѓѓ РЪЕ Рѕѕр┤▒ ╬ЊРѓѓ)
member-РЅѕр┤▒ {l} lРіЉA (L.K-mapр┤┤ (xРѓЂ G.Рѕи xРѓё) (xРѓѓ G.Рѕи xРѓЃ)) SC.here with l РіЉ? A
member-РЅѕр┤▒ lРіЉA (L.K-mapр┤┤ (G.Mapрхђ lРіЉAРѓЂ x G.Рѕи xРѓё) (G.Mapрхђ .lРіЉAРѓЂ xРѓЂ G.Рѕи xРѓЃ)) SC.here | .(yes lРіЉAРѓЂ) = _ , ((L.Kр┤┤ (G.Mapрхђ lРіЉA x) (G.Mapрхђ lРіЉA xРѓЂ)) , here)
member-РЅѕр┤▒ lРіЉA (L.K-mapр┤┤ (G.РѕЎ G.Рѕи xРѓё) (G.РѕЎ G.Рѕи xРѓЃ)) SC.here | (no lРІцA) = РіЦ-elim (lРІцA lРіЉA)
member-РЅѕр┤▒ lРіЉA (L.K-mapр┤┤ (xРѓЃ G.Рѕи xРѓѓ) (x G.Рѕи xРѓЂ)) (SC.there lРѕѕ╬Њ) = P.map id (P.map id there) (member-РЅѕр┤▒ lРіЉA (L.K-mapр┤┤ xРѓѓ xРѓЂ) lРѕѕ╬Њ)

update-РЅѕр┤▒ : Рѕђ {l ls} {╬ЊРѓЂ ╬ЊРѓЂ' ╬ЊРѓѓ : Heaps ls} {HРѓЂ HРѓѓ : HeapРѕЎ l} -> ╬ЊРѓЂ map-РЅѕр┤┤ ╬ЊРѓѓ -> ╬ЊРѓЂ' РЅћ ╬ЊРѓЂ [ l Рєд HРѓЂ ]р┤▒ ->
            РѕЃ (╬╗ ╬ЊРѓѓ' Рєњ ╬ЊРѓѓ' РЅћ ╬ЊРѓѓ [ l Рєд HРѓѓ ]р┤▒)
update-РЅѕр┤▒ (L.K-mapр┤┤ (xРѓЃ G.Рѕи xРѓѓ) (x G.Рѕи xРѓЂ)) SC.here = _ , here
update-РЅѕр┤▒ (L.K-mapр┤┤ (xРѓЃ G.Рѕи xРѓѓ) (x G.Рѕи xРѓЂ)) (SC.there uРѓЂ) = P.map (_Рѕи_ _) there (update-РЅѕр┤▒ (L.K-mapр┤┤ xРѓѓ xРѓЂ) uРѓЂ)

member-РЅѕ╦б : Рѕђ {l ls} {MsРѓЂ MsРѓѓ : Memories ls} {MРѓЂ : Memory l} (x : Dec (l РіЉ A)) -> MsРѓЂ map-РЅѕр┤╣ MsРѓѓ -> l Рєд MРѓЂ Рѕѕ╦б MsРѓЂ ->
          РѕЃ (╬╗ MРѓѓ Рєњ  MРѓЂ РЅѕр┤╣РЪе x РЪЕ MРѓѓ ├Ќ l Рєд MРѓѓ Рѕѕ╦б MsРѓѓ)
member-РЅѕ╦б d (L.K-mapр┤╣ (x G.Рѕи xРѓЃ) (xРѓЂ G.Рѕи xРѓѓ)) SC.here = _ , L.Kр┤╣ (ext-╬хр┤╣ d x) (ext-╬хр┤╣ d xРѓЂ) , here
member-РЅѕ╦б d (L.K-mapр┤╣ (xРѓЃ G.Рѕи xРѓѓ) (x G.Рѕи xРѓЂ)) (SC.there lРѕѕMs) = P.map id (P.map id there) (member-РЅѕ╦б d (L.K-mapр┤╣ xРѓѓ xРѓЂ) lРѕѕMs)

update-РЅѕ╦б :  Рѕђ {l ls} {MsРѓЂ MsРѓЂ' MsРѓѓ : Memories ls} {MРѓЂ MРѓѓ : Memory l} ->  MsРѓЂ map-РЅѕр┤╣ MsРѓѓ ->
               MsРѓЂ' РЅћ MsРѓЂ [ l Рєд MРѓЂ ]╦б -> РѕЃ (╬╗ MsРѓѓ' Рєњ MsРѓѓ' РЅћ MsРѓѓ [ l Рєд MРѓѓ ]╦б)
update-РЅѕ╦б (L.K-mapр┤╣ (xРѓЃ G.Рѕи xРѓѓ) (x G.Рѕи xРѓЂ)) SC.here = _ , here
update-РЅѕ╦б (L.K-mapр┤╣ (xРѓЃ G.Рѕи xРѓѓ) (x G.Рѕи xРѓЂ)) (SC.there uРѓЂ) = P.map (_Рѕи_ _) there (update-РЅѕ╦б (L.K-mapр┤╣ xРѓѓ xРѓЂ) uРѓЂ)

updateр┤╣ : Рѕђ {l ¤ё n} {MРѓЂ MРѓЂ' MРѓѓ : Memory l} {c : Cell l ¤ё} {lРіЉA : l РіЉ A} ->
            MРѓЂ РЅѕр┤╣РЪе yes lРіЉA РЪЕ MРѓѓ -> MРѓЂ' РЅћ MРѓЂ [ n Рєд c ]р┤╣ -> РѕЃ (╬╗ MРѓѓ' Рєњ MРѓѓ' РЅћ MРѓѓ [ n Рєд c ]р┤╣)
updateр┤╣ (L.Kр┤╣ (G.Id lРіЉA) (G.Id .lРіЉA)) SC.here = _ , SC.here
updateр┤╣ (L.Kр┤╣ (G.Id lРіЉA) (G.Id .lРіЉA)) (SC.there u) = P.map (_Рѕи_ _) there (updateр┤╣ (L.Kр┤╣ (G.Id lРіЉA) (G.Id lРіЉA)) u)

member-РЅѕр┤╣ : Рѕђ {l ¤ё n} {lРіЉA : l РіЉ A} {MРѓЂ MРѓѓ : Memory l} {c : Cell l ¤ё} -> MРѓЂ РЅѕр┤╣РЪе yes lРіЉA РЪЕ MРѓѓ -> n Рєд c Рѕѕр┤╣ MРѓЂ -> n Рєд c Рѕѕр┤╣ MРѓѓ
member-РЅѕр┤╣ (L.Kр┤╣ (G.Id lРіЉA) (G.Id .lРіЉA)) nРѕѕM = nРѕѕM

redexРЪ╝ : Рѕђ {ls l ¤ђ ¤ё ¤ё'} {MsРѓЂ MsРѓѓ : Memories ls} {╬ЊРѓЂ ╬ЊРѓѓ : Heaps ls} {pРѓЂ' : Program l ls ¤ё}
             {tРѓЂ tРѓѓ : Term ¤ђ ¤ё'} {SРѓЂ SРѓѓ : Stack _ _ _ _} {lРіЉA : l РіЉ A} ->
             let pРѓЂ = SC.mkр┤Й MsРѓЂ  ╬ЊРѓЂ (SC.mkрхђ tРѓЂ  SРѓЂ)
                 pРѓѓ = SC.mkр┤Й MsРѓѓ  ╬ЊРѓѓ (SC.mkрхђ tРѓѓ SРѓѓ) in
             validр┤Й pРѓЂ -> validр┤Й pРѓѓ ->  MsРѓЂ map-РЅѕр┤╣ MsРѓѓ -> ╬ЊРѓЂ map-РЅѕр┤┤ ╬ЊРѓѓ -> tРѓЂ РЅѕрхђ tРѓѓ -> SРѓЂ РЅѕ╦б SРѓѓ ->
             pРѓЂ РЪ╝ pРѓЂ' -> Redexр┤Й pРѓѓ
redexРЪ╝ vРѓЂ vРѓѓ MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ tРѓЂРЅѕtРѓѓ SРѓЂРЅѕSРѓѓ (SS.Pure lРѕѕ╬Њ step uр┤╣) = {!!}
redexРЪ╝ vРѓЂ vРѓѓ MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ L.РЪе G.new lРіЉH hРіЉA (G.Var ._) , G.new .lРіЉH hРіЉAРѓЂ (G.Var ._) РЪЕ SРѓЂРЅѕSРѓѓ (SS.New HРѕѕMs uр┤╣)
  with member-РЅѕ╦б (yes hРіЉA) MsРѓЂРЅѕMsРѓѓ HРѕѕMs
... | MРѓѓ , MРѓЂРЅѕMРѓѓ , HРѕѕMs' with update-РЅѕ╦б MsРѓЂРЅѕMsРѓѓ uр┤╣
... | MsРѓѓ' , uр┤╣' = Step (New HРѕѕMs' uр┤╣' )
redexРЪ╝ vРѓЂ vРѓѓ MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ L.РЪе G.new' lРіЉH hРІцA (G.Var ._) , G.new' .lРіЉH hРІцAРѓЂ (G.Var ._) РЪЕ SРѓЂРЅѕSРѓѓ (SS.New HРѕѕMs uр┤╣)
  with member-РЅѕ╦б (no hРІцA) MsРѓЂРЅѕMsРѓѓ HРѕѕMs
... | MРѓѓ , MРѓЂРЅѕMРѓѓ , HРѕѕMs' with update-РЅѕ╦б MsРѓЂРЅѕMsРѓѓ uр┤╣
... | MsРѓѓ' , uр┤╣' = Step (New HРѕѕMs' uр┤╣' )
redexРЪ╝ vРѓЂ (projРѓЂ , projРѓѓ , () , projРѓЃ) MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ L.РЪе G.new' lРіЉH hРІцA eРѓЂ , G.newРѕЎ .lРіЉH eРѓѓ РЪЕ SРѓЂРЅѕSРѓѓ (SS.New HРѕѕMs uр┤╣)
redexРЪ╝ (projРѓЂ , projРѓѓ , () , projРѓЃ) vРѓѓ MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ tРѓЂРЅѕtРѓѓ SРѓЂРЅѕSРѓѓ SS.NewРѕЎ
redexРЪ╝ vРѓЂ vРѓѓ MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ L.РЪе G.Res x G.#[ n ] , G.Res xРѓЂ G.#[ .n ] РЪЕ (L.K╦б (G.write lРіЉH HРіЉA ._ G.Рѕи xРѓё) (G.write .lРіЉH HРіЉAРѓЂ ._ G.Рѕи xРѓѓ)) (SS.WriteРѓѓ HРѕѕMs uр┤╣ u╦б)
  with member-РЅѕ╦б (yes HРіЉA) MsРѓЂРЅѕMsРѓѓ HРѕѕMs
... | MРѓѓ , MРѓЂРЅѕMРѓѓ , HРѕѕMs' with updateр┤╣ MРѓЂРЅѕMРѓѓ uр┤╣
... | MРѓѓ' , uр┤╣' with update-РЅѕ╦б MsРѓЂРЅѕMsРѓѓ u╦б
... | MsРѓѓ' , u╦б' = Step (WriteРѓѓ HРѕѕMs' uр┤╣' u╦б')
redexРЪ╝ vРѓЂ vРѓѓ MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ L.РЪе G.Res x _ , G.Res xРѓЂ _ РЪЕ (L.K╦б (G.write' lРіЉH HРІцA ._ G.Рѕи xРѓё) (G.write' .lРіЉH HРІцAРѓЂ ._ G.Рѕи xРѓѓ)) (SS.WriteРѓѓ HРѕѕMs uр┤╣ u╦б)
  = РіЦ-elim (HРІцAРѓЂ xРѓЂ)
redexРЪ╝ vРѓЂ (projРѓЂ , projРѓѓ , projРѓЃ , () , projРѓё) MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ L.РЪе G.Res x eРѓЂ , G.Res xРѓЂ eРѓѓ РЪЕ (L.K╦б (G.write' lРіЉH HРІцA ._ G.Рѕи xРѓё) (G.writeРѕЎ .lРіЉH ._ G.Рѕи xРѓѓ)) (SS.WriteРѓѓ HРѕѕMs uр┤╣ u╦б)
redexРЪ╝ vРѓЂ vРѓѓ MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ L.РЪе G.ResРѕЎ x , G.Res xРѓЂ eРѓѓ РЪЕ (L.K╦б (xРѓЁ G.Рѕи xРѓё) (xРѓЃ G.Рѕи xРѓѓ)) (SS.WriteРѓѓ HРѕѕMs uр┤╣ u╦б) = РіЦ-elim (x xРѓЂ)
redexРЪ╝ vРѓЂ vРѓѓ MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ L.РЪе G.ResРѕЎ xРѓЂ , G.ResРѕЎ xРѓѓ РЪЕ (L.K╦б (G.write lРіЉH HРіЉA ._ G.Рѕи xРѓё) (G.write .lРіЉH HРіЉAРѓЂ ._ G.Рѕи x)) (SS.WriteРѓѓ HРѕѕMs uр┤╣ u╦б)
  = РіЦ-elim (xРѓѓ HРіЉAРѓЂ)

redexРЪ╝ (projРѓЂ , projРѓѓ , (lРѕѕls , n , V.is#[ .n ] , isV) , rРѓѓ) (projРѓЃ , projРѓё , (lРѕѕls' , n' , V.is#[ .n' ] , isV') , rРѓЃ) MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ L.РЪе G.ResРѕЎ xРѓЂ , G.ResРѕЎ xРѓѓ РЪЕ (L.K╦б (G.write' lРіЉH HРІцA ._ G.Рѕи xРѓё) (G.write' .lРіЉH HРІцAРѓЂ ._ G.Рѕи x)) (SS.WriteРѓѓ HРѕѕMs uр┤╣ u╦б)
  with updateр┤╣-valid (SC.РѕЦ lРіЉH , _ РѕЦ) isV'
... | MРѓѓ' , uр┤╣' with update-РЅѕ╦б MsРѓЂРЅѕMsРѓѓ u╦б
... | MsРѓѓ' , u╦б' = Step (WriteРѓѓ (lookup-Рѕѕ╦б lРѕѕls' _) uр┤╣' u╦б')

redexРЪ╝ (projРѓЂ , projРѓѓ , (lРѕѕls , n , V.is#[ .n ] , isV) , rРѓѓ) (projРѓЃ , projРѓё , (lРѕѕls' , n' , V.is#[ .n' ]р┤░ , isV') , rРѓЃ) MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ L.РЪе G.ResРѕЎ xРѓЂ , G.ResРѕЎ xРѓѓ РЪЕ (L.K╦б (G.write' lРіЉH HРІцA ._ G.Рѕи xРѓё) (G.write' .lРіЉH HРІцAРѓЂ ._ G.Рѕи x)) (SS.WriteРѓѓ HРѕѕMs uр┤╣ u╦б)
  with updateр┤╣-valid (SC.РѕЦ lРіЉH , _ РѕЦ) isV'
... | MРѓѓ' , uр┤╣' with update-РЅѕ╦б MsРѓЂРЅѕMsРѓѓ u╦б
... | MsРѓѓ' , u╦б' = Step (Writeр┤░Рѓѓ (lookup-Рѕѕ╦б lРѕѕls' _) uр┤╣' u╦б')

redexРЪ╝ vРѓЂ vРѓѓ MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ L.РЪе G.ResРѕЎ xРѓЂ , G.ResРѕЎ xРѓѓ РЪЕ (L.K╦б (G.write' lРіЉH HРІцA ._ G.Рѕи xРѓё) (G.writeРѕЎ .lРіЉH ._ G.Рѕи x)) (SS.WriteРѓѓ HРѕѕMs uр┤╣ u╦б)
  = РіЦ-elim (projРѓЂ (projРѓѓ (projРѓѓ (projРѓѓ vРѓѓ))))

redexРЪ╝ vРѓЂ vРѓѓ MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ L.РЪе G.Res x G.#[ n ]р┤░ , G.Res xРѓЂ G.#[ .n ]р┤░ РЪЕ (L.K╦б (G.write lРіЉH HРіЉA ._ G.Рѕи xРѓЃ) (G.write .lРіЉH HРіЉAРѓЂ ._ G.Рѕи xРѓѓ)) (SS.Writeр┤░Рѓѓ HРѕѕMs uр┤╣ u╦б)
  with member-РЅѕ╦б (yes HРіЉA) MsРѓЂРЅѕMsРѓѓ HРѕѕMs
... | MРѓѓ , MРѓЂРЅѕMРѓѓ , HРѕѕMs' with updateр┤╣ MРѓЂРЅѕMРѓѓ uр┤╣
... | MРѓѓ' , uр┤╣' with update-РЅѕ╦б MsРѓЂРЅѕMsРѓѓ u╦б
... | MsРѓѓ' , u╦б' = Step (Writeр┤░Рѓѓ HРѕѕMs' uр┤╣' u╦б')

redexРЪ╝ vРѓЂ vРѓѓ MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ L.РЪе G.Res x eРѓЂ , G.Res xРѓЂ eРѓѓ РЪЕ (L.K╦б (G.write' lРіЉH HРІцA ._ G.Рѕи xРѓЃ) (_ G.Рѕи xРѓѓ)) (SS.Writeр┤░Рѓѓ HРѕѕMs uр┤╣ u╦б) = РіЦ-elim (HРІцA xРѓЂ)

redexРЪ╝ vРѓЂ vРѓѓ MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ L.РЪе G.ResРѕЎ x , G.Res xРѓЂ eРѓѓ РЪЕ (L.K╦б xРѓЃ xРѓѓ) (SS.Writeр┤░Рѓѓ HРѕѕMs uр┤╣ u╦б) = РіЦ-elim (x xРѓЂ)
redexРЪ╝ vРѓЂ vРѓѓ MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ L.РЪе G.ResРѕЎ x , G.ResРѕЎ xРѓЂ РЪЕ (L.K╦б (G.write lРіЉH HРіЉA ._ G.Рѕи xРѓЃ) xРѓѓ) (SS.Writeр┤░Рѓѓ HРѕѕMs uр┤╣ u╦б) = РіЦ-elim (xРѓЂ HРіЉA)
redexРЪ╝ (projРѓЂ , projРѓѓ , (lРѕѕls , n , V.is#[ .n ]р┤░ , isV) , rРѓѓ) (projРѓЃ , projРѓё , (lРѕѕls' , n' , V.is#[ .n' ] , isV') , rРѓЃ) MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ L.РЪе G.ResРѕЎ x , G.ResРѕЎ xРѓЂ РЪЕ (L.K╦б (G.write' lРіЉH HРІцA ._ G.Рѕи xРѓЃ) (G.write' .lРіЉH HРІцAРѓЂ ._ G.Рѕи xРѓѓ)) (SS.Writeр┤░Рѓѓ HРѕѕMs uр┤╣ u╦б)
  with updateр┤╣-valid (SC.РѕЦ lРіЉH , _ РѕЦ) isV'
... | MРѓѓ' , uр┤╣' with update-РЅѕ╦б MsРѓЂРЅѕMsРѓѓ u╦б
... | MsРѓѓ' , u╦б' = SS.Step (WriteРѓѓ (lookup-Рѕѕ╦б lРѕѕls' _) uр┤╣' u╦б')

redexРЪ╝ (projРѓЂ , projРѓѓ , (lРѕѕls , n , V.is#[ .n ]р┤░ , isV) , rРѓѓ) (projРѓЃ , projРѓё , (lРѕѕls' , n' , V.is#[ .n' ] , isV') , () , rРѓЃ) MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ L.РЪе G.ResРѕЎ x , G.ResРѕЎ xРѓЂ РЪЕ (L.K╦б (G.write' lРіЉH HРІцA ._ G.Рѕи xРѓЃ) (G.writeРѕЎ .lРіЉH ._ G.Рѕи xРѓѓ)) (SS.Writeр┤░Рѓѓ HРѕѕMs uр┤╣ u╦б)
redexРЪ╝ (projРѓЂ , projРѓѓ , (lРѕѕls , n , V.is#[ .n ]р┤░ , isV) , rРѓѓ) (projРѓЃ , projРѓё , (lРѕѕls' , n' , V.is#[ .n' ]р┤░ , isV') , rРѓЃ) MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ L.РЪе G.ResРѕЎ x , G.ResРѕЎ xРѓЂ РЪЕ (L.K╦б (G.write' lРіЉH HРІцA ._ G.Рѕи xРѓЃ) (G.write' .lРіЉH HРІцAРѓЂ ._ G.Рѕи xРѓѓ)) (SS.Writeр┤░Рѓѓ HРѕѕMs uр┤╣ u╦б)
  with updateр┤╣-valid (SC.РѕЦ lРіЉH , _ РѕЦ) isV'
... | MРѓѓ' , uр┤╣' with update-РЅѕ╦б MsРѓЂРЅѕMsРѓѓ u╦б
... | MsРѓѓ' , u╦б' = SS.Step (Writeр┤░Рѓѓ (lookup-Рѕѕ╦б lРѕѕls' _) uр┤╣' u╦б')

redexРЪ╝ (projРѓЂ , projРѓѓ , (lРѕѕls , n , V.is#[ .n ]р┤░ , isV) , rРѓѓ) (projРѓЃ , projРѓё , (lРѕѕls' , n' , V.is#[ .n' ]р┤░ , isV') , () , rРѓЃ) MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ L.РЪе G.ResРѕЎ x , G.ResРѕЎ xРѓЂ РЪЕ (L.K╦б (G.write' lРіЉH HРІцA ._ G.Рѕи xРѓЃ) (G.writeРѕЎ .lРіЉH ._ G.Рѕи xРѓѓ)) (SS.Writeр┤░Рѓѓ HРѕѕMs uр┤╣ u╦б)

redexРЪ╝ (projРѓЂ , projРѓѓ , _ , () , projРѓЃ) vРѓѓ MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ tРѓЂРЅѕtРѓѓ SРѓЂРЅѕSРѓѓ SS.WriteРѕЎРѓѓ
redexРЪ╝ vРѓЂ vРѓѓ MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ L.РЪе G.Res x G.#[ n ] , G.Res xРѓЂ G.#[ .n ] РЪЕ (L.K╦б (G.read ._ G.Рѕи xРѓЁ) (G.read ._ G.Рѕи xРѓё)) (SS.ReadРѓѓ lРѕѕ╬Њ nРѕѕM)
  with member-РЅѕ╦б (yes x) MsРѓЂРЅѕMsРѓѓ lРѕѕ╬Њ
... | MРѓѓ , MРѓЂРЅѕMРѓѓ , lРѕѕMs'  = Step (ReadРѓѓ lРѕѕMs' (member-РЅѕр┤╣ MРѓЂРЅѕMРѓѓ nРѕѕM))
redexРЪ╝ {lРіЉA = lРіЉA} vРѓЂ vРѓѓ MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ L.РЪе G.ResРѕЎ x , _ РЪЕ (L.K╦б (xРѓѓ G.Рѕи xРѓЁ) (xРѓЃ G.Рѕи xРѓё)) (SS.ReadРѓѓ lРѕѕ╬Њ nРѕѕM) = РіЦ-elim (x lРіЉA)
redexРЪ╝ vРѓЂ vРѓѓ MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ L.РЪе G.Res x G.#[ n ]р┤░ , G.Res xРѓЂ G.#[ .n ]р┤░ РЪЕ (L.K╦б (G.read LРіЉl G.Рѕи xРѓЃ) (G.read .LРіЉl G.Рѕи xРѓѓ)) (SS.Readр┤░Рѓѓ LРѕѕMs nРѕѕM)
  with member-РЅѕ╦б (yes x) MsРѓЂРЅѕMsРѓѓ LРѕѕMs
... | MРѓѓ , MРѓЂРЅѕMРѓѓ , lРѕѕMs' = Step (Readр┤░Рѓѓ lРѕѕMs' (member-РЅѕр┤╣ MРѓЂРЅѕMРѓѓ nРѕѕM))
redexРЪ╝ {lРіЉA = lРіЉA} vРѓЂ vРѓѓ MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ L.РЪе G.ResРѕЎ x , eРѓѓ РЪЕ SРѓЂРЅѕSРѓѓ (SS.Readр┤░Рѓѓ {LРіЉl = LРіЉl} LРѕѕMs nРѕѕM) = РіЦ-elim (x (trans-РіЉ LРіЉl lРіЉA))
redexРЪ╝ {lРіЉA = lРіЉA} vРѓЂ vРѓѓ MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ L.РЪе G.deepDup eРѓЂ , G.deepDup eРѓѓ РЪЕ SРѓЂРЅѕSРѓѓ (SS.DeepDupРѓЂ ┬гvar lРѕѕ╬Њ uр┤▒)
  with member-РЅѕр┤▒ lРіЉA ╬ЊРѓЂРЅѕ╬ЊРѓѓ lРѕѕ╬Њ
... | ╬ћРѓѓ , ╬ћРѓЂРЅѕ╬ћРѓѓ , lРѕѕ╬ЊРѓѓ with update-РЅѕр┤▒ ╬ЊРѓЂРЅѕ╬ЊРѓѓ uр┤▒
... | ╬ЊРѓѓ' , uр┤▒' = Step (DeepDupРѓЂ (┬гvar-РЅѕ L.РЪе eРѓЂ , eРѓѓ РЪЕ ┬гvar) lРѕѕ╬ЊРѓѓ uр┤▒')
redexРЪ╝ {lРіЉA = lРіЉA} vРѓЂ vРѓѓ MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ L.РЪе G.deepDup (G.Var ¤ёРѕѕ¤ђ) , G.deepDup (G.Var .¤ёРѕѕ¤ђ) РЪЕ SРѓЂРЅѕSРѓѓ (SS.DeepDupРѓѓ {LРіЉl = LРіЉl} .¤ёРѕѕ¤ђ LРѕѕ╬Њ tРѕѕ╬ћ lРѕѕ╬Њ uр┤▒)
  with member-РЅѕр┤▒ (trans-РіЉ LРіЉl lРіЉA) ╬ЊРѓЂРЅѕ╬ЊРѓѓ LРѕѕ╬Њ
... | ╬ћРѓЂ , L.Kр┤┤ (G.Mapрхђ ._ eРѓЂ) (G.Mapрхђ ._ eРѓѓ) , LРѕѕ╬ЊРѓѓ with member-РЅѕр┤┤ {¤ёРѕѕ¤ђ = ¤ёРѕѕ¤ђ} (L.K-mapрхђ eРѓЂ eРѓѓ) tРѕѕ╬ћ
... | tРѓѓ , tРѓЂРЅѕtРѓѓ , tРѕѕ╬ћРѓѓр┤И  with member-РЅѕр┤▒ lРіЉA ╬ЊРѓЂРЅѕ╬ЊРѓѓ lРѕѕ╬Њ
... | ╬ћРѓѓ ,  ╬ћРѓЂРЅѕ╬ћРѓѓ , lРѕѕ╬ЊРѓѓ with update-РЅѕр┤▒ ╬ЊРѓЂРЅѕ╬ЊРѓѓ uр┤▒
... | ╬ЊРѓѓ' , uр┤▒' = SS.Step (DeepDupРѓѓ {LРіЉl = LРіЉl} ¤ёРѕѕ¤ђ LРѕѕ╬ЊРѓѓ tРѕѕ╬ћРѓѓр┤И lРѕѕ╬ЊРѓѓ uр┤▒')

redex-РЅѕ : Рѕђ {l ls ¤ё} {lРіЉA : l РіЉ A} {pРѓЂ pРѓѓ : Program l ls ¤ё} {{vРѓЂ : validр┤Й pРѓЂ}} {{vРѓѓ : validр┤Й pРѓѓ}} ->
            pРѓЂ РЅѕр┤ЙРЪе (yes lРіЉA) РЪЕ pРѓѓ -> Redexр┤Й pРѓЂ  -> Redexр┤Й pРѓѓ
redex-РЅѕ {lРіЉA = lРіЉA} {{vРѓЂ}} {{vРѓѓ}} (L.isРЅѕр┤Й MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ (L.Kрхђ╦б G.РЪе eрхђ , e╦б РЪЕ G.РЪе eрхђРѓЂ , e╦бРѓЂ РЪЕ)) (Step step)
  = redexРЪ╝ {lРіЉA = lРіЉA} vРѓЂ vРѓѓ MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ L.РЪе eрхђ , eрхђРѓЂ РЪЕ (L.K╦б e╦б e╦бРѓЂ) step
redex-РЅѕ (L.isРЅѕр┤Й MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ (L.Kрхђ╦б G.РѕЎр┤И G.РѕЎр┤И)) (SS.Step x) = SS.Step SS.Hole

--------------------------------------------------------------------------------

┬гfork-РЅѕ : Рѕђ {¤ђ ¤ё} {tРѓЂ tРѓѓ : Term ¤ђ ¤ё} -> tРѓЂ РЅѕрхђ tРѓѓ -> ┬г (IsFork tРѓЂ) -> ┬г (IsFork tРѓѓ)
┬гfork-РЅѕ tРѓЂРЅѕtРѓѓ = contrapositive (fork-РЅѕ (sym-РЅѕрхђ tРѓЂРЅѕtРѓѓ))

┬гIsForkTS-РЅѕ : Рѕђ {¤ё l} {TsРѓЂ TsРѓѓ : TSРѕЎ l ¤ё} {lРіЉA : l РіЉ A} -> TsРѓЂ РЅѕрхђ╦бРЪе yes lРіЉA РЪЕ TsРѓѓ -> ┬г (IsForkTS TsРѓЂ) -> ┬г (IsForkTS TsРѓѓ)
┬гIsForkTS-РЅѕ TsРѓЂРЅѕTsРѓѓ = contrapositive (forkTS-РЅѕ (sym-РЅѕрхђ╦б TsРѓЂРЅѕTsРѓѓ))

┬гdone-РЅѕ : Рѕђ {l ¤ё} {lРіЉA : l РіЉ A} {TsРѓЂ TsРѓѓ : TSРѕЎ l ¤ё} -> TsРѓЂ РЅѕрхђ╦бРЪе yes lРіЉA РЪЕ TsРѓѓ -> ┬г (IsDoneTS TsРѓЂ) -> ┬г (IsDoneTS TsРѓѓ)
┬гdone-РЅѕ TsРѓЂРЅѕTsРѓѓ  = contrapositive (done-РЅѕ (sym-РЅѕрхђ╦б TsРѓЂРЅѕTsРѓѓ))

┬гredex-РЅѕ : Рѕђ {l ls ¤ё} {lРіЉA : l РіЉ A} {pРѓЂ pРѓѓ : Program l ls ¤ё} {{vРѓЂ : validр┤Й pРѓЂ}} {{vРѓѓ : validр┤Й pРѓѓ}} ->
             pРѓЂ РЅѕр┤ЙРЪе (yes lРіЉA) РЪЕ pРѓѓ -> ┬г (Redexр┤Й pРѓЂ)  -> ┬г (Redexр┤Й pРѓѓ)
┬гredex-РЅѕ pРѓЂРЅѕpРѓѓ = contrapositive (redex-РЅѕ (sym-РЅѕр┤Й pРѓЂРЅѕpРѓѓ))

-- we get low-equivalence using pini
-- postulate redex-РЅѕ : Рѕђ {l ls ¤ё} {pРѓЂ pРѓЂ' pРѓѓ : Program l ls ¤ё} -> (lРіЉA : l РіЉ A) -> pРѓЂ РЅѕр┤ЙРЪе (yes lРіЉA) РЪЕ pРѓѓ -> pРѓЂ РЪ╝ pРѓЂ' ->
--             РѕЃ (╬╗ pРѓѓ' -> (pРѓЂ' РЅѕр┤ЙРЪе yes lРіЉA РЪЕ pРѓѓ') ├Ќ (pРѓѓ РЪ╝ pРѓѓ'))

open _РЅѕр┤ЙРЪе_РЪЕ_

stuck-РЅѕ : Рѕђ {l ls ¤ё} {pРѓЂ pРѓѓ : Program l ls ¤ё} {lРіЉA : l РіЉ A} {{vРѓЂ : validр┤Й pРѓЂ}} {{vРѓѓ : validр┤Й pРѓѓ}} ->
            pРѓЂ РЅѕр┤ЙРЪе (yes lРіЉA) РЪЕ pРѓѓ -> Stuckр┤Й pРѓЂ -> Stuckр┤Й pРѓѓ
stuck-РЅѕ {pРѓЂ = SC.mkр┤Й MsРѓЂ ╬ЊРѓЂ TsРѓЂ} {SC.mkр┤Й MsРѓѓ ╬ЊРѓѓ TsРѓѓ} pРѓЂРЅѕpРѓѓ (┬гdone , ┬гredex , ┬гfork)
  = ┬гdone-РЅѕ (TsРѓЂРЅѕTsРѓѓ pРѓЂРЅѕpРѓѓ) ┬гdone , ┬гredex-РЅѕ pРѓЂРЅѕpРѓѓ ┬гredex  , ┬гIsForkTS-РЅѕ (TsРѓЂРЅѕTsРѓѓ pРѓЂРЅѕpРѓѓ) ┬гfork
