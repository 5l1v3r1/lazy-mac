import Lattice as L

module Sequential.Security.Lemmas2 (­ЮЊЏ : L.Lattice) (A : L.Label ­ЮЊЏ) where

open import Types ­ЮЊЏ
open import Sequential.Security.Erasure ­ЮЊЏ A as SE
import Sequential.Security.Graph as G
open G ­ЮЊЏ A

--------------------------------------------------------------------------------
-- Temporarily side-step bug #2245

import Sequential.Calculus as SC
open SC ­ЮЊЏ

--------------------------------------------------------------------------------

import Sequential.Semantics as SS
open SS ­ЮЊЏ

open import Sequential.Security.LowEq ­ЮЊЏ A renaming (РЪе_,_,_РЪЕ to isРЅѕр┤Й ; РЪе_,_РЪЕ to isРЅѕрхђ)

open import Sequential.Valid ­ЮЊЏ

open import Relation.Binary.PropositionalEquality
open import Data.Empty
open import Relation.Nullary


val-РЅѕ : Рѕђ {¤ђ ¤ё} {tРѓЂ tРѓѓ : Term ¤ђ ¤ё} -> tРѓЂ РЅѕрхђ tРѓѓ -> Value tРѓЂ -> Value tРѓѓ
val-РЅѕ (isРЅѕрхђ eРѓЂ eРѓѓ) val = valр┤▒ eРѓѓ (valРѓЂр┤▒ eРѓЂ val)

done-РЅѕ : Рѕђ {l ¤ё} {TsРѓЂ TsРѓѓ : TSРѕЎ l ¤ё} {lРіЉA : l РіЉ A} -> TsРѓЂ РЅѕрхђ╦бРЪе (yes lРіЉA) РЪЕ TsРѓѓ -> IsDoneTS TsРѓЂ -> IsDoneTS TsРѓѓ
done-РЅѕ (Kрхђ╦б G.РЪе xРѓЃ , G.[] РЪЕ G.РЪе xРѓЂ , G.[] РЪЕ) (SS.isDoneTS isVal) = isDoneTS (val-РЅѕ (isРЅѕрхђ xРѓЃ  xРѓЂ) isVal)

fork-РЅѕ : Рѕђ {¤ђ ¤ё} {tРѓЂ tРѓѓ : Term ¤ђ ¤ё} -> tРѓЂ РЅѕрхђ tРѓѓ -> (IsFork tРѓЂ) -> (IsFork tРѓѓ)
fork-РЅѕ tРѓЂРЅѕtРѓѓ isFork = fork-РЅѕ' isFork tРѓЂРЅѕtРѓѓ
  where -- Pattern matching in the original order hits a bug.
        fork-РЅѕ' : Рѕђ {¤ђ ¤ё} {tРѓЂ tРѓѓ : Term ¤ђ ¤ё} -> (IsFork tРѓЂ) -> tРѓЂ РЅѕрхђ tРѓѓ -> (IsFork tРѓѓ)
        fork-РЅѕ' (SC.Fork p t) (isРЅѕрхђ (G.fork .p hРіЉA eРѓЂ) (G.fork .p hРіЉAРѓЂ eРѓѓ) ) = SC.Fork p _
        fork-РЅѕ' (SC.Fork p t) (isРЅѕрхђ (G.fork' .p hРІцA eРѓЂ) (G.fork' .p hРІцAРѓЂ eРѓѓ) ) = SC.Fork p _
        fork-РЅѕ' (SC.Fork p t) (isРЅѕрхђ (G.fork' .p hРІцA eРѓЂ) (G.forkРѕЎ .p eРѓѓ) ) = SC.ForkРѕЎ p _
        fork-РЅѕ' (SC.ForkРѕЎ p t) (isРЅѕрхђ (G.forkРѕЎ .p eРѓЂ) (G.fork' .p hРІцA eРѓѓ) ) = SC.Fork p _
        fork-РЅѕ' (SC.ForkРѕЎ p t) (isРЅѕрхђ (G.forkРѕЎ .p eРѓЂ) (G.forkРѕЎ .p eРѓѓ) ) = SC.ForkРѕЎ p _

forkTS-РЅѕ : Рѕђ {l ¤ё} {TsРѓЂ TsРѓѓ : TSРѕЎ l ¤ё} {lРіЉA : l РіЉ A} -> TsРѓЂ РЅѕрхђ╦бРЪе yes lРіЉA РЪЕ TsРѓѓ -> (IsForkTS TsРѓЂ) -> (IsForkTS TsРѓѓ)
forkTS-РЅѕ (Kрхђ╦б G.РЪе eрхђРѓЂ , e╦бРѓЂ РЪЕ G.РЪе eрхђ , e╦б РЪЕ) (SS.isForkTS isFork) = SS.isForkTS (fork-РЅѕ (isРЅѕрхђ eрхђРѓЂ eрхђ) isFork)

open import Data.Product

import Sequential.Calculus renaming (РЪе_,_,_РЪЕ to mkр┤Й ; РЪе_,_РЪЕ to mkрхђ)

redexРЪ╝ : Рѕђ {ls l ¤ђ ¤ё ¤ё'} {MsРѓЂ MsРѓѓ : Memories ls} {╬ЊРѓЂ ╬ЊРѓѓ : Heaps ls} {pРѓЂ' : Program l ls ¤ё}
             {tРѓЂ tРѓѓ : Term ¤ђ ¤ё'} {SРѓЂ SРѓѓ : Stack _ _ _ _} ->
             let pРѓЂ = SC.mkр┤Й MsРѓЂ  ╬ЊРѓЂ (SC.mkрхђ tРѓЂ  SРѓЂ)
                 pРѓѓ = SC.mkр┤Й MsРѓѓ  ╬ЊРѓѓ (SC.mkрхђ tРѓѓ SРѓѓ) in
             validр┤Й pРѓЂ -> validр┤Й pРѓѓ ->  MsРѓЂ map-РЅѕр┤╣ MsРѓѓ -> ╬ЊРѓЂ map-РЅѕр┤┤ ╬ЊРѓѓ -> tРѓЂ РЅѕрхђ tРѓѓ -> SРѓЂ РЅѕ╦б SРѓѓ ->
             pРѓЂ РЪ╝ pРѓЂ' -> Redexр┤Й pРѓѓ
redexРЪ╝ vРѓЂ vРѓѓ MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ tРѓЂРЅѕtРѓѓ SРѓЂРЅѕSРѓѓ (SS.Pure lРѕѕ╬Њ step uр┤╣) = {!!}
redexРЪ╝ vРѓЂ vРѓѓ MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ tРѓЂРЅѕtРѓѓ SРѓЂРЅѕSРѓѓ (SS.New HРѕѕMs uр┤╣) = {!!}
redexРЪ╝ vРѓЂ vРѓѓ MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ tРѓЂРЅѕtРѓѓ SРѓЂРЅѕSРѓѓ SS.NewРѕЎ = {!!}
redexРЪ╝ vРѓЂ vРѓѓ MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ tРѓЂРЅѕtРѓѓ SРѓЂРЅѕSРѓѓ (SS.WriteРѓѓ HРѕѕMs uр┤╣ u╦б) = {!!}
redexРЪ╝ vРѓЂ vРѓѓ MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ tРѓЂРЅѕtРѓѓ SРѓЂРЅѕSРѓѓ (SS.Writeр┤░Рѓѓ HРѕѕMs uр┤╣ u╦б) = {!!}
redexРЪ╝ vРѓЂ vРѓѓ MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ tРѓЂРЅѕtРѓѓ SРѓЂРЅѕSРѓѓ SS.WriteРѕЎРѓѓ = {!!}
redexРЪ╝ vРѓЂ vРѓѓ MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ tРѓЂРЅѕtРѓѓ SРѓЂРЅѕSРѓѓ (SS.ReadРѓѓ lРѕѕ╬Њ nРѕѕM) = {!!}
redexРЪ╝ vРѓЂ vРѓѓ MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ tРѓЂРЅѕtРѓѓ SРѓЂРЅѕSРѓѓ (SS.Readр┤░Рѓѓ LРѕѕMs nРѕѕM) = {!!}
redexРЪ╝ vРѓЂ vРѓѓ MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ tРѓЂРЅѕtРѓѓ SРѓЂРЅѕSРѓѓ (SS.DeepDupРѓЂ ┬гvar lРѕѕ╬Њ uр┤▒) = {!!}
redexРЪ╝ vРѓЂ vРѓѓ MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ tРѓЂРЅѕtРѓѓ SРѓЂРЅѕSРѓѓ (SS.DeepDupРѓѓ ¤ёРѕѕ¤ђ LРѕѕ╬Њ tРѕѕ╬ћ lРѕѕ╬Њ uр┤▒) = {!!}

redex-РЅѕ : Рѕђ {l ls ¤ё} {lРіЉA : l РіЉ A} {pРѓЂ pРѓѓ : Program l ls ¤ё} {{vРѓЂ : validр┤Й pРѓЂ}} {{vРѓѓ : validр┤Й pРѓѓ}} ->
            pРѓЂ РЅѕр┤ЙРЪе (yes lРіЉA) РЪЕ pРѓѓ -> Redexр┤Й pРѓЂ  -> Redexр┤Й pРѓѓ
redex-РЅѕ {{vРѓЂ}} {{vРѓѓ}} (isРЅѕр┤Й  MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ (Kрхђ╦б G.РЪе eрхђ , e╦б РЪЕ G.РЪе eрхђРѓЂ , e╦бРѓЂ РЪЕ)) (SS.Step step)
  = redexРЪ╝ vРѓЂ vРѓѓ MsРѓЂРЅѕMsРѓѓ ╬ЊРѓЂРЅѕ╬ЊРѓѓ (isРЅѕрхђ eрхђ eрхђРѓЂ) (K╦б e╦б e╦бРѓЂ) step
redex-РЅѕ (isРЅѕр┤Й MsРѓЂРЅѕMsРѓѓ  ╬ЊРѓЂРЅѕ╬ЊРѓѓ (Kрхђ╦б G.РѕЎр┤И G.РѕЎр┤И)) (SS.Step step) = SS.Step SS.Hole

--------------------------------------------------------------------------------

┬гfork-РЅѕ : Рѕђ {¤ђ ¤ё} {tРѓЂ tРѓѓ : Term ¤ђ ¤ё} -> tРѓЂ РЅѕрхђ tРѓѓ -> ┬г (IsFork tРѓЂ) -> ┬г (IsFork tРѓѓ)
┬гfork-РЅѕ tРѓЂРЅѕtРѓѓ = contrapositive (fork-РЅѕ (sym-РЅѕрхђ tРѓЂРЅѕtРѓѓ))

┬гIsForkTS-РЅѕ : Рѕђ {¤ё l} {TsРѓЂ TsРѓѓ : TSРѕЎ l ¤ё} {lРіЉA : l РіЉ A} -> TsРѓЂ РЅѕрхђ╦бРЪе yes lРіЉA РЪЕ TsРѓѓ -> ┬г (IsForkTS TsРѓЂ) -> ┬г (IsForkTS TsРѓѓ)
┬гIsForkTS-РЅѕ TsРѓЂРЅѕTsРѓѓ = contrapositive (forkTS-РЅѕ (sym-РЅѕрхђ╦б TsРѓЂРЅѕTsРѓѓ))

┬гdone-РЅѕ : Рѕђ {l ¤ё} {lРіЉA : l РіЉ A} {TsРѓЂ TsРѓѓ : TSРѕЎ l ¤ё} -> TsРѓЂ РЅѕрхђ╦бРЪе yes lРіЉA РЪЕ TsРѓѓ -> ┬г (IsDoneTS TsРѓЂ) -> ┬г (IsDoneTS TsРѓѓ)
┬гdone-РЅѕ TsРѓЂРЅѕTsРѓѓ  = contrapositive (done-РЅѕ (sym-РЅѕрхђ╦б TsРѓЂРЅѕTsРѓѓ))

┬гredex-РЅѕ : Рѕђ {l ls ¤ё} {lРіЉA : l РіЉ A} {pРѓЂ pРѓѓ : Program l ls ¤ё} {{vРѓЂ : validр┤Й pРѓЂ}} {{vРѓѓ : validр┤Й pРѓѓ}} ->
             pРѓЂ РЅѕр┤ЙРЪе (yes lРіЉA) РЪЕ pРѓѓ -> ┬г (Redexр┤Й pРѓЂ)  -> ┬г (Redexр┤Й pРѓѓ)
┬гredex-РЅѕ pРѓЂРЅѕpРѓѓ = contrapositive (redex-РЅѕ (sym-РЅѕр┤Й pРѓЂРЅѕpРѓѓ))

-- we get low-equivalence using pini
-- postulate redex-РЅѕ : Рѕђ {l ls ¤ё} {pРѓЂ pРѓЂ' pРѓѓ : Program l ls ¤ё} -> (lРіЉA : l РіЉ A) -> pРѓЂ РЅѕр┤ЙРЪе (yes lРіЉA) РЪЕ pРѓѓ -> pРѓЂ РЪ╝ pРѓЂ' ->
--             РѕЃ (╬╗ pРѓѓ' -> (pРѓЂ' РЅѕр┤ЙРЪе yes lРіЉA РЪЕ pРѓѓ') ├Ќ (pРѓѓ РЪ╝ pРѓѓ'))

open _РЅѕр┤ЙРЪе_РЪЕ_

stuck-РЅѕ : Рѕђ {l ls ¤ё} {pРѓЂ pРѓѓ : Program l ls ¤ё} {lРіЉA : l РіЉ A} {{vРѓЂ : validр┤Й pРѓЂ}} {{vРѓѓ : validр┤Й pРѓѓ}} ->
            pРѓЂ РЅѕр┤ЙРЪе (yes lРіЉA) РЪЕ pРѓѓ -> Stuckр┤Й pРѓЂ -> Stuckр┤Й pРѓѓ
stuck-РЅѕ {pРѓЂ = SC.mkр┤Й MsРѓЂ ╬ЊРѓЂ TsРѓЂ} {SC.mkр┤Й MsРѓѓ ╬ЊРѓѓ TsРѓѓ} pРѓЂРЅѕpРѓѓ (┬гdone , ┬гredex , ┬гfork)
  = ┬гdone-РЅѕ (TsРѓЂРЅѕTsРѓѓ pРѓЂРЅѕpРѓѓ) ┬гdone , ┬гredex-РЅѕ pРѓЂРЅѕpРѓѓ ┬гredex  , ┬гIsForkTS-РЅѕ (TsРѓЂРЅѕTsРѓѓ pРѓЂРЅѕpРѓѓ) ┬гfork
