import Lattice as L
import Scheduler as S
open import Scheduler.Security

module Concurrent.Lemmas {­ЮЊЏ : L.Lattice} {­ЮЊб : S.Scheduler ­ЮЊЏ} (A : L.Label ­ЮЊЏ) (­ЮЊЮ : NI╦б ­ЮЊЏ A ­ЮЊб) where

open import Types ­ЮЊЏ
open import Data.Product using (РѕЃ ; _├Ќ_ ; projРѓЂ ; projРѓѓ )
import Data.Product as P

open import Relation.Nullary
open import Relation.Binary.PropositionalEquality
--------------------------------------------------------------------------------
-- Temporarily side-step bug #2245

import Sequential.Calculus as SC
open SC ­ЮЊЏ


import Concurrent.Calculus as C
open C ­ЮЊЏ ­ЮЊб
-- open import Concurrent.Calculus ­ЮЊЏ ­ЮЊб

import Concurrent.Semantics as CS
open CS ­ЮЊЏ ­ЮЊб
-- open import Concurrent.Semantics ­ЮЊЏ ­ЮЊб public

open import Sequential.Erasure ­ЮЊЏ A as SE hiding (╬хрхђ ; ╬хр┤Й ; ╬х╦б)
open import Sequential.PINI ­ЮЊЏ A using (stepр┤И ; stepр┤┤-РЅЁр┤╣ ; stepр┤┤-РЅЁр┤┤)

--------------------------------------------------------------------------------

open Scheduler.Security.NI╦б ­ЮЊЏ A ­ЮЊЮ renaming (State to State╦б)
open import Concurrent.Erasure A ­ЮЊЮ

open import Concurrent.LowEq A ­ЮЊЮ as LРѓЂ

open import Data.Product renaming (_,_ to РЪе_,_РЪЕ)

-- Square
╬хр┤│-simр┤И : Рѕђ {l n ls} {gРѓЂ gРѓѓ : Global ls} -> l РіЉ A ->  РЪе l , n РЪЕ Ріб gРѓЂ Рєф gРѓѓ -> РЪе l , n РЪЕ Ріб (╬хр┤│ gРѓЂ) Рєф (╬хр┤│ gРѓѓ)
╬хр┤│-simр┤И lРіЉA (CS.step-РѕЁ lРѕѕP tРѕѕT ┬гfork step sch uрхђ uр┤Й)
  = step-РѕЁ (memberр┤Й lРіЉA lРѕѕP) (memberрхђ lРіЉA tРѕѕT) (╬хрхђ╦б┬гIsForkTS lРіЉA ┬гfork) (stepр┤И lРіЉA step) (╬х╦б-simр┤И lРіЉA sch) (updateрхђ lРіЉA uрхђ) (updateр┤Й lРіЉA uр┤Й)
╬хр┤│-simр┤И lРіЉA (CS.fork {H = H} {tр┤┤ = tр┤┤} {Tр┤┤ = Tр┤┤} lРѕѕP tРѕѕT uрхђ uРѓЂр┤Й HРѕѕPРѓѓ sch uРѓѓр┤Й) with memberрхђ lРіЉA tРѕѕT | ╬х╦б-simр┤И lРіЉA sch
... | tРѕѕT' | sch' with H РіЉ? A
... | yes HРіЉA rewrite lengthрхђ-╬х-РЅА HРіЉA Tр┤┤
    = fork (memberр┤Й lРіЉA lРѕѕP) tРѕѕT' (updateрхђ lРіЉA uрхђ) (updateр┤Й lРіЉA uРѓЂр┤Й) (memberр┤Й HРіЉA HРѕѕPРѓѓ) sch' (updateр┤Й-Рќ╗ Tр┤┤ (РЪе tр┤┤ , [] РЪЕ) HРіЉA uРѓѓр┤Й)
╬хр┤│-simр┤И lРіЉA (CS.fork {tр┤┤ = tр┤┤} {PРѓѓ = PРѓѓ} {Tр┤┤ = Tр┤┤} lРѕѕP tРѕѕT uрхђ uРѓЂр┤Й HРѕѕPРѓѓ sch uРѓѓр┤Й) | tРѕѕT' | sch' | no HРІцA
  rewrite newр┤ЙРѕЎ Tр┤┤ РЪе tр┤┤ , [] РЪЕ HРІцA uРѓѓр┤Й = forkРѕЎ {PРѓѓ = map-╬хр┤Й PРѓѓ} (memberр┤Й lРіЉA lРѕѕP) tРѕѕT' (updateрхђ lРіЉA uрхђ) (updateр┤Й lРіЉA uРѓЂр┤Й) sch'
╬хр┤│-simр┤И lРіЉA (CS.forkРѕЎ lРѕѕP tРѕѕT uрхђ uРѓЂр┤Й sch)
  = forkРѕЎ (memberр┤Й lРіЉA lРѕѕP) (memberрхђ lРіЉA tРѕѕT) (updateрхђ lРіЉA uрхђ) (updateр┤Й lРіЉA uРѓЂр┤Й) (╬х╦б-simр┤И lРіЉA sch)
╬хр┤│-simр┤И lРіЉA (CS.skip lРѕѕP tРѕѕT stuck sch) = skip (memberр┤Й lРіЉA lРѕѕP) (memberрхђ lРіЉA tРѕѕT) (stuck-╬х lРіЉA stuck) (╬х╦б-simр┤И lРіЉA sch)
╬хр┤│-simр┤И lРіЉA (CS.done lРѕѕP tРѕѕT don sch) = done (memberр┤Й lРіЉA lРѕѕP) (memberрхђ lРіЉA tРѕѕT) (done-╬х lРіЉA don) (╬х╦б-simр┤И lРіЉA sch)


-- Triangle
╬хр┤│-simр┤┤ : Рѕђ {H n ls} {gРѓЂ gРѓѓ : Global ls} -> H РІц A -> РЪе H , n РЪЕ Ріб gРѓЂ Рєф gРѓѓ -> gРѓЂ РЅЁр┤│ gРѓѓ
╬хр┤│-simр┤┤ HРІцA (CS.step-РѕЁ lРѕѕP tРѕѕT ┬гfork step sch uрхђ uр┤Й)
  = lift-╬хр┤│ (Рїъ ╬х╦б-simр┤┤ HРІцA sch РїЪ) (stepр┤┤-РЅЁр┤╣ HРІцA step) (stepр┤┤-РЅЁр┤┤ HРІцA step) (updateр┤ЙРѕЎ HРІцA uр┤Й)
╬хр┤│-simр┤┤ HРІцA (CS.fork {lРіЉH = LРіЉH} lРѕѕP tРѕѕT uрхђ uРѓЂр┤Й HРѕѕPРѓѓ sch uРѓѓр┤Й)
  = lift-╬хр┤│ (Рїъ ╬х╦б-simр┤┤ HРІцA sch РїЪ) refl refl (trans (updateр┤ЙРѕЎ HРІцA uРѓЂр┤Й) (updateр┤ЙРѕЎ (trans-РІц LРіЉH HРІцA) uРѓѓр┤Й))
╬хр┤│-simр┤┤ HРІцA (CS.forkРѕЎ lРѕѕP tРѕѕT uрхђ uРѓЂр┤Й sch) = lift-╬хр┤│ (Рїъ ╬х╦б-simр┤┤ HРІцA sch РїЪ) refl refl (updateр┤ЙРѕЎ HРІцA uРѓЂр┤Й)
╬хр┤│-simр┤┤ HРІцA (CS.skip lРѕѕP tРѕѕT stuck sch) = lift-╬хр┤│ (Рїъ ╬х╦б-simр┤┤ HРІцA sch РїЪ) refl refl refl
╬хр┤│-simр┤┤ HРІцA (CS.done lРѕѕP tРѕѕT don sch) = lift-╬хр┤│ (Рїъ ╬х╦б-simр┤┤ HРІцA sch РїЪ) refl refl refl


--------------------------------------------------------------------------------

-- TODO move to Concurrent.LowEq ?

open import Function

import Sequential.LowEq  ­ЮЊЏ A as LРѓѓ renaming (_РЅѕрхђ╦бРЪе_РЪЕ_ to _РЅѕрхђр┤┤РЪе_РЪЕ_ ; Рїъ_РїЪрхђ╦б to Рїъ_РїЪрхђр┤┤ ; Рїю_РїЮрхђ╦б to Рїю_РїЮрхђр┤┤)
open LРѓѓ

open import Concurrent.Graph A ­ЮЊЮ

memberр┤Й-РЅѕ : Рѕђ {ls L} {TРѓЂ : Pool L} {PРѓЂ PРѓѓ : Pools ls} -> (x : Dec (L РіЉ A)) -> L Рєд TРѓЂ Рѕѕр┤Й PРѓЂ -> PРѓЂ LРѓЂ.map-РЅѕр┤Й PРѓѓ -> РѕЃ (╬╗ TРѓѓ -> TРѓЂ LРѓЂ.РЅѕр┤ЙРЪе x РЪЕ TРѓѓ ├Ќ L Рєд TРѓѓ Рѕѕр┤Й PРѓѓ)
memberр┤Й-РЅѕ x C.here (K-mapр┤Й (eРѓЂ РЌЁ eРѓѓ) (eРѓЃ РЌЁ eРѓё)) = РЪе _ , РЪе ext-РЅѕр┤Й (Kр┤Й eРѓЂ eРѓЃ) x , here РЪЕ РЪЕ
memberр┤Й-РЅѕ x (C.there LРѕѕP) (K-mapр┤Й (xРѓЂ РЌЁ xРѓѓ) (xРѓЃ РЌЁ xРѓё)) = P.map id (P.map id there) (memberр┤Й-РЅѕ x LРѕѕP (K-mapр┤Й xРѓѓ xРѓё))

memberрхђ-РЅѕ : Рѕђ {n L} {TРѓЂ TРѓѓ : Pool L} {tРѓЂ : Thread L} -> (LРіЉA : L РіЉ A) -> n Рєд tРѓЂ Рѕѕрхђ TРѓЂ -> TРѓЂ LРѓЂ.РЅѕр┤ЙРЪе yes LРіЉA РЪЕ TРѓѓ
              -> РѕЃ (╬╗ tРѓѓ Рєњ (tРѓЂ РЅѕрхђр┤┤РЪе yes LРіЉA РЪЕ tРѓѓ) ├Ќ n Рєд tРѓѓ Рѕѕрхђ TРѓѓ)
memberрхђ-РЅѕ LРіЉA C.here (Kр┤Й (Mapрхђ (e РЌЁ eРѓЂ)) (Mapрхђ (e' РЌЁ eРѓЂ'))) = РЪе _ , РЪе (Kрхђ╦б e e') , here РЪЕ РЪЕ
memberрхђ-РЅѕ LРіЉA (C.there nРѕѕT) (Kр┤Й (Mapрхђ (e РЌЁ eРѓЂ)) (Mapрхђ (e' РЌЁ eРѓЂ'))) = P.map id (P.map id there) (memberрхђ-РЅѕ LРіЉA nРѕѕT (Kр┤Й (Mapрхђ eРѓЂ) (Mapрхђ eРѓЂ')))

updateрхђ-РЅѕ : Рѕђ {n L} {TРѓЂ TРѓЂ' TРѓѓ : Pool L} {tРѓЂ tРѓѓ : Thread L} -> (LРіЉA : L РіЉ A) -> TРѓЂ' РЅћ TРѓЂ [ n Рєд tРѓЂ ]рхђ ->
            TРѓЂ LРѓЂ.РЅѕр┤ЙРЪе yes LРіЉA РЪЕ TРѓѓ -> tРѓЂ РЅѕрхђр┤┤РЪе yes LРіЉA РЪЕ tРѓѓ -> РѕЃ (╬╗ TРѓѓ' Рєњ TРѓЂ' LРѓЂ.РЅѕр┤ЙРЪе yes LРіЉA РЪЕ TРѓѓ'  ├Ќ TРѓѓ' РЅћ TРѓѓ [ n Рєд tРѓѓ ]рхђ)
updateрхђ-РЅѕ LРіЉA C.here (Kр┤Й (Mapрхђ (_ РЌЁ eРѓЂ)) (Mapрхђ (_ РЌЁ eРѓЂ'))) (Kрхђ╦б e e') = РЪе _ , РЪе (Kр┤Й (Mapрхђ (e РЌЁ eРѓЂ)) (Mapрхђ (e' РЌЁ eРѓЂ'))) , here РЪЕ РЪЕ
updateрхђ-РЅѕ LРіЉA (C.there u) (Kр┤Й (Mapрхђ (e РЌЁ eРѓЂ)) (Mapрхђ (e' РЌЁ eРѓЂ'))) eqРѓѓ
  = P.map (_РЌЁ_ _) (P.map (consРЅѕр┤Й (Kрхђ╦б e e')) there) (updateрхђ-РЅѕ LРіЉA u (Kр┤Й (Mapрхђ eРѓЂ) (Mapрхђ eРѓЂ')) eqРѓѓ)

updateр┤Й-РЅѕ : Рѕђ {l ls} {PРѓЂ PРѓѓ PРѓЂ' : Pools ls} {TРѓЂ TРѓѓ : Pool l}  (x : Dec (l РіЉ A)) -> PРѓЂ' РЅћ PРѓЂ [ l Рєд TРѓЂ ]р┤Й ->
             PРѓЂ map-РЅѕр┤Й PРѓѓ -> TРѓЂ LРѓЂ.РЅѕр┤ЙРЪе x РЪЕ TРѓѓ -> РѕЃ (╬╗ PРѓѓ' Рєњ PРѓЂ' map-РЅѕр┤Й PРѓѓ' ├Ќ PРѓѓ' РЅћ PРѓѓ [ l Рєд TРѓѓ ]р┤Й)
updateр┤Й-РЅѕ {l} x C.here (K-mapр┤Й (_ РЌЁ eРѓЂ) (_ РЌЁ eРѓЂ')) (Kр┤Й e e') = РЪе _ , РЪе K-mapр┤Й (ext-╬хр┤Й e (l РіЉ? A) РЌЁ eРѓЂ) (ext-╬хр┤Й e' (l РіЉ? A) РЌЁ eРѓЂ') , here РЪЕ РЪЕ
updateр┤Й-РЅѕ x (C.there uРѓЂ) (K-mapр┤Й (e РЌЁ eРѓЂ) (e' РЌЁ eРѓЂ')) eqРѓѓ = P.map (_РЌЁ_ _) (P.map (cons-map-РЅѕрхђ (Kр┤Й e e')) there) (updateр┤Й-РЅѕ x uРѓЂ (K-mapр┤Й eРѓЂ eРѓЂ') eqРѓѓ)

-- lengthрхђ-РЅѕ : Рѕђ {l} {TРѓЂ TРѓѓ : Pool l} -> (lРіЉA : l РіЉ A) -> TРѓЂ LРѓЂ.РЅѕр┤ЙРЪе yes lРіЉA РЪЕ TРѓѓ -> lengthрхђ TРѓЂ РЅА lengthрхђ TРѓѓ
-- lengthрхђ-РЅѕ {_} {TРѓЂ} {TРѓѓ} lРіЉA TРѓЂРЅѕTРѓѓ rewrite lengthрхђ-╬х-РЅА lРіЉA TРѓЂ | lengthрхђ-╬х-РЅА lРіЉA TРѓѓ = {!!} -- | Рїъ TРѓЂРЅѕTРѓѓ РїЪрхђ = refl

-- newрхђ-РЅѕ : Рѕђ {l} {TРѓЂ TРѓѓ : Pool l} {tРѓЂ tРѓѓ : Thread l} {x : Dec _} -> TРѓЂ LРѓЂ.РЅѕр┤ЙРЪе x РЪЕ TРѓѓ -> tРѓЂ РЅѕрхђр┤┤РЪе x РЪЕ tРѓѓ -> (TРѓЂ Рќ╗ tРѓЂ) LРѓЂ.РЅѕр┤ЙРЪе x РЪЕ (TРѓѓ Рќ╗ tРѓѓ)
-- newрхђ-РЅѕ TРѓЂРЅѕTРѓѓ tРѓЂРЅѕtРѓѓ = {!!}


-- TODO move to Sequential LowEq?

-- import Sequential.Graph ­ЮЊЏ A as G
-- open import Sequential.Semantics ­ЮЊЏ

-- val-РЅѕ : Рѕђ {¤ђ ¤ё} {tРѓЂ tРѓѓ : Term ¤ђ ¤ё} -> tРѓЂ LРѓѓ.РЅѕрхђ tРѓѓ -> Value tРѓЂ -> Value tРѓѓ
-- val-РЅѕ РЪе eРѓЂ , eРѓѓ РЪЕ val = {!!} -- valр┤▒ eРѓѓ (valРѓЂр┤▒ eРѓЂ val)

-- stuck-РЅѕ : Рѕђ {l ls ¤ё} {pРѓЂ pРѓѓ : Program l ls ¤ё} (lРіЉA : l РіЉ A) -> pРѓЂ LРѓѓ.РЅѕр┤ЙРЪе (yes lРіЉA) РЪЕ pРѓѓ -> Stuckр┤Й pРѓЂ -> Stuckр┤Й pРѓѓ
-- stuck-РЅѕ lРіЉA eq stuckРѓЂ = {!!}

-- ┬гfork-РЅѕ : Рѕђ {¤ђ ¤ё} {tРѓЂ tРѓѓ : Term ¤ђ ¤ё} -> tРѓЂ LРѓѓ.РЅѕрхђ tРѓѓ -> ┬г (IsFork tРѓЂ) -> ┬г (IsFork tРѓѓ)
-- ┬гfork-РЅѕ РЪе G.unId eРѓЂ , () РЪЕ ┬гforkРѓЂ (SC.Fork p tРѓЂ)
-- ┬гfork-РЅѕ РЪе G.Var ¤ёРѕѕ¤ђ , () РЪЕ ┬гforkРѓЂ (SC.Fork p t)
-- ┬гfork-РЅѕ РЪе G.App eРѓѓ eРѓЂ , () РЪЕ ┬гforkРѓЂ (SC.Fork p t)
-- ┬гfork-РЅѕ РЪе G.If eРѓЂ Then eРѓѓ Else eРѓЃ , () РЪЕ ┬гforkРѓЂ (SC.Fork p t)
-- ┬гfork-РЅѕ РЪе G.Return eРѓЂ , () РЪЕ ┬гforkРѓЂ (SC.Fork p tРѓЂ)
-- ┬гfork-РЅѕ РЪе eРѓЂ G.>>= eРѓѓ , () РЪЕ ┬гforkРѓЂ (SC.Fork p t)
-- ┬гfork-РЅѕ РЪе G.Mac eРѓЂ , () РЪЕ ┬гforkРѓЂ (SC.Fork p tРѓЂ)
-- ┬гfork-РЅѕ РЪе G.unlabel lРіЉh eРѓЂ , () РЪЕ ┬гforkРѓЂ (SC.Fork p tРѓЂ)
-- ┬гfork-РЅѕ РЪе G.read lРіЉh eРѓЂ , () РЪЕ ┬гforkРѓЂ (SC.Fork p tРѓЂ)
-- ┬гfork-РЅѕ РЪе G.write lРіЉh hРіЉA eРѓЂ eРѓѓ , () РЪЕ ┬гforkРѓЂ (SC.Fork p t)
-- ┬гfork-РЅѕ РЪе G.write' lРіЉh hРІцA eРѓЂ eРѓѓ , () РЪЕ ┬гforkРѓЂ (SC.Fork p t)
-- ┬гfork-РЅѕ РЪе G.writeРѕЎ lРіЉh eРѓЂ eРѓѓ , () РЪЕ ┬гforkРѓЂ (SC.Fork p t)
-- ┬гfork-РЅѕ РЪе G.fork lРіЉh hРіЉA eРѓЂ , G.fork .lРіЉh hРіЉAРѓЂ eРѓѓ РЪЕ ┬гforkРѓЂ (SC.Fork .lРіЉh tРѓЂ) = ┬гforkРѓЂ (SC.Fork lРіЉh _)
-- ┬гfork-РЅѕ РЪе G.fork' lРіЉh hРІцA eРѓЂ , G.fork' .lРіЉh hРІцAРѓЂ eРѓѓ РЪЕ ┬гforkРѓЂ (SC.Fork .lРіЉh tРѓЂ) = ┬гforkРѓЂ (SC.Fork lРіЉh _)
-- ┬гfork-РЅѕ РЪе G.forkРѕЎ lРіЉh eРѓЂ , G.fork' .lРіЉh hРІцA eРѓѓ РЪЕ ┬гforkРѓЂ (SC.Fork .lРіЉh tРѓЂ) = ┬гforkРѓЂ (SC.ForkРѕЎ lРіЉh _)
-- ┬гfork-РЅѕ РЪе G.deepDup eРѓЂ , () РЪЕ ┬гforkРѓЂ (SC.Fork p tРѓЂ)
-- ┬гfork-РЅѕ РЪе G.РѕЎ , () РЪЕ ┬гforkРѓЂ (SC.Fork p t)
-- ┬гfork-РЅѕ РЪе G.fork' p hРІцA eРѓЂ , G.forkРѕЎ .p eРѓѓ РЪЕ ┬гforkРѓЂ (SC.ForkРѕЎ .p tРѓЂ) = ┬гforkРѓЂ (SC.Fork p _)
-- ┬гfork-РЅѕ РЪе G.forkРѕЎ p eРѓЂ , G.forkРѕЎ .p eРѓѓ РЪЕ ┬гforkРѓЂ (SC.ForkРѕЎ .p tРѓЂ) = ┬гforkРѓЂ (SC.ForkРѕЎ p _)

-- redex-РЅѕ : Рѕђ {l ls ¤ё} {pРѓЂ pРѓЂ' pРѓѓ : Program l ls ¤ё} -> (lРіЉA : l РіЉ A) -> pРѓЂ LРѓѓ.РЅѕр┤ЙРЪе (yes lРіЉA) РЪЕ pРѓѓ -> pРѓЂ РЪ╝ pРѓЂ' ->
--             РѕЃ (╬╗ pРѓѓ' -> (pРѓЂ' LРѓѓ.РЅѕр┤ЙРЪе yes lРіЉA РЪЕ pРѓѓ') ├Ќ (pРѓѓ РЪ╝ pРѓѓ'))
-- redex-РЅѕ = {!!}
