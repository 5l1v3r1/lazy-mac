import Lattice as L
import Scheduler as SРѓЂ

module Concurrent.Valid (­ЮЊЏ : L.Lattice) (­ЮЊб : SРѓЂ.Scheduler ­ЮЊЏ) where

import Types as T
open T ­ЮЊЏ

open SРѓЂ.Scheduler ­ЮЊЏ ­ЮЊб renaming (State to State╦б)
open import Scheduler.Base ­ЮЊЏ renaming (РЪф_,_,_РЪФ to mkр┤╣)

import Sequential.Calculus as S
open S ­ЮЊЏ

import Sequential.Valid as V hiding (validр┤Й ; valid╦б )
open V ­ЮЊЏ

import  Concurrent.Calculus as C renaming (РЪе_,_,_,_РЪЕ to mkр┤│) hiding (updateр┤Й)
open C ­ЮЊЏ ­ЮЊб

import Concurrent.Semantics as CS
open CS  ­ЮЊЏ ­ЮЊб

open import Data.Product as P
open import Data.Empty
open import Data.Nat

validр┤Й : Рѕђ {l ls} -> Memories ls -> Pool l -> Set
validр┤Й Ms C.[] = Ріц
validр┤Й Ms (t C.РЌЁ P) = validTSРѕЎ Ms t ├Ќ validр┤Й Ms P
validр┤Й Ms C.РѕЎ = РіЦ

map-validр┤Й : Рѕђ {ls ls'} -> Memories ls -> Pools ls' -> Set
map-validр┤Й Ms C.[] = Ріц
map-validр┤Й Ms (T C.РЌЁ Ps) = validр┤Й Ms T ├Ќ map-validр┤Й Ms Ps

valid-Idрхђ : Рѕђ {ls} -> Label -> РёЋ -> Pools ls -> Set
valid-Idрхђ {ls} l n Ps = P.╬Б (l Рѕѕ ls) (╬╗ lРѕѕls -> n РЅц lengthрхђ (lookupр┤Й lРѕѕls Ps))

validр┤│ : Рѕђ {ls} -> Global ls -> Set
validр┤│ (mkр┤│ ╬Б Ms ╬Њ Ps) = map-validр┤╣ Ms ├Ќ map-validр┤┤ Ms ╬Њ ├Ќ map-validр┤Й Ms Ps

memberр┤Й : Рѕђ {l ls n} {Ms : Memories ls} {t : Thread l} {P : Pool l} -> validр┤Й Ms P -> n Рєд t Рѕѕрхђ P -> validTSРѕЎРђёMs t
memberр┤Й v C.here = projРѓЂ v
memberр┤Й v (C.there x) = memberр┤Й (projРѓѓ v) x

memberр┤Й╦б : Рѕђ {l lsРѓЂ lsРѓѓ} {Ms : Memories lsРѓЂ} {Ps : Pools lsРѓѓ} {P : Pool l} -> map-validр┤Й Ms Ps -> l Рєд P Рѕѕр┤Й Ps -> validр┤Й Ms P
memberр┤Й╦б (projРѓЂ , projРѓѓ) C.here = projРѓЂ
memberр┤Й╦б v (C.there lРѕѕPs) = memberр┤Й╦б (projРѓѓ v) lРѕѕPs

updateр┤Й : Рѕђ {l n ls } {Ms : Memories ls} {PРѓЂ PРѓѓ : Pool l} {t : Thread l}
           -> validр┤Й Ms PРѓЂ -> validTSРѕЎ Ms t -> PРѓѓ РЅћ PРѓЂ [ n Рєд t ]рхђ -> validр┤Й Ms PРѓѓ
updateр┤Й vРѓЂ vРѓѓ C.here = vРѓѓ , projРѓѓ vРѓЂ
updateр┤Й (vРѓЂ , vРѓѓ) vРѓЃ (C.there u) = vРѓЂ , updateр┤Й vРѓѓ vРѓЃ u

updateр┤Й╦б : Рѕђ {l lsРѓЂ lsРѓѓ} {Ms : Memories lsРѓЂ} {PsРѓЂ PsРѓѓ : Pools lsРѓѓ} {P : Pool l}
           -> map-validр┤Й Ms PsРѓЂ -> validр┤Й Ms P -> PsРѓѓ РЅћ PsРѓЂ [ l Рєд P ]р┤Й -> map-validр┤Й Ms PsРѓѓ
updateр┤Й╦б vРѓЂ vРѓѓ C.here = vРѓѓ , projРѓѓ vРѓЂ
updateр┤Й╦б (projРѓЂ , projРѓѓ) vРѓѓ (C.there uРѓЂ) = projРѓЂ , updateр┤Й╦б projРѓѓ vРѓѓ uРѓЂ

valid-Рќ╗ : Рѕђ {l ls} {Ms : Memories ls} {P : Pool l} {t : Thread l} -> validр┤Й Ms P -> validTSРѕЎ Ms t -> validр┤Й Ms (P Рќ╗ t)
valid-Рќ╗ {P = C.[]} vРѓЂ vРѓѓ = vРѓѓ , T.tt
valid-Рќ╗ {P = t C.РЌЁ P} (vРѓЂ , vРѓѓ) vРѓЃ = vРѓЂ , (valid-Рќ╗ vРѓѓ vРѓЃ)
valid-Рќ╗ {P = C.РѕЎ} () vРѓѓ

wkenр┤Й : Рѕђ {l lsРѓЂ lsРѓѓ} {P : Pool l} {MsРѓЂ : Memories lsРѓЂ}{MsРѓѓ : Memories lsРѓѓ} -> MsРѓЂ Ріє╦б MsРѓѓ -> validр┤Й MsРѓЂ P -> validр┤Й MsРѓѓ P
wkenр┤Й {P = C.[]} x v = T.tt
wkenр┤Й {P = t C.РЌЁ P} x (projРѓЂ , projРѓѓ) = (wkenTSРѕЎ x projРѓЂ) , (wkenр┤Й x projРѓѓ)
wkenр┤Й {P = C.РѕЎ} x ()

wkenр┤Й╦б : Рѕђ {ls lsРѓЂ lsРѓѓ} {Ps : Pools ls} {MsРѓЂ : Memories lsРѓЂ}{MsРѓѓ : Memories lsРѓѓ} -> MsРѓЂ Ріє╦б MsРѓѓ -> map-validр┤Й MsРѓЂ Ps -> map-validр┤Й MsРѓѓ Ps
wkenр┤Й╦б {Ps = C.[]} x v = T.tt
wkenр┤Й╦б {Ps = T C.РЌЁ Ps} x (projРѓЂ , projРѓѓ) = (wkenр┤Й x projРѓЂ) , (wkenр┤Й╦б x projРѓѓ)

validРєф : Рѕђ {n l ls} {gРѓЂ gРѓѓ : Global ls} -> (l , n) Ріб gРѓЂ Рєф gРѓѓ -> validр┤│ gРѓЂ -> validр┤│ gРѓѓ
validРєф (CS.step-РѕЁ lРѕѕP tРѕѕT ┬гfork step sch uрхђ uр┤Й) (MSР▒й , ╬ЊР▒й , PsрхЏ) with memberр┤Й╦б PsрхЏ lРѕѕP
... | PРѓЂР▒й with memberр┤Й PРѓЂР▒й tРѕѕT
... | tР▒й with validРЪ╝ (MSР▒й , ╬ЊР▒й , tР▒й) step | РЪ╝-Ріє╦б step
... | MsР▒й' , ╬ЊР▒й' , tР▒й' | MsРѓЂРієMsРѓѓ = MsР▒й' , (╬ЊР▒й' , updateр┤Й╦б (wkenр┤Й╦б MsРѓЂРієMsРѓѓ PsрхЏ) (updateр┤Й (wkenр┤Й MsРѓЂРієMsРѓѓ  PРѓЂР▒й) tР▒й' uрхђ) uр┤Й)
validРєф (CS.fork {tр┤┤ = tр┤┤} lРѕѕP tРѕѕT uрхђ uРѓЂр┤Й HРѕѕPРѓѓ sch uРѓѓр┤Й) (MSР▒й , ╬ЊР▒й , PsрхЏ) with memberр┤Й╦б PsрхЏ lРѕѕP
... | PРѓЂР▒й with memberр┤Й PРѓЂР▒й tРѕѕT
... | (hРѕѕls , tр┤┤Р▒й) , SР▒й  with updateр┤Й╦б PsрхЏ (updateр┤Й PРѓЂР▒й (T.tt , SР▒й) uрхђ) uРѓЂр┤Й
... | PsрхЏ' = MSР▒й , ╬ЊР▒й , updateр┤Й╦б PsрхЏ' (valid-Рќ╗ (memberр┤Й╦б PsрхЏ' HРѕѕPРѓѓ) (valid-deepDupрхђ {{ tр┤┤ }}  tр┤┤Р▒й , tt)) uРѓѓр┤Й
validРєф (CS.forkРѕЎ lРѕѕP tРѕѕT uрхђ uр┤Й sch) (MSР▒й , ╬ЊР▒й , PsрхЏ) with memberр┤Й (memberр┤Й╦б PsрхЏ lРѕѕP) tРѕѕT
validРєф (CS.forkРѕЎ lРѕѕP tРѕѕT uрхђ uр┤Й sch) (MSР▒й , ╬ЊР▒й , PsрхЏ) | () , projРѓѓ
validРєф (CS.skip lРѕѕP tРѕѕT stuck sch) (MSР▒й , ╬ЊР▒й , PsрхЏ) = MSР▒й , ╬ЊР▒й , PsрхЏ
validРєф (CS.done lРѕѕP tРѕѕT don sch) (MSР▒й , ╬ЊР▒й , PsрхЏ) = MSР▒й , ╬ЊР▒й , PsрхЏ
