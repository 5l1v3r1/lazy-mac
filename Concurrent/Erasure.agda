import Lattice as L
import Scheduler as S
open import Scheduler.Security

module Concurrent.Erasure {­ЮЊЏ : L.Lattice} {­ЮЊб : S.Scheduler ­ЮЊЏ} (A : L.Label ­ЮЊЏ) (­ЮЊЮ : NI╦б ­ЮЊЏ A ­ЮЊб) where

open import Relation.Nullary
open import Types ­ЮЊЏ
open import Sequential.Calculus ­ЮЊЏ
open import Sequential.Semantics ­ЮЊЏ
open import Sequential.Erasure ­ЮЊЏ A as SE hiding (╬хрхђ ; ╬хр┤Й ; ╬х╦б)

--------------------------------------------------------------------------------
-- Temporarily side-step bug #2245
import Concurrent.Calculus as C
open C ­ЮЊЏ ­ЮЊб
-- open import Concurrent.Calculus ­ЮЊЏ ­ЮЊб

import Concurrent.Semantics as CS
open CS ­ЮЊЏ ­ЮЊб
-- open import Concurrent.Semantics ­ЮЊЏ ­ЮЊб public
--------------------------------------------------------------------------------

open Scheduler.Security.NI╦б ­ЮЊЏ A ­ЮЊЮ

╬хрхЌ : Рѕђ {l} ->  Thread l -> Thread l
╬хрхЌ C.РЪе t , S РЪЕ = РЪе SE.╬хрхђ t , SE.╬х╦б S РЪЕ
╬хрхЌ C.РѕЎ = РѕЎ

╬хрхђ : Рѕђ {l} -> Dec (l РіЉ A) -> Pool l -> Pool l
╬хрхђ (yes p) C.[] = []
╬хрхђ (yes p) (t C.РЌЁ T) = ╬хрхЌ t РЌЁ (╬хрхђ (yes p) T)
╬хрхђ (yes p) C.РѕЎ = РѕЎ
╬хрхђ (no ┬гp) T = РѕЎ

open import Relation.Binary.PropositionalEquality
open import Data.Empty

╬хрхђ-ext-РЅА : Рѕђ {l} -> (x y : Dec (l РіЉ A)) (T : Pool l) -> ╬хрхђ x T РЅА ╬хрхђ y T
╬хрхђ-ext-РЅА (yes p) (yes pРѓЂ) C.[] = refl
╬хрхђ-ext-РЅА (yes p) (yes pРѓЂ) (t C.РЌЁ T) rewrite ╬хрхђ-ext-РЅА (yes p) (yes pРѓЂ) T = refl
╬хрхђ-ext-РЅА (yes p) (yes pРѓЂ) C.РѕЎ = refl
╬хрхђ-ext-РЅА (yes p) (no ┬гp) T = РіЦ-elim (┬гp p)
╬хрхђ-ext-РЅА (no ┬гp) (yes p) T = РіЦ-elim (┬гp p)
╬хрхђ-ext-РЅА (no ┬гp) (no ┬гpРѓЂ) T = refl

-- Pointwise erasure function for pools
╬хр┤Й : Рѕђ {ls} -> Pools ls -> Pools ls
╬хр┤Й C.[] = []
╬хр┤Й (T C.РЌЁ P) = (╬хрхђ (_ РіЉ? A) T) РЌЁ (╬хр┤Й P)

╬хр┤│ : Рѕђ {ls} -> Global ls -> Global ls
╬хр┤│ C.РЪе ╬Б , ╬Њ , P РЪЕ = C.РЪе ╬х╦б ╬Б , ╬хр┤┤ ╬Њ , ╬хр┤Й P РЪЕ

import Data.Product as P

memberр┤Й : Рѕђ {l ls} {T : Pool l} {P : Pools ls} -> (lРіЉA : l РіЉ A) -> l Рєд T Рѕѕр┤Й P -> l Рєд (╬хрхђ (yes lРіЉA) T) Рѕѕр┤Й (╬хр┤Й P)
memberр┤Й {l} lРіЉA C.here with l РіЉ? A
memberр┤Й {T = T} lРіЉA C.here | yes p rewrite ╬хрхђ-ext-РЅА (yes lРіЉA) (yes p) T = here
memberр┤Й lРіЉA C.here | no ┬гp = РіЦ-elim (┬гp lРіЉA)
memberр┤Й lРіЉA (C.there x) = there (memberр┤Й lРіЉA x)

memberрхђ : Рѕђ {l n ¤ёРѓЂ ¤ђ} {T : Pool l} {t : Term ¤ђ ¤ёРѓЂ} {S : Stack l _ _} -> (lРіЉA : l РіЉ A)
          -> n Рєд РЪе t , S РЪЕ Рѕѕрхђ T -> n Рєд РЪе SE.╬хрхђ t , SE.╬х╦б S РЪЕ Рѕѕрхђ (╬хрхђ (yes lРіЉA) T)
memberрхђ lРіЉA C.here = C.here
memberрхђ lРіЉA (C.there x) = C.there (memberрхђ lРіЉA x)

updateрхђ : Рѕђ {l ¤ђ ¤ё n} {t : Term ¤ђ ¤ё} {S : Stack l _ _} {TРѓЂ TРѓѓ : Pool l} -> (lРіЉA : l РіЉ A) -> TРѓѓ РЅћ TРѓЂ [ n Рєд РЪе t , S РЪЕ ]рхђ ->
          (╬хрхђ (yes lРіЉA) TРѓѓ) РЅћ (╬хрхђ (yes lРіЉA) TРѓЂ) [ n Рєд РЪе (SE.╬хрхђ t) , SE.╬х╦б S РЪЕ ]рхђ
updateрхђ lРіЉA C.here = C.here
updateрхђ lРіЉA (C.there x) = C.there (updateрхђ lРіЉA x)

updateр┤Й : Рѕђ {l ls} {T : Pool l} {PРѓЂ PРѓѓ : Pools ls} -> (lРіЉA : l РіЉ A) -> PРѓѓ РЅћ PРѓЂ [ l Рєд T ]р┤Й -> (╬хр┤Й PРѓѓ) РЅћ (╬хр┤Й PРѓЂ) [ l Рєд (╬хрхђ (yes lРіЉA) T) ]р┤Й
updateр┤Й {l} lРіЉA C.here with l РіЉ? A
updateр┤Й {T = T} lРіЉA C.here | yes p rewrite ╬хрхђ-ext-РЅА (yes lРіЉA) (yes p) T = here
updateр┤Й lРіЉA C.here | no ┬гp = РіЦ-elim (┬гp lРіЉA)
updateр┤Й lРіЉA (C.there x) = C.there (updateр┤Й lРіЉA x)


done-╬х : Рѕђ {l ls ¤ё} {p : Program l ls ¤ё} -> (lРіЉA : l РіЉ A) -> Doneр┤Й p -> Doneр┤Й (SE.╬хРѓЂр┤Й (yes lРіЉA) p)
done-╬х lРіЉA (Done isVal) = Done (╬хрхђ-Val isVal)

-- Will probably need the graph of the function
stuck-╬х : Рѕђ {l ls ¤ё} {p : Program l ls ¤ё} -> (lРіЉA : l РіЉ A) -> Stuckр┤Й p -> Stuckр┤Й (SE.╬хРѓЂр┤Й (yes lРіЉA) p)
stuck-╬х {l} {ls} {¤ё} lРіЉA (┬гdone P., ┬гredex) = ╬х┬гdone ┬гdone P., ╬х┬гredex ┬гredex
  where ╬х┬гdone : {p : Program l ls ¤ё} -> ┬г (Doneр┤Й p) -> ┬г (Doneр┤Й (╬хРѓЂр┤Й (yes lРіЉA) p))
        ╬х┬гdone {РЪе ╬Њ , t , [] РЪЕ} ┬гdoneРѓЂ (Done isVal) = ╬хрхђ┬гVal (┬гDoneРЄњ┬гVal ┬гdoneРѓЂ) isVal
        ╬х┬гdone {РЪе ╬Њ , t , x Рѕи S РЪЕ} ┬гdoneРѓЂ ()
        ╬х┬гdone {РЪе ╬Њ , t , РѕЎ РЪЕ} ┬гdoneРѓЂ ()
        ╬х┬гdone {РѕЎ} ┬гdoneРѓЂ ()

        -- Lengthy boring proof, I will probably need the graph of the function ╬хр┤Й
        postulate ╬х┬гredex : Рѕђ {p : Program l ls ¤ё} -> ┬г (Redexр┤Й p) -> ┬г (Redexр┤Й (SE.╬хРѓЂр┤Й (yes lРіЉA) p))


╬хр┤│-sim : Рѕђ {l n ls} {gРѓЂ gРѓѓ : Global ls} -> l РіЉ A -> (l P., n) Ріб gРѓЂ Рєф gРѓѓ -> (l P., n) Ріб (╬хр┤│ gРѓЂ) Рєф (╬хр┤│ gРѓѓ)
╬хр┤│-sim lРіЉA (CS.step-РѕЁ lРѕѕP tРѕѕT ┬гfork step sch uрхђ uр┤Й)
  = step-РѕЁ (memberр┤Й lРіЉA lРѕѕP) (memberрхђ lРіЉA tРѕѕT) (╬хрхђ┬гFork ┬гfork) (╬хр┤Й-simр┤И lРіЉA step) (╬х╦б-simр┤И lРіЉA sch) (updateрхђ lРіЉA uрхђ) (updateр┤Й lРіЉA uр┤Й)
╬хр┤│-sim lРіЉA (CS.fork lРѕѕP tРѕѕT step uрхђ uРѓЂр┤Й HРѕѕPРѓѓ sch uРѓѓр┤Й)
  = fork (memberр┤Й lРіЉA lРѕѕP) (memberрхђ lРіЉA tРѕѕT) (╬хр┤Й-simр┤И lРіЉA step) (updateрхђ lРіЉA uрхђ) (updateр┤Й lРіЉA uРѓЂр┤Й) {!memberр┤Й!} {!╬х╦б-simр┤И lРіЉA sch!} {!!}
╬хр┤│-sim lРіЉA (CS.skip lРѕѕP tРѕѕT stuck sch) = skip (memberр┤Й lРіЉA lРѕѕP) (memberрхђ lРіЉA tРѕѕT) (stuck-╬х lРіЉA stuck) (╬х╦б-simр┤И lРіЉA sch)
╬хр┤│-sim lРіЉA (CS.done lРѕѕP tРѕѕT don sch) = done (memberр┤Й lРіЉA lРѕѕP) (memberрхђ lРіЉA tРѕѕT) (done-╬х lРіЉA don) (╬х╦б-simр┤И lРіЉA sch)
╬хр┤│-sim lРіЉA (CS.hole lРѕѕP tРѕѕT sch) = hole (memberр┤Й lРіЉA lРѕѕP) {!!} (╬х╦б-simр┤И lРіЉA sch)
