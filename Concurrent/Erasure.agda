import Lattice as L
import Scheduler as S
open import Scheduler.Security

module Concurrent.Erasure {ùìõ : L.Lattice} {ùì¢ : S.Scheduler ùìõ} (A : L.Label ùìõ) (ùìù : NIÀ¢ ùìõ A ùì¢) where

open import Relation.Nullary
open import Types ùìõ
open import Sequential.Erasure ùìõ A as SE hiding (Œµ·µÄ ; Œµ·¥æ ; ŒµÀ¢)


-- Temporarily side-step bug #2245
import Concurrent.Calculus as C
open C ùìõ ùì¢
-- open import Concurrent.Calculus ùìõ ùì¢
open import Concurrent.Semantics ùìõ ùì¢ public

open Scheduler.Security.NIÀ¢ ùìõ A ùìù

Œµ·µó : ‚àÄ {l} ->  Thread l -> Thread l
Œµ·µó C.‚ü® t , S ‚ü© = ‚ü® SE.Œµ·µÄ t , SE.ŒµÀ¢ S ‚ü©
Œµ·µó C.‚àô = ‚àô

Œµ·µÄ : ‚àÄ {l} -> Dec (l ‚äë A) -> Pool l -> Pool l
Œµ·µÄ (yes p) C.[] = []
Œµ·µÄ (yes p) (t C.‚óÖ T) = Œµ·µó t ‚óÖ (Œµ·µÄ (yes p) T)
Œµ·µÄ (yes p) C.‚àô = ‚àô
Œµ·µÄ (no ¬¨p) T = ‚àô

-- Pointwise erasure function for pools
Œµ·¥æ : ‚àÄ {ls} -> Pools ls -> Pools ls
Œµ·¥æ C.[] = []
Œµ·¥æ (T C.‚óÖ P) = (Œµ·µÄ (_ ‚äë? A) T) ‚óÖ (Œµ·¥æ P)

Œµ·¥≥ : ‚àÄ {ls} -> Global ls -> Global ls
Œµ·¥≥ C.‚ü® Œ£ , Œì , P ‚ü© = C.‚ü® ŒµÀ¢ Œ£ , Œµ·¥¥ Œì , Œµ·¥æ P ‚ü©

open import Relation.Binary.PropositionalEquality hiding (subst ; [_])
