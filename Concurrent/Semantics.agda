import Lattice as L
import Scheduler as S

module Concurrent.Semantics (ùìõ : L.Lattice) (ùì¢ : S.Scheduler ùìõ) where

open import Types ùìõ
open S.Scheduler ùìõ ùì¢

open S.Message
open S.Event

open import Sequential.Calculus ùìõ
open import Sequential.Semantics ùìõ
open import Concurrent.Calculus ùìõ ùì¢
open import Relation.Nullary

-- Concurrent semantics
data Step·∂ú (l : Label) (n : ‚Ñï) {ls} : Global ls -> Global ls -> Set where
  step-‚àÖ : ‚àÄ {œÄ‚ÇÅ œÄ‚ÇÇ œÑ‚ÇÅ œÑ‚ÇÇ S‚ÇÅ S‚ÇÇ Œ£‚ÇÅ Œ£‚ÇÇ} {t‚ÇÅ : Term œÄ‚ÇÅ œÑ‚ÇÅ} {t‚ÇÇ : Term œÄ‚ÇÇ œÑ‚ÇÇ} {Œì‚ÇÅ Œì‚ÇÇ : Heap ls} {P‚ÇÅ P‚ÇÇ : Pools ls} {T‚ÇÅ T‚ÇÇ : Pool l}
           (l‚ààP : l ‚Ü¶ T‚ÇÅ ‚àà·¥æ P‚ÇÅ)
           (t‚ààT : n ‚Ü¶ ‚ü® t‚ÇÅ , S‚ÇÅ ‚ü© ‚àà·µÄ T‚ÇÅ)
           (¬¨fork : ¬¨ (IsFork t‚ÇÅ))
           (step : ‚ü® Œì‚ÇÅ , t‚ÇÅ , S‚ÇÅ ‚ü© ‚üº ‚ü® Œì‚ÇÇ , t‚ÇÇ , S‚ÇÇ ‚ü©)
           (sch : Œ£‚ÇÅ ‚ü∂ Œ£‚ÇÇ ‚Üë (l , n , Step) )
           (u·µÄ : T‚ÇÇ ‚âî T‚ÇÅ [ n ‚Ü¶ ‚ü® t‚ÇÇ , S‚ÇÇ ‚ü© ]·µÄ )
           (u·¥æ : P‚ÇÇ ‚âî P‚ÇÅ [ l ‚Ü¶ T‚ÇÇ ]·¥æ ) ->
           Step·∂ú l n ‚ü® Œ£‚ÇÅ , Œì‚ÇÅ , P‚ÇÅ ‚ü© ‚ü® Œ£‚ÇÇ , Œì‚ÇÇ , P‚ÇÇ ‚ü©

  fork :  ‚àÄ {H œÄ‚ÇÅ œÄ‚ÇÇ œÑ‚ÇÇ S‚ÇÅ S‚ÇÇ Œ£‚ÇÅ Œ£‚ÇÇ} {t·¥¥ : Term œÄ‚ÇÅ (Mac H _)} {t‚ÇÇ : Term œÄ‚ÇÇ œÑ‚ÇÇ} {Œì‚ÇÅ Œì‚ÇÇ : Heap ls}
            {P‚ÇÅ P‚ÇÇ P‚ÇÉ : Pools ls} {T‚ÇÅ T‚ÇÇ : Pool l} {T·¥¥ : Pool H} {l‚äëH : l ‚äë H}
           (l‚ààP : l ‚Ü¶ T‚ÇÅ ‚àà·¥æ P‚ÇÅ)
           (t‚ààT : n ‚Ü¶ ‚ü® fork l‚äëH t·¥¥ , S‚ÇÅ ‚ü© ‚àà·µÄ T‚ÇÅ)
           (step : ‚ü® Œì‚ÇÅ , fork l‚äëH t·¥¥ , S‚ÇÅ ‚ü© ‚üº ‚ü® Œì‚ÇÇ , t‚ÇÇ , S‚ÇÇ ‚ü©)
           (u·µÄ : T‚ÇÇ ‚âî T‚ÇÅ [ n ‚Ü¶ ‚ü® t‚ÇÇ , S‚ÇÇ ‚ü© ]·µÄ )
           (u‚ÇÅ·¥æ : P‚ÇÇ ‚âî P‚ÇÅ [ l ‚Ü¶ T‚ÇÇ ]·¥æ )
           (H‚ààP‚ÇÇ : H ‚Ü¶ T·¥¥ ‚àà·¥æ P‚ÇÇ)
           (sch : Œ£‚ÇÅ ‚ü∂ Œ£‚ÇÇ ‚Üë (l , n , Fork H (lenght·¥æ T·¥¥) l‚äëH) )
           (u‚ÇÇ·¥æ : P‚ÇÉ ‚âî P‚ÇÇ [ H ‚Ü¶ T·¥¥ ‚ñª ‚ü® t·¥¥ , [] ‚ü© ]·¥æ ) ->  -- TODO must add deepDup!
           Step·∂ú l n ‚ü® Œ£‚ÇÅ , Œì‚ÇÅ , P‚ÇÅ ‚ü© ‚ü® Œ£‚ÇÇ , Œì‚ÇÇ , P‚ÇÉ ‚ü©

  skip : ‚àÄ {Œ£‚ÇÅ Œ£‚ÇÇ œÑ œÄ S} {t : Term œÄ œÑ} {Œì : Heap ls} {P : Pools ls} {T : Pool l}
            (l‚ààP : l ‚Ü¶ T ‚àà·¥æ P)
            (t‚ààT : n ‚Ü¶ ‚ü® t , S ‚ü© ‚àà·µÄ T)
            (stuck : Stuck·¥æ ‚ü® Œì , t , S ‚ü©)
            (sch : Œ£‚ÇÅ ‚ü∂ Œ£‚ÇÇ ‚Üë (l , n , Skip) ) ->
            Step·∂ú l n ‚ü® Œ£‚ÇÅ , Œì , P ‚ü© ‚ü® Œ£‚ÇÇ , Œì , P ‚ü©

  done : ‚àÄ {Œ£‚ÇÅ Œ£‚ÇÇ œÑ œÄ S} {t : Term œÄ œÑ} {Œì : Heap ls} {P : Pools ls} {T : Pool l}
            (l‚ààP : l ‚Ü¶ T ‚àà·¥æ P)
            (t‚ààT : n ‚Ü¶ ‚ü® t , S ‚ü© ‚àà·µÄ T)
            (don : Done·¥æ ‚ü® Œì , t , S ‚ü©)
            (sch : Œ£‚ÇÅ ‚ü∂ Œ£‚ÇÇ ‚Üë (l , n , Done) ) ->
            Step·∂ú l n ‚ü® Œ£‚ÇÅ , Œì , P ‚ü© ‚ü® Œ£‚ÇÇ , Œì , P ‚ü©

  -- Do we need this if we match high steps with 0 steps?
  hole : ‚àÄ {Œ£} {Œì : Heap ls} {P : Pools ls} {T : Pool l}
            (l‚ààP : l ‚Ü¶ T ‚àà·¥æ P)
            (t‚ààT : n ‚Ü¶ ‚àô ‚àà·µÄ T)
            (sch : Œ£ ‚ü∂ Œ£ ‚Üë (l , n , ‚àô) ) ->
           Step·∂ú l n ‚ü® Œ£ , Œì , P ‚ü© ‚ü® Œ£ , Œì , P ‚ü©


open import Data.Product

_‚ä¢_‚Ü™_ : ‚àÄ {ls} -> Label √ó ‚Ñï -> Global ls -> Global ls -> Set
(l , n) ‚ä¢ g‚ÇÅ ‚Ü™ g‚ÇÇ = Step·∂ú l n g‚ÇÅ g‚ÇÇ

-- -- An auxiliary data type that externalizes a global-step event.
-- data _‚ä¢·¥π_‚Ü™_ {ls} : ‚àÄ {l} -> Message l -> Global ls -> Global ls -> Set where
--   withMsg : ‚àÄ {l n g‚ÇÅ g‚ÇÇ} -> (s : l , n ‚ä¢ g‚ÇÅ ‚Ü™ g‚ÇÇ) -> (l , n , (getEvent s)) ‚ä¢·¥π g‚ÇÅ ‚Ü™ g‚ÇÇ

-- open import Data.Product

-- -- Transitive closure of the concurrent small step
-- data _‚Ü™‚ãÜ_ {ls : List Label} : Global ls -> Global ls -> Set where

--   -- Zero steps
--   [] : ‚àÄ {g} -> g ‚Ü™‚ãÜ g

--   -- More steps
--   _‚à∑_ : ‚àÄ {l n g‚ÇÅ g‚ÇÇ g‚ÇÉ} -> l , n ‚ä¢ g‚ÇÅ ‚Ü™ g‚ÇÇ -> g‚ÇÇ ‚Ü™‚ãÜ g‚ÇÉ -> g‚ÇÅ ‚Ü™‚ãÜ g‚ÇÉ


-- -- Concatenates two multiple steps reductions
-- _++À¢_ : ‚àÄ {ls} {g‚ÇÅ g‚ÇÇ g‚ÇÉ : Global ls} -> g‚ÇÅ ‚Ü™‚ãÜ g‚ÇÇ -> g‚ÇÇ ‚Ü™‚ãÜ g‚ÇÉ -> g‚ÇÅ ‚Ü™‚ãÜ g‚ÇÉ
-- [] ++À¢ ss‚ÇÇ = ss‚ÇÇ
-- (s ‚à∑ ss‚ÇÅ) ++À¢ ss‚ÇÇ = s ‚à∑ (ss‚ÇÅ ++À¢ ss‚ÇÇ)
