import Lattice as L
import Scheduler as S

module Concurrent.Semantics (ùìõ : L.Lattice) (ùì¢ : S.Scheduler ùìõ) where

open import Types ùìõ
open S.Scheduler ùìõ ùì¢

open S.Message
open S.Event ùìõ

open import Sequential.Calculus ùìõ
open import Sequential.Semantics ùìõ
open import Concurrent.Calculus ùìõ ùì¢
open import Relation.Nullary

-- Concurrent semantics

-- TODO I think that we can remove l n from the plain step and define
-- a wrapper data-type that extracts it.
data Step·∂ú (l : Label) (n : ‚Ñï) {ls} : Global ls -> Global ls -> Set where
  step-‚àÖ : ‚àÄ {Œ£‚ÇÅ Œ£‚ÇÇ Ms‚ÇÅ Ms‚ÇÇ} {Ts‚ÇÅ Ts‚ÇÇ : Thread l} {Œì‚ÇÅ Œì‚ÇÇ : Heaps ls} {P‚ÇÅ P‚ÇÇ : Pools ls} {T‚ÇÅ T‚ÇÇ : Pool l}
           (l‚ààP : l ‚Ü¶ T‚ÇÅ ‚àà·¥æ P‚ÇÅ)
           (t‚ààT : n ‚Ü¶ Ts‚ÇÅ ‚àà·µÄ T‚ÇÅ)
           (¬¨fork : ¬¨ (IsForkTS Ts‚ÇÅ))
           (step : ‚ü® Ms‚ÇÅ , Œì‚ÇÅ , Ts‚ÇÅ ‚ü© ‚üº ‚ü® Ms‚ÇÇ , Œì‚ÇÇ , Ts‚ÇÇ ‚ü©)
           (sch : Œ£‚ÇÅ ‚ü∂ Œ£‚ÇÇ ‚Üë ‚ü™ l , n , Step ‚ü´ )
           (u·µÄ : T‚ÇÇ ‚âî T‚ÇÅ [ n ‚Ü¶  Ts‚ÇÇ  ]·µÄ )
           (u·¥æ : P‚ÇÇ ‚âî P‚ÇÅ [ l ‚Ü¶ T‚ÇÇ ]·¥æ ) ->
           Step·∂ú l n ‚ü® Œ£‚ÇÅ , Ms‚ÇÅ , Œì‚ÇÅ , P‚ÇÅ ‚ü© ‚ü® Œ£‚ÇÇ , Ms‚ÇÇ , Œì‚ÇÇ , P‚ÇÇ ‚ü©

  fork :  ‚àÄ {H œÄ S Ms Œ£‚ÇÅ Œ£‚ÇÇ} {t·¥¥ : Term œÄ (Mac H _)} {Œì : Heaps ls}
            {P‚ÇÅ P‚ÇÇ P‚ÇÉ : Pools ls} {T‚ÇÅ T‚ÇÇ : Pool l} {T·¥¥ : Pool H} {l‚äëH : l ‚äë H}
           (l‚ààP : l ‚Ü¶ T‚ÇÅ ‚àà·¥æ P‚ÇÅ)
           (t‚ààT : n ‚Ü¶ ‚ü® fork l‚äëH t·¥¥ , S ‚ü© ‚àà·µÄ T‚ÇÅ)
           (u·µÄ : T‚ÇÇ ‚âî T‚ÇÅ [ n ‚Ü¶ ‚ü® Return _ ÔºàÔºâ , S ‚ü© ]·µÄ )
           (u‚ÇÅ·¥æ : P‚ÇÇ ‚âî P‚ÇÅ [ l ‚Ü¶ T‚ÇÇ ]·¥æ )
           (H‚ààP‚ÇÇ : H ‚Ü¶ T·¥¥ ‚àà·¥æ P‚ÇÇ)
           (sch : Œ£‚ÇÅ ‚ü∂ Œ£‚ÇÇ ‚Üë ‚ü™ l , n , Fork H (length·µÄ T·¥¥) l‚äëH ‚ü´ )
           (u‚ÇÇ·¥æ : P‚ÇÉ ‚âî P‚ÇÇ [ H ‚Ü¶ T·¥¥ ‚ñª ‚ü® t·¥¥ , [] ‚ü© ]·¥æ ) ->  -- TODO must add deepDup!
           Step·∂ú l n ‚ü® Œ£‚ÇÅ , Ms , Œì , P‚ÇÅ ‚ü© ‚ü® Œ£‚ÇÇ , Ms , Œì , P‚ÇÉ ‚ü©

  fork‚àô :  ‚àÄ {H œÄ S Ms Œ£‚ÇÅ Œ£‚ÇÇ} {t·¥¥ : Term œÄ (Mac H _)} {Œì : Heaps ls}
             {P‚ÇÅ P‚ÇÇ : Pools ls} {T‚ÇÅ T‚ÇÇ : Pool l} {l‚äëH : l ‚äë H}
           (l‚ààP : l ‚Ü¶ T‚ÇÅ ‚àà·¥æ P‚ÇÅ)
           (t‚ààT : n ‚Ü¶ ‚ü® fork‚àô l‚äëH t·¥¥ , S ‚ü© ‚àà·µÄ T‚ÇÅ)
           (u·µÄ : T‚ÇÇ ‚âî T‚ÇÅ [ n ‚Ü¶ ‚ü® Return _ ÔºàÔºâ , S ‚ü© ]·µÄ )
           (u·¥æ : P‚ÇÇ ‚âî P‚ÇÅ [ l ‚Ü¶ T‚ÇÇ ]·¥æ )
           (sch : Œ£‚ÇÅ ‚ü∂ Œ£‚ÇÇ ‚Üë ‚ü™ l , n , Step ‚ü´) ->
           Step·∂ú l n ‚ü® Œ£‚ÇÅ , Ms , Œì , P‚ÇÅ ‚ü© ‚ü® Œ£‚ÇÇ , Ms , Œì , P‚ÇÇ ‚ü©

  skip : ‚àÄ {Œ£‚ÇÅ Œ£‚ÇÇ Ms} {Ts : Thread _} {Œì : Heaps ls} {P : Pools ls} {T : Pool l}
            (l‚ààP : l ‚Ü¶ T ‚àà·¥æ P)
            (t‚ààT : n ‚Ü¶ Ts ‚àà·µÄ T)
            (stuck : Stuck·¥æ ‚ü® Ms , Œì , Ts ‚ü©)
            (sch : Œ£‚ÇÅ ‚ü∂ Œ£‚ÇÇ ‚Üë ‚ü™ l , n , Skip ‚ü´ ) ->
            Step·∂ú l n ‚ü® Œ£‚ÇÅ , Ms , Œì , P ‚ü© ‚ü® Œ£‚ÇÇ , Ms , Œì , P ‚ü©

  done : ‚àÄ {Œ£‚ÇÅ Œ£‚ÇÇ Ms} {Ts : Thread _} {Œì : Heaps ls} {P : Pools ls} {T : Pool l}
            (l‚ààP : l ‚Ü¶ T ‚àà·¥æ P)
            (t‚ààT : n ‚Ü¶ Ts ‚àà·µÄ T)
            (don : Done·¥æ ‚ü® Ms , Œì , Ts ‚ü©)
            (sch : Œ£‚ÇÅ ‚ü∂ Œ£‚ÇÇ ‚Üë ‚ü™ l , n , Done ‚ü´ ) ->
            Step·∂ú l n ‚ü® Œ£‚ÇÅ , Ms , Œì , P ‚ü© ‚ü® Œ£‚ÇÇ , Ms , Œì , P ‚ü©

open import Data.Product hiding (Œ£ ; _,_)

data NextThread {ls} (l : Label) (n : ‚Ñï) (g : Global ls) : Set where
  next : {T : Pool l} (Ts : Thread _) -> (l‚ààP : l ‚Ü¶ T ‚àà·¥æ (P g)) (t‚ààT : n ‚Ü¶ Ts ‚àà·µÄ T) -> NextThread l n g

_‚ä¢_‚Ü™_ : ‚àÄ {ls} -> Label √ó ‚Ñï -> Global ls -> Global ls -> Set
x ‚ä¢ g‚ÇÅ ‚Ü™ g‚ÇÇ = Step·∂ú (proj‚ÇÅ x) (proj‚ÇÇ x) g‚ÇÅ g‚ÇÇ

nextThread : ‚àÄ {ls} {x : Label √ó ‚Ñï} {g‚ÇÅ g‚ÇÇ : Global ls} -> x ‚ä¢ g‚ÇÅ ‚Ü™ g‚ÇÇ -> Thread (proj‚ÇÅ x)
nextThread (step-‚àÖ {Ts‚ÇÅ = Ts‚ÇÅ} l‚ààP t‚ààT ¬¨fork step sch u·µÄ u·¥æ) = Ts‚ÇÅ
nextThread (fork {S = S} {t·¥¥ = t·¥¥} {l‚äëH = l‚äëH} l‚ààP t‚ààT u·µÄ u‚ÇÅ·¥æ H‚ààP‚ÇÇ sch u‚ÇÇ·¥æ) = ‚ü® fork l‚äëH t·¥¥ , S ‚ü©
nextThread (fork‚àô {S = S} {t·¥¥ = t·¥¥} {l‚äëH = l‚äëH} l‚ààP t‚ààT u·µÄ u·¥æ sch) =  ‚ü® fork‚àô l‚äëH t·¥¥ , S ‚ü©
nextThread (skip {Ts = Ts} l‚ààP t‚ààT stuck sch) = Ts
nextThread (done {Ts = Ts} l‚ààP t‚ààT don sch) = Ts

nextPool : ‚àÄ {ls} {x : Label √ó ‚Ñï} {g‚ÇÅ g‚ÇÇ : Global ls} -> x ‚ä¢ g‚ÇÅ ‚Ü™ g‚ÇÇ -> Pool (proj‚ÇÅ x)
nextPool (step-‚àÖ {T‚ÇÅ = T‚ÇÅ} l‚ààT t‚ààT ¬¨fork step sch u·µÄ u·¥æ) = T‚ÇÅ
nextPool (fork {T‚ÇÅ = T‚ÇÅ} l‚ààP t‚ààT u·µÄ u‚ÇÅ·¥æ H‚ààP‚ÇÇ sch u‚ÇÇ·¥æ) = T‚ÇÅ
nextPool (fork‚àô {T‚ÇÅ = T‚ÇÅ} l‚ààP t‚ààT u·µÄ u·¥æ sch) = T‚ÇÅ
nextPool (skip {T = T} l‚ààP t‚ààT stuck sch) = T
nextPool (done {T = T} l‚ààP t‚ààT don sch) = T

next-‚àà·¥æ  : ‚àÄ {ls} {x : Label √ó ‚Ñï} {g‚ÇÅ g‚ÇÇ : Global ls} -> (step : x ‚ä¢ g‚ÇÅ ‚Ü™ g‚ÇÇ) -> (proj‚ÇÇ x) ‚Ü¶ (nextThread step) ‚àà·µÄ (nextPool step)
next-‚àà·¥æ (step-‚àÖ l‚ààP t‚ààT ¬¨fork step sch u·µÄ u·¥æ) = t‚ààT
next-‚àà·¥æ (fork l‚ààP t‚ààT u·µÄ u‚ÇÅ·¥æ H‚ààP‚ÇÇ sch u‚ÇÇ·¥æ) = t‚ààT
next-‚àà·¥æ (fork‚àô l‚ààP t‚ààT u·µÄ u·¥æ sch) = t‚ààT
next-‚àà·¥æ (skip l‚ààP t‚ààT stuck sch) = t‚ààT
next-‚àà·¥æ (done l‚ààP t‚ààT don sch) = t‚ààT

next-‚àà·µÄ :  ‚àÄ {ls} {x : Label √ó ‚Ñï} {g‚ÇÅ g‚ÇÇ : Global ls} -> (step : x ‚ä¢ g‚ÇÅ ‚Ü™ g‚ÇÇ) -> (proj‚ÇÅ x) ‚Ü¶ (nextPool step) ‚àà·¥æ (P g‚ÇÅ)
next-‚àà·µÄ (step-‚àÖ l‚ààP t‚ààT ¬¨fork step sch u·µÄ u·¥æ) = l‚ààP
next-‚àà·µÄ (fork l‚ààP t‚ààT u·µÄ u‚ÇÅ·¥æ H‚ààP‚ÇÇ sch u‚ÇÇ·¥æ) = l‚ààP
next-‚àà·µÄ (fork‚àô l‚ààP t‚ààT u·µÄ u·¥æ sch) = l‚ààP
next-‚àà·µÄ (skip l‚ààP t‚ààT stuck sch) = l‚ààP
next-‚àà·µÄ (done l‚ààP t‚ààT don sch) = l‚ààP

open import Scheduler ùìõ using (Event)

getEvent : ‚àÄ {ls x} {g‚ÇÅ g‚ÇÇ : Global ls} -> x ‚ä¢ g‚ÇÅ ‚Ü™ g‚ÇÇ -> Event (proj‚ÇÅ x)
getEvent (step-‚àÖ l‚ààP t‚ààT ¬¨fork step sch u·µÄ u·¥æ) = Step
getEvent (fork {H = H} {T·¥¥ = T·¥¥} {l‚äëH = l‚äëH} l‚ààP t‚ààT u·µÄ u‚ÇÅ·¥æ H‚ààP‚ÇÇ sch u‚ÇÇ·¥æ) = Fork H (length·µÄ T·¥¥) l‚äëH
getEvent (fork‚àô l‚ààP t‚ààT u·µÄ u·¥æ sch) = Step
getEvent (skip l‚ààP t‚ààT stuck sch) = Skip
getEvent (done l‚ààP t‚ààT don sch) = Done

getSchStep : ‚àÄ {ls x} {g‚ÇÅ g‚ÇÇ : Global ls} -> (s : x ‚ä¢ g‚ÇÅ ‚Ü™ g‚ÇÇ) -> Œ£ g‚ÇÅ ‚ü∂ Œ£ g‚ÇÇ ‚Üë ‚ü™ proj‚ÇÅ x , proj‚ÇÇ x , getEvent s ‚ü´
getSchStep (step-‚àÖ l‚ààP t‚ààT ¬¨fork step sch u·µÄ u·¥æ) = sch
getSchStep (fork l‚ààP t‚ààT u·µÄ u‚ÇÅ·¥æ H‚ààP‚ÇÇ sch u‚ÇÇ·¥æ) = sch
getSchStep (fork‚àô l‚ààP t‚ààT u·µÄ u·¥æ sch) = sch
getSchStep (skip l‚ààP t‚ààT stuck sch) = sch
getSchStep (done l‚ààP t‚ààT don sch) = sch



-- -- An auxiliary data type that externalizes a global-step event.
-- data _‚ä¢·¥π_‚Ü™_ {ls} : ‚àÄ {l} -> Message l -> Global ls -> Global ls -> Set where
--   withMsg : ‚àÄ {l n g‚ÇÅ g‚ÇÇ} -> (s : l , n ‚ä¢ g‚ÇÅ ‚Ü™ g‚ÇÇ) -> (l , n , (getEvent s)) ‚ä¢·¥π g‚ÇÅ ‚Ü™ g‚ÇÇ

-- Transitive closure of the concurrent small step
data _‚Ü™‚ãÜ_ {ls : List Label} : Global ls -> Global ls -> Set where

  -- Zero steps
  [] : ‚àÄ {g} -> g ‚Ü™‚ãÜ g

  -- More steps
  _‚à∑_ : ‚àÄ {g‚ÇÅ g‚ÇÇ g‚ÇÉ x} -> x ‚ä¢ g‚ÇÅ ‚Ü™ g‚ÇÇ -> g‚ÇÇ ‚Ü™‚ãÜ g‚ÇÉ -> g‚ÇÅ ‚Ü™‚ãÜ g‚ÇÉ


-- -- Concatenates two multiple steps reductions
-- _++À¢_ : ‚àÄ {ls} {g‚ÇÅ g‚ÇÇ g‚ÇÉ : Global ls} -> g‚ÇÅ ‚Ü™‚ãÜ g‚ÇÇ -> g‚ÇÇ ‚Ü™‚ãÜ g‚ÇÉ -> g‚ÇÅ ‚Ü™‚ãÜ g‚ÇÉ
-- [] ++À¢ ss‚ÇÇ = ss‚ÇÇ
-- (s ‚à∑ ss‚ÇÅ) ++À¢ ss‚ÇÇ = s ‚à∑ (ss‚ÇÅ ++À¢ ss‚ÇÇ)
