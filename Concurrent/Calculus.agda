import Lattice as L
import Scheduler as S

module Concurrent.Calculus (ùìõ : L.Lattice) (ùì¢ : S.Scheduler ùìõ) where

open import Types ùìõ
open import Sequential.Calculus ùìõ
open S.Scheduler ùìõ ùì¢ renaming (State to StateÀ¢) public

--------------------------------------------------------------------------------

data Thread (œÄ : Context) (l : Label) : Set where
  ‚ü®_,_‚ü© :  ‚àÄ {œÑ} -> Term œÄ œÑ -> Stack l œÑ (Mac l ÔºàÔºâ) -> Thread œÄ l
  ‚àô : Thread œÄ l  -- I define this as bullet even though it is probably not strictly necessary

-- Pool of threads at a certain label
data Pool (l : Label) : ‚Ñï -> Set where
  [] : Pool l 0
  _‚óÖ_ : ‚àÄ {n œÄ} -> Thread œÄ l -> Pool l n -> Pool l (suc n)
  ‚àô : ‚àÄ {n} -> Pool l n

infixr 3 _‚óÖ_

-- Enqueue
_‚ñª_ : ‚àÄ {n œÄ l} -> Pool l n -> Thread œÄ l -> Pool l (suc n)
[] ‚ñª t = t ‚óÖ []
(x ‚óÖ ts) ‚ñª t = x ‚óÖ (ts ‚ñª t)
‚àô ‚ñª t = ‚àô

--------------------------------------------------------------------------------

-- A list of pools
data Pools : List Label -> Set where
  [] : Pools []
  _‚óÖ_ : ‚àÄ {l ls n} {{u : Unique l ls}} -> Pool l n -> Pools ls -> Pools (l ‚à∑ ls)

open import Relation.Binary.PropositionalEquality

pools-unique : ‚àÄ {l ls} -> (x y : l ‚àà ls) -> Pools ls -> x ‚â° y
pools-unique here here (x ‚óÖ p) = refl
pools-unique here (there y) (_‚óÖ_ {{u}} t p) = ‚ä•-elim (‚àà-not-unique y u)
pools-unique (there x) here (_‚óÖ_ {{u}} t p) = ‚ä•-elim (‚àà-not-unique x u)
pools-unique (there x) (there y) (x‚ÇÅ ‚óÖ p) rewrite pools-unique x y p = refl

infixl 3 _‚ñª_

--------------------------------------------------------------------------------

-- The global configuration is a thread pool paired with some shared split memory Œ£
record Global (ls : List Label) : Set where
  constructor ‚ü®_,_,_‚ü©
  field Œ£ : StateÀ¢
        Œì : Heap ls
        P : Pools ls

open Global public
open import Relation.Binary.PropositionalEquality

-- TODO do we need this?
-- state-‚â° : ‚àÄ {ls} {g‚ÇÅ g‚ÇÇ : Global ls} -> g‚ÇÅ ‚â° g‚ÇÇ -> state g‚ÇÅ ‚â° state g‚ÇÇ
-- state-‚â° refl = refl

-- store·µç-‚â° : ‚àÄ {ls} {g‚ÇÅ g‚ÇÇ : Global ls} -> g‚ÇÅ ‚â° g‚ÇÇ -> store·µç g‚ÇÅ ‚â° store·µç g‚ÇÇ
-- store·µç-‚â° refl = refl

-- pools-‚â° : ‚àÄ {ls} {g‚ÇÅ g‚ÇÇ : Global ls} -> g‚ÇÅ ‚â° g‚ÇÇ -> pools g‚ÇÅ ‚â° pools g‚ÇÇ
-- pools-‚â° refl = refl
