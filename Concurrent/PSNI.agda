import Lattice as L
import Scheduler as S
open import Scheduler.Security


module Concurrent.PSNI {­ЮЊЏ : L.Lattice} {­ЮЊб : S.Scheduler ­ЮЊЏ} (A : L.Label ­ЮЊЏ) (­ЮЊЮ : NI╦б ­ЮЊЏ A ­ЮЊб) where

open import Types ­ЮЊЏ

open import Data.Product using (РѕЃ ; _├Ќ_ ; projРѓЂ ; projРѓѓ )
import Data.Product as P

open import Relation.Nullary
open import Relation.Binary.PropositionalEquality
--------------------------------------------------------------------------------
-- Temporarily side-step bug #2245

import Sequential.Calculus as SC
open SC ­ЮЊЏ

open import Sequential.Semantics ­ЮЊЏ

import Concurrent.Calculus as C
open C ­ЮЊЏ ­ЮЊб
-- open import Concurrent.Calculus ­ЮЊЏ ­ЮЊб

import Concurrent.Semantics as CS
open CS ­ЮЊЏ ­ЮЊб
-- open import Concurrent.Semantics ­ЮЊЏ ­ЮЊб public

open import Sequential.Erasure ­ЮЊЏ A as SE hiding (╬хрхђ ; ╬хр┤Й ; ╬х╦б)
open import Sequential.PINI ­ЮЊЏ A using (stepр┤И ; stepр┤┤-╬Њ ; stepр┤┤)


--------------------------------------------------------------------------------

open Scheduler.Security.NI╦б ­ЮЊЏ A ­ЮЊЮ renaming (State to State╦б)
open import Scheduler.Base ­ЮЊЏ

open import Concurrent.Erasure A ­ЮЊЮ hiding (updateрхђ ; updateр┤Й)
open import Concurrent.Lemmas A ­ЮЊЮ

import Concurrent.LowEq  A ­ЮЊЮ as LРѓЂ
open LРѓЂ

import Sequential.LowEq  ­ЮЊЏ A as LРѓѓ
open LРѓѓ

import Sequential.Graph  as G
open G ­ЮЊЏ A

--------------------------------------------------------------------------------

data  _РєфРІє-РЅѕр┤│_ {ls} (gРѓѓ : Global ls) (gРѓЂ' : Global ls) : Set where
   Cр┤│ : Рѕђ (gРѓѓ' : Global ls) -> gРѓЂ' РЅѕр┤│ gРѓѓ' -> gРѓѓ РєфРІє gРѓѓ' -> gРѓѓ РєфРІє-РЅѕр┤│ gРѓЂ'

open import Data.Nat
open import Function

memberр┤Й-РЅѕ : Рѕђ {ls L} {TРѓЂ : Pool L} {PРѓЂ PРѓѓ : Pools ls} -> (x : Dec (L РіЉ A)) -> L Рєд TРѓЂ Рѕѕр┤Й PРѓЂ -> PРѓЂ РЅѕр┤Й PРѓѓ -> РѕЃ (╬╗ TРѓѓ -> TРѓЂ РЅѕрхђРЪе x РЪЕ TРѓѓ ├Ќ L Рєд TРѓѓ Рѕѕр┤Й PРѓѓ)
memberр┤Й-РЅѕ x C.here (TРѓЂРЅѕTРѓѓ РЌЁ PРѓЂРЅѕPРѓѓ) = _ P., (ext-РЅѕрхђ TРѓЂРЅѕTРѓѓ x P., here)
memberр┤Й-РЅѕ x (C.there TРѕѕPРѓЂ) (xРѓЂ РЌЁ PРѓЂРЅѕPРѓѓ) = P.map id (P.map id there) (memberр┤Й-РЅѕ x TРѕѕPРѓЂ PРѓЂРЅѕPРѓѓ)

memberрхђ-РЅѕ : Рѕђ {n L} {TРѓЂ TРѓѓ : Pool L} {tРѓЂ : Thread L} -> (LРіЉA : L РіЉ A) -> n Рєд tРѓЂ Рѕѕрхђ TРѓЂ -> TРѓЂ РЅѕрхђРЪе yes LРіЉA РЪЕ TРѓѓ -> РѕЃ (╬╗ tРѓѓ Рєњ (tРѓЂ РЅѕрхЌ tРѓѓ) ├Ќ n Рєд tРѓѓ Рѕѕрхђ TРѓѓ)
memberрхђ-РЅѕ lРіЉA C.here (cons .lРіЉA x TРѓЂРЅѕTРѓѓ) = _ P., x P., C.here
memberрхђ-РЅѕ lРіЉA (C.there tРѕѕTРѓЂ) (cons .lРіЉA x TРѓЂРЅѕTРѓѓ) = P.map id (P.map id there) (memberрхђ-РЅѕ lРіЉA tРѕѕTРѓЂ TРѓЂРЅѕTРѓѓ)

updateрхђ-РЅѕ : Рѕђ {n L} {TРѓЂ TРѓЂ' TРѓѓ : Pool L} {tРѓЂ tРѓѓ : Thread L} -> (LРіЉA : L РіЉ A) -> TРѓЂ' РЅћ TРѓЂ [ n Рєд tРѓЂ ]рхђ ->
            TРѓЂ РЅѕрхђРЪе yes LРіЉA РЪЕ TРѓѓ -> tРѓЂ РЅѕрхЌ tРѓѓ -> РѕЃ (╬╗ TРѓѓ' Рєњ TРѓЂ' РЅѕрхђРЪе yes LРіЉA РЪЕ TРѓѓ'  ├Ќ TРѓѓ' РЅћ TРѓѓ [ n Рєд tРѓѓ ]рхђ)
updateрхђ-РЅѕ LРіЉA C.here (cons .LРіЉA x TРѓЂРЅѕTРѓѓ) tРѓЂРЅѕtРѓѓ = _ P., cons LРіЉA tРѓЂРЅѕtРѓѓ TРѓЂРЅѕTРѓѓ P., C.here
updateрхђ-РЅѕ LРіЉA (C.there uрхђ) (cons .LРіЉA x TРѓЂРЅѕTРѓѓ) tРѓЂРЅѕtРѓѓ = P.map (_РЌЁ_ _) (P.map (cons LРіЉA x) there) (updateрхђ-РЅѕ LРіЉA uрхђ TРѓЂРЅѕTРѓѓ tРѓЂРЅѕtРѓѓ)

updateр┤Й-РЅѕ : Рѕђ {l ls} {PРѓЂ PРѓѓ PРѓЂ' : Pools ls} {TРѓЂ TРѓѓ : Pool l}  (x : Dec (l РіЉ A)) -> PРѓЂ' РЅћ PРѓЂ [ l Рєд TРѓЂ ]р┤Й ->
             PРѓЂ РЅѕр┤Й PРѓѓ -> TРѓЂ РЅѕрхђРЪе x РЪЕ TРѓѓ -> РѕЃ (╬╗ PРѓѓ' Рєњ PРѓЂ' РЅѕр┤Й PРѓѓ' ├Ќ PРѓѓ' РЅћ PРѓѓ [ l Рєд TРѓѓ ]р┤Й)
updateр┤Й-РЅѕ x C.here (_ РЌЁ PРѓЂРЅѕPРѓѓ) TРѓЂРЅѕTРѓѓ = _ P., (((ext-РЅѕрхђ TРѓЂРЅѕTРѓѓ _) РЌЁ PРѓЂРЅѕPРѓѓ) P., here)
updateр┤Й-РЅѕ x (C.there uр┤Й) (TРѓЂРЅѕTРѓѓ' РЌЁ PРѓЂРЅѕPРѓѓ) TРѓЂРЅѕTРѓѓ = P.map (_РЌЁ_ _) (P.map (_РЌЁ_ TРѓЂРЅѕTРѓѓ') there) (updateр┤Й-РЅѕ x uр┤Й PРѓЂРЅѕPРѓѓ TРѓЂРЅѕTРѓѓ)

val-РЅѕ : Рѕђ {¤ђ ¤ё} {tРѓЂ tРѓѓ : Term ¤ђ ¤ё} -> tРѓЂ LРѓѓ.РЅѕрхђ tРѓѓ -> Value tРѓЂ -> Value tРѓѓ
val-РЅѕ РЪе eРѓЂ , eРѓѓ РЪЕ val = valр┤▒ eРѓѓ (valРѓЂр┤▒ eРѓЂ val)

stuck-РЅѕ : Рѕђ {l ls ¤ё} {pРѓЂ pРѓѓ : Program l ls ¤ё} (lРіЉA : l РіЉ A) -> pРѓЂ LРѓѓ.РЅѕр┤ЙРЪе (yes lРіЉA) РЪЕ pРѓѓ -> Stuckр┤Й pРѓЂ -> Stuckр┤Й pРѓѓ
stuck-РЅѕ lРіЉA eq stuckРѓЂ = {!!}

┬гfork-РЅѕ : Рѕђ {¤ђ ¤ё} {tРѓЂ tРѓѓ : Term ¤ђ ¤ё} -> tРѓЂ LРѓѓ.РЅѕрхђ tРѓѓ -> ┬г (IsFork tРѓЂ) -> ┬г (IsFork tРѓѓ)
┬гfork-РЅѕ РЪе G.unId eРѓЂ , () РЪЕ ┬гforkРѓЂ (SC.Fork p tРѓЂ)
┬гfork-РЅѕ РЪе G.Var ¤ёРѕѕ¤ђ , () РЪЕ ┬гforkРѓЂ (SC.Fork p t)
┬гfork-РЅѕ РЪе G.App eРѓѓ eРѓЂ , () РЪЕ ┬гforkРѓЂ (SC.Fork p t)
┬гfork-РЅѕ РЪе G.If eРѓЂ Then eРѓѓ Else eРѓЃ , () РЪЕ ┬гforkРѓЂ (SC.Fork p t)
┬гfork-РЅѕ РЪе G.Return eРѓЂ , () РЪЕ ┬гforkРѓЂ (SC.Fork p tРѓЂ)
┬гfork-РЅѕ РЪе eРѓЂ G.>>= eРѓѓ , () РЪЕ ┬гforkРѓЂ (SC.Fork p t)
┬гfork-РЅѕ РЪе G.Mac eРѓЂ , () РЪЕ ┬гforkРѓЂ (SC.Fork p tРѓЂ)
┬гfork-РЅѕ РЪе G.unlabel lРіЉh eРѓЂ , () РЪЕ ┬гforkРѓЂ (SC.Fork p tРѓЂ)
┬гfork-РЅѕ РЪе G.read lРіЉh eРѓЂ , () РЪЕ ┬гforkРѓЂ (SC.Fork p tРѓЂ)
┬гfork-РЅѕ РЪе G.write lРіЉh hРіЉA eРѓЂ eРѓѓ , () РЪЕ ┬гforkРѓЂ (SC.Fork p t)
┬гfork-РЅѕ РЪе G.write' lРіЉh hРІцA eРѓЂ eРѓѓ , () РЪЕ ┬гforkРѓЂ (SC.Fork p t)
┬гfork-РЅѕ РЪе G.writeРѕЎ lРіЉh eРѓЂ eРѓѓ , () РЪЕ ┬гforkРѓЂ (SC.Fork p t)
┬гfork-РЅѕ РЪе G.fork lРіЉh hРіЉA eРѓЂ , G.fork .lРіЉh hРіЉAРѓЂ eРѓѓ РЪЕ ┬гforkРѓЂ (SC.Fork .lРіЉh tРѓЂ) = ┬гforkРѓЂ (SC.Fork lРіЉh _)
┬гfork-РЅѕ РЪе G.fork' lРіЉh hРІцA eРѓЂ , G.fork' .lРіЉh hРІцAРѓЂ eРѓѓ РЪЕ ┬гforkРѓЂ (SC.Fork .lРіЉh tРѓЂ) = ┬гforkРѓЂ (SC.Fork lРіЉh _)
┬гfork-РЅѕ РЪе G.forkРѕЎ lРіЉh eРѓЂ , G.fork' .lРіЉh hРІцA eРѓѓ РЪЕ ┬гforkРѓЂ (SC.Fork .lРіЉh tРѓЂ) = ┬гforkРѓЂ (SC.ForkРѕЎ lРіЉh _)
┬гfork-РЅѕ РЪе G.deepDup eРѓЂ , () РЪЕ ┬гforkРѓЂ (SC.Fork p tРѓЂ)
┬гfork-РЅѕ РЪе G.РѕЎ , () РЪЕ ┬гforkРѓЂ (SC.Fork p t)
┬гfork-РЅѕ РЪе G.fork' p hРІцA eРѓЂ , G.forkРѕЎ .p eРѓѓ РЪЕ ┬гforkРѓЂ (SC.ForkРѕЎ .p tРѓЂ) = ┬гforkРѓЂ (SC.Fork p _)
┬гfork-РЅѕ РЪе G.forkРѕЎ p eРѓЂ , G.forkРѕЎ .p eРѓѓ РЪЕ ┬гforkРѓЂ (SC.ForkРѕЎ .p tРѓЂ) = ┬гforkРѓЂ (SC.ForkРѕЎ p _)

redex-РЅѕ : Рѕђ {l ls ¤ё} {pРѓЂ pРѓЂ' pРѓѓ : Program l ls ¤ё} -> (lРіЉA : l РіЉ A) -> pРѓЂ LРѓѓ.РЅѕр┤ЙРЪе (yes lРіЉA) РЪЕ pРѓѓ -> pРѓЂ РЪ╝ pРѓЂ' ->
            РѕЃ (╬╗ pРѓѓ' -> (pРѓЂ' LРѓѓ.РЅѕр┤ЙРЪе yes lРіЉA РЪЕ pРѓѓ') ├Ќ (pРѓѓ РЪ╝ pРѓѓ'))
redex-РЅѕ = {!!}

lengthрхђ-РЅѕ : Рѕђ {l} {TРѓЂ TРѓѓ : Pool l} -> (lРіЉA : l РіЉ A) -> TРѓЂ РЅѕрхђРЪе yes lРіЉA РЪЕ TРѓѓ -> lengthрхђ TРѓЂ РЅА lengthрхђ TРѓѓ
lengthрхђ-РЅѕ {_} {TРѓЂ} {TРѓѓ} lРіЉA TРѓЂРЅѕTРѓѓ rewrite lengthрхђ-╬х-РЅА lРіЉA TРѓЂ | lengthрхђ-╬х-РЅА lРіЉA TРѓѓ | LРѓЂ.Рїъ TРѓЂРЅѕTРѓѓ РїЪрхђ = refl

newрхђ-РЅѕ : Рѕђ {l} {TРѓЂ TРѓѓ : Pool l} {tРѓЂ tРѓѓ : Thread l} {x : Dec _} -> TРѓЂ РЅѕрхђРЪе x РЪЕ TРѓѓ -> tРѓЂ РЅѕрхЌ tРѓѓ -> (TРѓЂ Рќ╗ tРѓЂ) РЅѕрхђРЪе x РЪЕ (TРѓѓ Рќ╗ tРѓѓ)
newрхђ-РЅѕ (nil lРіЉA) tРѓЂРЅѕtРѓѓ = cons lРіЉA tРѓЂРЅѕtРѓѓ (nil lРіЉA)
newрхђ-РЅѕ (cons lРіЉA x TРѓЂРЅѕTРѓѓ) tРѓЂРЅѕtРѓѓ = cons lРіЉA x (newрхђ-РЅѕ TРѓЂРЅѕTРѓѓ tРѓЂРЅѕtРѓѓ)
newрхђ-РЅѕ РѕЎр┤И tРѓЂРЅѕtРѓѓ = РѕЎр┤И
newрхђ-РЅѕ РѕЎ tРѓЂРЅѕtРѓѓ = РѕЎ

postulate trans-РЅѕр┤┤ : Рѕђ {ls} {HРѓЂ HРѓѓ HРѓЃ : Heaps ls} -> HРѓЂ РЅѕр┤┤ HРѓѓ -> HРѓѓ РЅѕр┤┤ HРѓЃ -> HРѓЂ РЅѕр┤┤ HРѓЃ

-- This is consistent with the fact that our lists are truly mappings
-- they are not defined so becuase they are inconvinient to reason with
postulate _Рѕѕр┤И_ : (l : Label) (ls : List Label) -> l Рѕѕ ls  -- TODO probably can be added to the lattice

lookupр┤Й : Рѕђ {l ls} -> l Рѕѕ ls -> (P : Pools ls) -> РѕЃ (╬╗ T Рєњ l Рєд T Рѕѕр┤Й P)
lookupр┤Й here (T C.РЌЁ P) = T P., here
lookupр┤Й (there q) (T' C.РЌЁ P) = P.map id there (lookupр┤Й q P)

-- The scheduler gives me only valid thread id
postulate lookupрхђ : Рѕђ {l} -> (n : SC.РёЋ) (T : Pool l) -> РѕЃ (╬╗ t Рєњ n Рєд t Рѕѕрхђ T)

updateрхђ : Рѕђ {l n} {t : Thread l} {T : Pool l} -> n Рєд t Рѕѕрхђ T -> (t' : Thread l) -> РѕЃ (╬╗ T' Рєњ T' РЅћ T [ n Рєд t' ]рхђ)
updateрхђ C.here t' = _ P., here
updateрхђ (C.there x) t' = P.map (_РЌЁ_ _) there (updateрхђ x t')

updateр┤Й : Рѕђ {l ls} {T : Pool l} {P : Pools ls} -> l Рєд T Рѕѕр┤Й P -> (T' : Pool l) -> РѕЃ (╬╗ P' Рєњ P' РЅћ P [ l Рєд T' ]р┤Й)
updateр┤Й = {!!}

-- TODO move to Semantics
postulate stateр┤Й : Рѕђ {l ls ¤ё} (p : Program l ls ¤ё) -> Stateр┤Й p

isFork? : Рѕђ {¤ђ ¤ё} (t : Term ¤ђ ¤ё) -> Dec (IsFork t)
isFork? t = {!!}

secureStack : Рѕђ {l l' ¤ё} -> Stack l (Mac l' ¤ё) (Mac l ¤ё) -> l' РЅА l
secureStack [] = refl
secureStack (# ¤ёРѕѕ¤ђ Рѕи S) = secureStack S
secureStack (Bind x Рѕи S) = refl
secureStack РѕЎ = refl

open import Sequential.Graph ­ЮЊЏ A

╬хр┤│-simр┤ИРІє : Рѕђ {L n nРѓЂ ls} {╬БРѓЂ ╬БРѓЂ' ╬БРѓѓ : State╦б} {╬ЊРѓЂ ╬ЊРѓЂ' ╬ЊРѓѓ : Heaps ls} {PРѓЂ PРѓЂ' PРѓѓ : Pools ls} ->
               (nРѓѓ : SC.РёЋ) ->
               ╬БРѓЂ РЅѕ╦б-РЪе nРѓЂ , nРѓѓ РЪЕ ╬БРѓѓ ->
               let gРѓЂ = РЪе ╬БРѓЂ , ╬ЊРѓЂ , PРѓЂ РЪЕ
                   gРѓЂ' = РЪе ╬БРѓЂ' , ╬ЊРѓЂ' , PРѓЂ' РЪЕ
                   gРѓѓ = РЪе ╬БРѓѓ , ╬ЊРѓѓ , PРѓѓ РЪЕ in
               L РіЉ A -> (L P., n)  Ріб gРѓЂ Рєф gРѓЂ' -> gРѓЂ РЅѕр┤│ gРѓѓ -> gРѓѓ РєфРІє-РЅѕр┤│ gРѓЂ'

╬хр┤│-simр┤ИРІє SC.zero ╬БРѓЂРЅѕ╬БРѓѓ LРіЉA step gРѓЂ'РЅѕgРѓѓ' with square╦б LРіЉA ╬БРѓЂРЅѕ╬БРѓѓ (getSchStep step)

╬хр┤│-simр┤ИРІє zero _ LРіЉA (CS.step-РѕЁ lРѕѕPРѓЂ tРѕѕTРѓЂ ┬гforkРѓЂ stepРѓЂ schРѓЂ uРѓЂрхђ uРѓЂр┤Й) LРѓЂ.РЪе ╬БРѓЂРЅѕ╬БРѓѓ , PРѓЂРЅѕPРѓѓ , ╬ЊРѓЂРЅѕ╬ЊРѓѓ РЪЕ
    | ╬БРѓѓ' P., sch' P., ╬БРѓЂ'РЅѕ╬БРѓѓ' with memberр┤Й-РЅѕ (yes LРіЉA) lРѕѕPРѓЂ PРѓЂРЅѕPРѓѓ
... | TРѓѓ P., TРѓЂРЅѕTРѓѓ P., lРѕѕPРѓѓ with memberрхђ-РЅѕ LРіЉA tРѕѕTРѓЂ TРѓЂРЅѕTРѓѓ
... | _ P., РЪе tРѓЂРЅѕtРѓѓ , SРѓЂРЅѕSРѓѓ РЪЕ P., tРѕѕTРѓѓ with redex-РЅѕ LРіЉA LРѓѓ.РЪе ╬ЊРѓЂРЅѕ╬ЊРѓѓ , tРѓЂРЅѕtРѓѓ , SРѓЂРЅѕSРѓѓ РЪЕ stepРѓЂ
... | _ P., LРѓѓ.РЪе ╬ЊРѓЂ'РЅѕ╬ЊРѓѓ' , tРѓЂ'РЅѕtРѓѓ' , SРѓЂ'РЅѕSРѓѓ' РЪЕ  P., stepРѓѓ with updateрхђ-РЅѕ LРіЉA uРѓЂрхђ TРѓЂРЅѕTРѓѓ LРѓЂ.РЪе tРѓЂ'РЅѕtРѓѓ' , SРѓЂ'РЅѕSРѓѓ' РЪЕ
... | TРѓѓ' P., TРѓЂ'РЅѕTРѓѓ' P., uРѓѓрхђ with updateр┤Й-РЅѕ (yes LРіЉA) uРѓЂр┤Й PРѓЂРЅѕPРѓѓ TРѓЂ'РЅѕTРѓѓ'
... | PРѓѓ' P., PРѓЂ'РЅѕPРѓѓ' P., uРѓѓр┤Й
  = Cр┤│ _ LРѓЂ.РЪе ╬БРѓЂ'РЅѕ╬БРѓѓ' , PРѓЂ'РЅѕPРѓѓ' , ╬ЊРѓЂ'РЅѕ╬ЊРѓѓ' РЪЕ (step-РѕЁ lРѕѕPРѓѓ tРѕѕTРѓѓ (┬гfork-РЅѕ tРѓЂРЅѕtРѓѓ ┬гforkРѓЂ) stepРѓѓ sch' uРѓѓрхђ uРѓѓр┤Й Рѕи [])

╬хр┤│-simр┤ИРІє zero _ LРіЉA (CS.fork lРѕѕPРѓЂ tРѕѕTРѓЂ stepРѓЂ uРѓЂрхђ uРѓЂр┤Й HРѕѕPРѓЂ sch uРѓЂр┤Й') LРѓЂ.РЪе ╬БРѓЂРЅѕ╬БРѓѓ , PРѓЂРЅѕPРѓѓ , ╬ЊРѓЂРЅѕ╬ЊРѓѓ РЪЕ
    | ╬БРѓѓ' P., sch' P., ╬БРѓЂ'РЅѕ╬БРѓѓ' with memberр┤Й-РЅѕ (yes LРіЉA) lРѕѕPРѓЂ PРѓЂРЅѕPРѓѓ
... | TРѓѓ P., TРѓЂРЅѕTРѓѓ P., lРѕѕPРѓѓ with memberрхђ-РЅѕ LРіЉA tРѕѕTРѓЂ TРѓЂРЅѕTРѓѓ
╬хр┤│-simр┤ИРІє zero _ LРіЉA (CS.fork lРѕѕPРѓЂ tРѕѕTРѓЂ stepРѓЂ uРѓЂрхђ uРѓЂр┤Й HРѕѕPРѓЂ sch uРѓЂр┤Й') LРѓЂ.РЪе ╬БРѓЂРЅѕ╬БРѓѓ , PРѓЂРЅѕPРѓѓ , ╬ЊРѓЂРЅѕ╬ЊРѓѓ РЪЕ

    -- Fork
    | ╬БРѓѓ' P., sch' P., ╬БРѓЂ'РЅѕ╬БРѓѓ' | TРѓѓ P., TРѓЂРЅѕTРѓѓ P., lРѕѕPРѓѓ
    | ._ P., LРѓЂ.РЪе РЪе G.fork lРіЉH hРіЉA eРѓЂ , G.fork .lРіЉH hРіЉAРѓЂ eРѓѓ РЪЕ , SРѓЂРЅѕSРѓѓ РЪЕ P., tРѕѕTРѓѓ
         with redex-РЅѕ LРіЉA LРѓѓ.РЪе ╬ЊРѓЂРЅѕ╬ЊРѓѓ , РЪе ( G.fork lРіЉH hРіЉA eРѓЂ) , (G.fork lРіЉH hРіЉAРѓЂ eРѓѓ) РЪЕ , SРѓЂРЅѕSРѓѓ РЪЕ stepРѓЂ
... | _ P., LРѓѓ.РЪе ╬ЊРѓЂ'РЅѕ╬ЊРѓѓ' , tРѓЂ'РЅѕtРѓѓ' , SРѓЂ'РЅѕSРѓѓ' РЪЕ  P., stepРѓѓ with updateрхђ-РЅѕ LРіЉA uРѓЂрхђ TРѓЂРЅѕTРѓѓ LРѓЂ.РЪе tРѓЂ'РЅѕtРѓѓ' , SРѓЂ'РЅѕSРѓѓ' РЪЕ
... | TРѓѓ' P., TРѓЂ'РЅѕTРѓѓ' P., uРѓѓрхђ with updateр┤Й-РЅѕ (yes LРіЉA) uРѓЂр┤Й PРѓЂРЅѕPРѓѓ TРѓЂ'РЅѕTРѓѓ'
... | PРѓѓ' P., PРѓЂ'РЅѕPРѓѓ' P., uРѓѓр┤Й with memberр┤Й-РЅѕ (yes hРіЉA) HРѕѕPРѓЂ PРѓЂ'РЅѕPРѓѓ'
... | Tр┤┤Рѓѓ P., Tр┤┤РѓѓРЅѕTРѓЂр┤┤ P., HРѕѕPРѓѓ
  rewrite lengthрхђ-РЅѕ hРіЉA Tр┤┤РѓѓРЅѕTРѓЂр┤┤ with updateр┤Й-РЅѕ (yes hРіЉA) uРѓЂр┤Й' PРѓЂ'РЅѕPРѓѓ' (newрхђ-РЅѕ Tр┤┤РѓѓРЅѕTРѓЂр┤┤ LРѓЂ.РЪе РЪе eРѓЂ , eРѓѓ РЪЕ , [] РЪЕ)
... | PРѓѓ'' P., PРѓѓ''РЅѕPРѓЂ'' P., uр┤ЙРѓѓРђ▓ = Cр┤│ _ LРѓЂ.РЪе ╬БРѓЂ'РЅѕ╬БРѓѓ' , PРѓѓ''РЅѕPРѓЂ'' , ╬ЊРѓЂ'РЅѕ╬ЊРѓѓ' РЪЕ (fork lРѕѕPРѓѓ tРѕѕTРѓѓ stepРѓѓ uРѓѓрхђ uРѓѓр┤Й HРѕѕPРѓѓ sch' uр┤ЙРѓѓРђ▓ Рѕи [])

╬хр┤│-simр┤ИРІє zero ╬БРѓЂРЅѕ╬БРѓѓ LРіЉA (CS.fork lРѕѕPРѓЂ tРѕѕTРѓЂ stepРѓЂ uРѓЂрхђ uРѓЂр┤Й HРѕѕPРѓЂ sch uРѓЂр┤Й') LРѓЂ.РЪе ╬БРѓЂРЅѕ╬БРѓЃ , PРѓЂРЅѕPРѓѓ , ╬ЊРѓЂРЅѕ╬ЊРѓѓ РЪЕ
  -- ForkРѕЎ
  | ╬БРѓѓ' P., sch' P., ╬БРѓЂ'РЅѕ╬БРѓѓ' | TРѓѓ P., TРѓЂРЅѕTРѓѓ P., lРѕѕPРѓѓ
  | ._ P., LРѓЂ.РЪе РЪе G.fork' lРіЉH hРІцA eРѓЂ , G.fork' .lРіЉH hРІцAРѓЂ eРѓѓ РЪЕ , SРѓЂРЅѕSРѓѓ РЪЕ P., tРѕѕTРѓѓ
    with redex-РЅѕ LРіЉA LРѓѓ.РЪе ╬ЊРѓЂРЅѕ╬ЊРѓѓ , РЪе ( G.fork' lРіЉH hРІцA eРѓЂ) , G.fork' lРіЉH hРІцAРѓЂ eРѓѓ РЪЕ , SРѓЂРЅѕSРѓѓ РЪЕ stepРѓЂ
... | _ P., LРѓѓ.РЪе ╬ЊРѓЂ'РЅѕ╬ЊРѓѓ' , tРѓЂ'РЅѕtРѓѓ' , SРѓЂ'РЅѕSРѓѓ' РЪЕ  P., stepРѓѓ with updateрхђ-РЅѕ LРіЉA uРѓЂрхђ TРѓЂРЅѕTРѓѓ LРѓЂ.РЪе tРѓЂ'РЅѕtРѓѓ' , SРѓЂ'РЅѕSРѓѓ' РЪЕ
... | TРѓѓ' P., TРѓЂ'РЅѕTРѓѓ' P., uРѓѓрхђ with updateр┤Й-РЅѕ (yes LРіЉA) uРѓЂр┤Й PРѓЂРЅѕPРѓѓ TРѓЂ'РЅѕTРѓѓ'
... | PРѓѓ' P., PРѓЂ'РЅѕPРѓѓ' P., uРѓѓр┤Й with memberр┤Й-РЅѕ (no hРІцA) HРѕѕPРѓЂ PРѓЂ'РЅѕPРѓѓ'
... | Tр┤┤Рѓѓ P., Tр┤┤РѓѓРЅѕTРѓЂр┤┤ P., HРѕѕPРѓѓ with id-РЅѕ╦б (lengthрхђ Tр┤┤Рѓѓ) lРіЉH LРіЉA hРІцA sch'
... | ╬БРѓѓ'' P., sch'' P., ╬БРѓѓ'РЅѕ╬БРѓѓ'' with updateр┤Й-РЅѕ (no hРІцA) uРѓЂр┤Й' PРѓЂ'РЅѕPРѓѓ' (newрхђ-РЅѕ Tр┤┤РѓѓРЅѕTРѓЂр┤┤ LРѓЂ.РЪе РЪе eРѓЂ , eРѓѓ РЪЕ , [] РЪЕ)
... | PРѓѓ'' P., PРѓѓ''РЅѕPРѓЂ'' P., uр┤ЙРѓѓРђ▓ = Cр┤│ _ LРѓЂ.РЪе trans-РЅѕ╦б ╬БРѓЂ'РЅѕ╬БРѓѓ' ╬БРѓѓ'РЅѕ╬БРѓѓ'' , PРѓѓ''РЅѕPРѓЂ'' , ╬ЊРѓЂ'РЅѕ╬ЊРѓѓ' РЪЕ (fork lРѕѕPРѓѓ tРѕѕTРѓѓ stepРѓѓ uРѓѓрхђ uРѓѓр┤Й HРѕѕPРѓѓ sch'' uр┤ЙРѓѓРђ▓ Рѕи [])

╬хр┤│-simр┤ИРІє zero ╬БРѓЂРЅѕ╬БРѓѓ LРіЉA (CS.fork {Tр┤┤ = TРѓЂр┤┤} lРѕѕPРѓЂ tРѕѕTРѓЂ stepРѓЂ uРѓЂрхђ uРѓЂр┤Й HРѕѕPРѓЂ sch uРѓЂр┤Й') LРѓЂ.РЪе ╬БРѓЂРЅѕ╬БРѓЃ , PРѓЂРЅѕPРѓѓ , ╬ЊРѓЂРЅѕ╬ЊРѓѓ РЪЕ
  -- ForkРѕЎ
  | ╬БРѓѓ' P., sch' P., ╬БРѓЂ'РЅѕ╬БРѓѓ' | TРѓѓ P., TРѓЂРЅѕTРѓѓ P., lРѕѕPРѓѓ
  | ._ P., LРѓЂ.РЪе РЪе G.fork' lРіЉH hРІцA eРѓЂ , G.forkРѕЎ .lРіЉH eРѓѓ РЪЕ , SРѓЂРЅѕSРѓѓ РЪЕ P., tРѕѕTРѓѓ
       with redex-РЅѕ LРіЉA LРѓѓ.РЪе ╬ЊРѓЂРЅѕ╬ЊРѓѓ , РЪе ( G.fork' lРіЉH hРІцA eРѓЂ) , G.forkРѕЎ lРіЉH eРѓѓ РЪЕ , SРѓЂРЅѕSРѓѓ РЪЕ stepРѓЂ
... | _ P., LРѓѓ.РЪе ╬ЊРѓЂ'РЅѕ╬ЊРѓѓ' , tРѓЂ'РЅѕtРѓѓ' , SРѓЂ'РЅѕSРѓѓ' РЪЕ  P., stepРѓѓ with updateрхђ-РЅѕ LРіЉA uРѓЂрхђ TРѓЂРЅѕTРѓѓ LРѓЂ.РЪе tРѓЂ'РЅѕtРѓѓ' , SРѓЂ'РЅѕSРѓѓ' РЪЕ
... | TРѓѓ' P., TРѓЂ'РЅѕTРѓѓ' P., uРѓѓрхђ with updateр┤Й-РЅѕ (yes LРіЉA) uРѓЂр┤Й PРѓЂРЅѕPРѓѓ TРѓЂ'РЅѕTРѓѓ'
... | PРѓѓ' P., PРѓЂ'РЅѕPРѓѓ' P., uРѓѓр┤Й with step-РЅѕ╦б lРіЉH LРіЉA hРІцA sch'
... | ╬БРѓѓ'' P., sch'' P., ╬БРѓѓ'РЅѕ╬БРѓѓ'' with updateр┤Й-РЅѕ {TРѓѓ = TРѓЂр┤┤} (no hРІцA) uРѓЂр┤Й' PРѓЂ'РЅѕPРѓѓ' LРѓЂ.РѕЎ
... | PРѓѓ'' P., PРѓЂ''РЅѕPРѓѓ'' P., uр┤ЙРѓѓРђ▓
  = Cр┤│ _ LРѓЂ.РЪе (trans-РЅѕ╦б ╬БРѓЂ'РЅѕ╬БРѓѓ' ╬БРѓѓ'РЅѕ╬БРѓѓ'') , trans-РЅѕр┤Й PРѓЂ''РЅѕPРѓѓ'' LРѓЂ.Рїю sym (updateр┤ЙРѕЎ hРІцA uр┤ЙРѓѓРђ▓) РїЮр┤Й , ╬ЊРѓЂ'РЅѕ╬ЊРѓѓ' РЪЕ (forkРѕЎ lРѕѕPРѓѓ tРѕѕTРѓѓ stepРѓѓ uРѓѓрхђ uРѓѓр┤Й sch'' Рѕи [])

╬хр┤│-simр┤ИРІє zero _ LРіЉA (CS.forkРѕЎ {PРѓѓ = PРѓЂ'} lРѕѕPРѓЂ tРѕѕTРѓЂ stepРѓЂ uРѓЂрхђ uРѓЂр┤Й sch) LРѓЂ.РЪе ╬БРѓЂРЅѕ╬БРѓѓ , PРѓЂРЅѕPРѓѓ , ╬ЊРѓЂРЅѕ╬ЊРѓѓ РЪЕ
    | ╬БРѓѓ' P., sch' P., ╬БРѓЂ'РЅѕ╬БРѓѓ' with memberр┤Й-РЅѕ (yes LРіЉA) lРѕѕPРѓЂ PРѓЂРЅѕPРѓѓ
... | TРѓѓ P., TРѓЂРЅѕTРѓѓ P., lРѕѕPРѓѓ with memberрхђ-РЅѕ LРіЉA tРѕѕTРѓЂ TРѓЂРЅѕTРѓѓ

╬хр┤│-simр┤ИРІє {ls = ls} zero ╬БРѓЂРЅѕ╬БРѓѓ LРіЉA (CS.forkРѕЎ {H} {tр┤┤ = tРѓЂр┤┤} {PРѓѓ = PРѓЂ'} lРѕѕPРѓЂ tРѕѕTРѓЂ stepРѓЂ uРѓЂрхђ uРѓЂр┤Й sch) РЪе _ , PРѓЂРЅѕPРѓѓ , ╬ЊРѓЂРЅѕ╬ЊРѓѓ РЪЕ
  | ╬БРѓѓ' P., sch' P., ╬БРѓЂ'РЅѕ╬БРѓѓ' | TРѓѓ P., TРѓЂРЅѕTРѓѓ P., lРѕѕPРѓѓ
  | ._ P., РЪе РЪе G.forkРѕЎ lРіЉH eРѓЂ , G.fork' .lРіЉH hРІцA eРѓѓ РЪЕ , SРѓЂРЅѕSРѓѓ РЪЕ P., tРѕѕTРѓѓ
    with redex-РЅѕ LРіЉA LРѓѓ.РЪе ╬ЊРѓЂРЅѕ╬ЊРѓѓ , РЪе ( G.forkРѕЎ lРіЉH eРѓЂ) , G.fork' lРіЉH hРІцA eРѓѓ РЪЕ , SРѓЂРЅѕSРѓѓ РЪЕ stepРѓЂ
... | _ P., LРѓѓ.РЪе ╬ЊРѓЂ'РЅѕ╬ЊРѓѓ' , tРѓЂ'РЅѕtРѓѓ' , SРѓЂ'РЅѕSРѓѓ' РЪЕ  P., stepРѓѓ with updateрхђ-РЅѕ LРіЉA uРѓЂрхђ TРѓЂРЅѕTРѓѓ LРѓЂ.РЪе tРѓЂ'РЅѕtРѓѓ' , SРѓЂ'РЅѕSРѓѓ' РЪЕ
... | TРѓѓ' P., TРѓЂ'РЅѕTРѓѓ' P., uРѓѓрхђ with updateр┤Й-РЅѕ (yes LРіЉA) uРѓЂр┤Й PРѓЂРЅѕPРѓѓ TРѓЂ'РЅѕTРѓѓ'
... | PРѓѓ' P., PРѓЂ'РЅѕPРѓѓ' P., uРѓѓр┤Й with lookupр┤Й (H Рѕѕр┤И ls) PРѓЂ'
... | TРѓЂр┤┤ P., HРѕѕPРѓЂ with memberр┤Й-РЅѕ (no hРІцA) HРѕѕPРѓЂ PРѓЂ'РЅѕPРѓѓ'  -- TODO Won't need this if we add HРѕѕPРѓЂ to forkРѕЎ
... | TРѓѓр┤┤ P., TРѓѓр┤┤РЅѕTРѓЂр┤┤ P., HРѕѕPРѓѓ with fork-РЅѕ╦б (lengthрхђ TРѓѓр┤┤) lРіЉH LРіЉA hРІцA sch'
... | ╬БРѓѓ'' P., sch'' P., ╬БРѓѓ'РЅѕ╬БРѓѓ'' with updateр┤Й HРѕѕPРѓЂ (TРѓЂр┤┤ Рќ╗ РЪе tРѓЂр┤┤ , [] РЪЕ)
... | PРѓЂ'' P., uРѓЂр┤ЙРђ▓ with updateр┤Й-РЅѕ {TРѓѓ = TРѓѓр┤┤ Рќ╗ РЪе _ , [] РЪЕ} (no hРІцA) uРѓЂр┤ЙРђ▓ PРѓЂ'РЅѕPРѓѓ' LРѓЂ.РѕЎ  -- PРѓЂ''РЅѕPРѓѓ''
... | PРѓѓ'' P., PРѓЂ''РЅѕPРѓѓ'' P., uРѓѓр┤ЙРђ▓
  = Cр┤│ _ РЪе trans-РЅѕ╦б ╬БРѓЂ'РЅѕ╬БРѓѓ' ╬БРѓѓ'РЅѕ╬БРѓѓ'' , trans-РЅѕр┤Й PРѓЂ'РЅѕPРѓѓ' LРѓЂ.Рїю updateр┤ЙРѕЎ hРІцA uРѓѓр┤ЙРђ▓ РїЮр┤Й , ╬ЊРѓЂ'РЅѕ╬ЊРѓѓ' РЪЕ (fork lРѕѕPРѓѓ tРѕѕTРѓѓ stepРѓѓ uРѓѓрхђ uРѓѓр┤Й HРѕѕPРѓѓ sch'' uРѓѓр┤ЙРђ▓ Рѕи [])

╬хр┤│-simр┤ИРІє zero _ LРіЉA (CS.forkРѕЎ lРѕѕPРѓЂ tРѕѕTРѓЂ stepРѓЂ uРѓЂрхђ uРѓЂр┤Й sch) РЪе ╬БРѓЂРЅѕ╬БРѓѓ , PРѓЂРЅѕPРѓѓ , ╬ЊРѓЂРЅѕ╬ЊРѓѓ РЪЕ
  | ╬БРѓѓ' P., sch' P., ╬БРѓЂ'РЅѕ╬БРѓѓ' | TРѓѓ P., TРѓЂРЅѕTРѓѓ P., lРѕѕPРѓѓ
  | ._ P., РЪе РЪе G.forkРѕЎ lРіЉH eРѓЂ , G.forkРѕЎ .lРіЉH eРѓѓ РЪЕ , SРѓЂРЅѕSРѓѓ РЪЕ P., tРѕѕTРѓѓ
    with redex-РЅѕ LРіЉA LРѓѓ.РЪе ╬ЊРѓЂРЅѕ╬ЊРѓѓ , РЪе ( G.forkРѕЎ lРіЉH eРѓЂ) , G.forkРѕЎ lРіЉH eРѓѓ РЪЕ , SРѓЂРЅѕSРѓѓ РЪЕ stepРѓЂ
... | _ P., LРѓѓ.РЪе ╬ЊРѓЂ'РЅѕ╬ЊРѓѓ' , tРѓЂ'РЅѕtРѓѓ' , SРѓЂ'РЅѕSРѓѓ' РЪЕ  P., stepРѓѓ with updateрхђ-РЅѕ LРіЉA uРѓЂрхђ TРѓЂРЅѕTРѓѓ LРѓЂ.РЪе tРѓЂ'РЅѕtРѓѓ' , SРѓЂ'РЅѕSРѓѓ' РЪЕ
... | TРѓѓ' P., TРѓЂ'РЅѕTРѓѓ' P., uРѓѓрхђ with updateр┤Й-РЅѕ (yes LРіЉA) uРѓЂр┤Й PРѓЂРЅѕPРѓѓ TРѓЂ'РЅѕTРѓѓ'
... | PРѓѓ' P., PРѓЂ'РЅѕPРѓѓ' P., uРѓѓр┤Й
  = Cр┤│ _ РЪе ╬БРѓЂ'РЅѕ╬БРѓѓ' , PРѓЂ'РЅѕPРѓѓ' , ╬ЊРѓЂ'РЅѕ╬ЊРѓѓ' РЪЕ (forkРѕЎ lРѕѕPРѓѓ tРѕѕTРѓѓ stepРѓѓ uРѓѓрхђ uРѓѓр┤Й sch' Рѕи [])

╬хр┤│-simр┤ИРІє zero ╬БРѓЂРЅѕ╬БРѓѓ LРіЉA (CS.skip lРѕѕPРѓЂ tРѕѕTРѓЂ stuckРѓЂ sch) LРѓЂ.РЪе ╬БРѓЂРЅѕ╬БРѓѓ' , PРѓЂРЅѕPРѓѓ , ╬ЊРѓЂРЅѕ╬ЊРѓѓ РЪЕ | ╬БРѓѓ' P., sch' P., ╬БРѓЂ'РЅѕ╬БРѓѓ' with memberр┤Й-РЅѕ (yes LРіЉA) lРѕѕPРѓЂ PРѓЂРЅѕPРѓѓ
... | TРѓѓ P., TРѓЂРЅѕTРѓѓ P., lРѕѕPРѓѓ with memberрхђ-РЅѕ LРіЉA tРѕѕTРѓЂ TРѓЂРЅѕTРѓѓ
... | ._ P., РЪе tРѓЂРЅѕtРѓѓ , SРѓЂРЅѕSРѓѓ РЪЕ P., tРѕѕTРѓѓ
  = Cр┤│ C.РЪе ╬БРѓѓ' , _ , _ РЪЕ LРѓЂ.РЪе ╬БРѓЂ'РЅѕ╬БРѓѓ' , PРѓЂРЅѕPРѓѓ , ╬ЊРѓЂРЅѕ╬ЊРѓѓ РЪЕ (skip lРѕѕPРѓѓ tРѕѕTРѓѓ (stuck-РЅѕ LРіЉA LРѓѓ.РЪе ╬ЊРѓЂРЅѕ╬ЊРѓѓ , tРѓЂРЅѕtРѓѓ , SРѓЂРЅѕSРѓѓ РЪЕ stuckРѓЂ) sch' Рѕи [])

╬хр┤│-simр┤ИРІє zero ╬БРѓЂРЅѕ╬БРѓѓ LРіЉA (CS.done lРѕѕPРѓЂ tРѕѕTРѓЂ (Done isVal) sch) LРѓЂ.РЪе ╬БРѓЂРЅѕ╬БРѓѓ' , PРѓЂРЅѕPРѓѓ , ╬ЊРѓЂРЅѕ╬ЊРѓѓ РЪЕ | ╬БРѓѓ' P., sch' P., ╬БРѓЂ'РЅѕ╬БРѓѓ' with memberр┤Й-РЅѕ (yes LРіЉA) lРѕѕPРѓЂ PРѓЂРЅѕPРѓѓ
... | TРѓѓ P., TРѓЂРЅѕTРѓѓ P., lРѕѕPРѓѓ with memberрхђ-РЅѕ LРіЉA tРѕѕTРѓЂ TРѓЂРЅѕTРѓѓ
... | ._ P., РЪе tРѓЂРЅѕtРѓѓ , LРѓѓ.[] РЪЕ P., tРѕѕTРѓѓ = Cр┤│ РЪе ╬БРѓѓ' , _ , _ РЪЕ LРѓЂ.РЪе ╬БРѓЂ'РЅѕ╬БРѓѓ' , PРѓЂРЅѕPРѓѓ , ╬ЊРѓЂРЅѕ╬ЊРѓѓ РЪЕ (done lРѕѕPРѓѓ tРѕѕTРѓѓ (Done (val-РЅѕ tРѓЂРЅѕtРѓѓ isVal)) sch' Рѕи [])

╬хр┤│-simр┤ИРІє {ls = ls} {╬ЊРѓѓ = ╬ЊРѓѓ} {PРѓѓ = PРѓѓ} (SC.suc nРѓѓ) ╬БРѓЂРЅѕ╬БРѓѓ LРіЉA step LРѓЂ.РЪе _ , PРѓЂРЅѕPРѓѓ , ╬ЊРѓЂРЅѕ╬ЊРѓѓ РЪЕ with triangle╦б LРіЉA ╬БРѓЂРЅѕ╬БРѓѓ (getSchStep step)
... | ╬БРѓѓ' P., H P., m P., HРІцA P., ╬БРѓѓРЅѕ╬БРѓѓ' P., next╦б  with lookupр┤Й (H Рѕѕр┤И ls) PРѓѓ
... | TРѓѓ P., TРѕѕPРѓѓ with lookupрхђ m TРѓѓ
... | РЪе tРѓѓ , SРѓѓ РЪЕ P., tРѕѕTРѓѓ with stateр┤Й РЪе ╬ЊРѓѓ , tРѓѓ , SРѓѓ РЪЕ

╬хр┤│-simр┤ИРІє (suc nРѓѓ) ╬БРѓЂРЅѕ╬БРѓѓ LРіЉA step РЪе ╬БРѓЂРЅѕ╬БРѓЃ , PРѓЂРЅѕPРѓѓ , ╬ЊРѓЂРЅѕ╬ЊРѓѓ РЪЕ
  -- Done
  |  ╬БРѓѓ' P., H P., m P., HРІцA P., ╬БРѓѓРЅѕ╬БРѓѓ' P., next╦б | TРѓѓ P., TРѕѕPРѓѓ
  | C.РЪе tРѓѓ , SРѓѓ РЪЕ P., tРѕѕTРѓѓ | isD don with ╬хр┤│-simр┤ИРІє nРѓѓ ╬БРѓѓРЅѕ╬БРѓѓ' LРіЉA step РЪе forget ╬БРѓѓРЅѕ╬БРѓѓ' , PРѓЂРЅѕPРѓѓ , ╬ЊРѓЂРЅѕ╬ЊРѓѓ РЪЕ
... | Cр┤│ gРѓѓ' РЪе ╬БРѓѓ'РЅѕ╬БРѓѓ'' , tРѓѓ'РЅѕtРѓѓ'' , ╬ЊРѓѓ'РЅѕ╬ЊРѓѓ'' РЪЕ ss = Cр┤│ _ РЪе ╬БРѓѓ'РЅѕ╬БРѓѓ'' , tРѓѓ'РЅѕtРѓѓ'' , ╬ЊРѓѓ'РЅѕ╬ЊРѓѓ'' РЪЕ (done TРѕѕPРѓѓ tРѕѕTРѓѓ don (next╦б Done) Рѕи ss)

  -- Redex
╬хр┤│-simр┤ИРІє (suc nРѓѓ) ╬БРѓЂРЅѕ╬БРѓѓ LРіЉA step РЪе ╬БРѓЂРЅѕ╬БРѓЃ , PРѓЂРЅѕPРѓѓ , ╬ЊРѓЂРЅѕ╬ЊРѓѓ РЪЕ
  | ╬БРѓѓ' P., H P., m P., HРІцA P., ╬БРѓѓРЅѕ╬БРѓѓ' P., next╦б | TРѓѓ P., TРѕѕPРѓѓ
  | C.РЪе tРѓѓ , SРѓѓ РЪЕ P., tРѕѕTРѓѓ | isR (Step {p' = РѕЎ} ())

╬хр┤│-simр┤ИРІє (suc nРѓѓ) ╬БРѓЂРЅѕ╬БРѓѓ LРіЉA step РЪе ╬БРѓЂРЅѕ╬БРѓЃ , PРѓЂРЅѕPРѓѓ , ╬ЊРѓЂРЅѕ╬ЊРѓѓ РЪЕ
  | ╬БРѓѓ' P., H P., m P., HРІцA P., ╬БРѓѓРЅѕ╬БРѓѓ' P., next╦б | TРѓѓ P., TРѕѕPРѓѓ
  | C.РЪе tРѓѓ , SРѓѓ РЪЕ P., tРѕѕTРѓѓ | isR (Step {p' = РЪе a , b , c РЪЕ} step') with isFork? tРѓѓ

  -- step-РѕЁ
╬хр┤│-simр┤ИРІє (suc nРѓѓ) ╬БРѓЂРЅѕ╬БРѓѓ LРіЉA step РЪе ╬БРѓЂРЅѕ╬БРѓЃ , PРѓЂРЅѕPРѓѓ , ╬ЊРѓЂРЅѕ╬ЊРѓѓ РЪЕ
  | ╬БРѓѓ' P., H P., m P., HРІцA P., ╬БРѓѓРЅѕ╬БРѓѓ' P., next╦б | TРѓѓ P., TРѕѕPРѓѓ
  | C.РЪе tРѓѓ , SРѓѓ РЪЕ P., tРѕѕTРѓѓ | isR (Step {p' = РЪе ╬ЊРѓѓ' , tРѓѓ' , SРѓѓ' РЪЕ} stepРѓѓ) | no ┬гfork with updateрхђ tРѕѕTРѓѓ РЪе tРѓѓ' , SРѓѓ' РЪЕ
... | TРѓѓ' P., uрхђ with updateр┤Й TРѕѕPРѓѓ TРѓѓ'
... | PРѓѓ' P., uр┤Й with РЪе forget ╬БРѓѓРЅѕ╬БРѓѓ' , trans-РЅѕр┤Й PРѓЂРЅѕPРѓѓ LРѓЂ.Рїю updateр┤ЙРѕЎ HРІцA uр┤Й РїЮр┤Й , trans-РЅѕр┤┤ ╬ЊРѓЂРЅѕ╬ЊРѓѓ Рїю stepр┤┤-╬Њ HРІцA stepРѓѓ РїЮр┤┤ РЪЕ
... | gРѓѓРЅѕgРѓѓ' with ╬хр┤│-simр┤ИРІє nРѓѓ ╬БРѓѓРЅѕ╬БРѓѓ' LРіЉA step gРѓѓРЅѕgРѓѓ'
... | Cр┤│ gРѓѓ'' gРѓѓ'РЅѕgРѓѓ'' ss  = Cр┤│ _ gРѓѓ'РЅѕgРѓѓ'' (step-РѕЁ TРѕѕPРѓѓ tРѕѕTРѓѓ ┬гfork stepРѓѓ (next╦б Step) uрхђ uр┤Й Рѕи ss)

  -- fork
╬хр┤│-simр┤ИРІє {ls = ls} (suc nРѓѓ) ╬БРѓЂРЅѕ╬БРѓѓ LРіЉA step РЪе ╬БРѓЂРЅѕ╬БРѓЃ , PРѓЂРЅѕPРѓѓ , ╬ЊРѓЂРЅѕ╬ЊРѓѓ РЪЕ
  | ╬БРѓѓ' P., H P., m P., HРІцA P., ╬БРѓѓРЅѕ╬БРѓѓ' P., next╦б | TРѓѓ P., TРѕѕPРѓѓ
  | C.РЪе _ , SРѓѓ РЪЕ P., tРѕѕTРѓѓ | isR (Step {p' = РЪе ╬ЊРѓѓ' , tРѓѓ' , SРѓѓ' РЪЕ} stepРѓѓ) | yes (Fork {h = HРѓѓ} HРіЉHРѓѓ tРѓѓр┤┤)
    rewrite secureStack SРѓѓ with updateрхђ tРѕѕTРѓѓ РЪе tРѓѓ' , SРѓѓ' РЪЕ
... | TРѓѓ' P., uрхђ with updateр┤Й TРѕѕPРѓѓ TРѓѓ'
... | PРѓѓ' P., uр┤Й with lookupр┤Й (HРѓѓ Рѕѕр┤И ls) PРѓѓ'
... | TРѓѓр┤┤ P., HРѕѕPРѓѓ' with updateр┤Й HРѕѕPРѓѓ' (TРѓѓр┤┤ Рќ╗ РЪе tРѓѓр┤┤ , [] РЪЕ)
... | PРѓѓ'' P., uРѓѓр┤Й with trans-РЅѕр┤Й (trans-РЅѕр┤Й PРѓЂРЅѕPРѓѓ LРѓЂ.Рїю updateр┤ЙРѕЎ HРІцA uр┤Й РїЮр┤Й) LРѓЂ.Рїю updateр┤ЙРѕЎ (trans-РІб HРіЉHРѓѓ HРІцA) uРѓѓр┤Й РїЮр┤Й | trans-РЅѕр┤┤ ╬ЊРѓЂРЅѕ╬ЊРѓѓ Рїю stepр┤┤-╬Њ HРІцA stepРѓѓ РїЮр┤┤
... | PРѓѓРЅѕPРѓѓ' | ╬ЊРѓѓРЅѕ╬ЊРѓѓ' with ╬хр┤│-simр┤ИРІє nРѓѓ ╬БРѓѓРЅѕ╬БРѓѓ' LРіЉA step РЪе forget ╬БРѓѓРЅѕ╬БРѓѓ' , PРѓѓРЅѕPРѓѓ'  , ╬ЊРѓѓРЅѕ╬ЊРѓѓ' РЪЕ
... | Cр┤│ gРѓѓ'' gРѓѓРЅѕgРѓѓ'' ss = Cр┤│ _ gРѓѓРЅѕgРѓѓ'' (fork TРѕѕPРѓѓ tРѕѕTРѓѓ stepРѓѓ uрхђ uр┤Й HРѕѕPРѓѓ' (next╦б (Fork HРѓѓ (lengthрхђ TРѓѓр┤┤) HРіЉHРѓѓ)) uРѓѓр┤Й Рѕи ss)

  -- forkРѕЎ
╬хр┤│-simр┤ИРІє (suc nРѓѓ) ╬БРѓЂРЅѕ╬БРѓѓ LРіЉA step РЪе ╬БРѓЂРЅѕ╬БРѓЃ , PРѓЂРЅѕPРѓѓ , ╬ЊРѓЂРЅѕ╬ЊРѓѓ РЪЕ
  | ╬БРѓѓ' P., H P., m P., HРІцA P., ╬БРѓѓРЅѕ╬БРѓѓ' P., next╦б | TРѓѓ P., TРѕѕPРѓѓ
  | C.РЪе ._ , SРѓѓ РЪЕ P., tРѕѕTРѓѓ | isR (Step {p' = РЪе ╬ЊРѓѓ' , tРѓѓ' , SРѓѓ' РЪЕ} stepРѓѓ) | yes (ForkРѕЎ lРіЉH tРѓѓр┤┤)
    rewrite secureStack SРѓѓ with updateрхђ tРѕѕTРѓѓ РЪе tРѓѓ' , SРѓѓ' РЪЕ
... | TРѓѓ' P., uрхђ with updateр┤Й TРѕѕPРѓѓ TРѓѓ'
... | PРѓѓ' P., uр┤Й with РЪе forget ╬БРѓѓРЅѕ╬БРѓѓ' , trans-РЅѕр┤Й PРѓЂРЅѕPРѓѓ LРѓЂ.Рїю updateр┤ЙРѕЎ HРІцA uр┤Й РїЮр┤Й , trans-РЅѕр┤┤ ╬ЊРѓЂРЅѕ╬ЊРѓѓ Рїю stepр┤┤-╬Њ HРІцA stepРѓѓ РїЮр┤┤ РЪЕ
... | gРѓѓРЅѕgРѓѓ' with ╬хр┤│-simр┤ИРІє nРѓѓ ╬БРѓѓРЅѕ╬БРѓѓ' LРіЉA step gРѓѓРЅѕgРѓѓ'
... | Cр┤│ gРѓѓ'' gРѓѓ'РЅѕgРѓѓ'' ss = Cр┤│ _ gРѓѓ'РЅѕgРѓѓ'' (forkРѕЎ TРѕѕPРѓѓ tРѕѕTРѓѓ stepРѓѓ uрхђ uр┤Й (next╦б Step) Рѕи ss)

  -- Stuck
╬хр┤│-simр┤ИРІє (suc nРѓѓ) ╬БРѓЂРЅѕ╬БРѓѓ LРіЉA step РЪе ╬БРѓЂРЅѕ╬БРѓЃ , PРѓЂРЅѕPРѓѓ , ╬ЊРѓЂРЅѕ╬ЊРѓѓ РЪЕ
  | ╬БРѓѓ' P., H P., m P., HРІцA P., ╬БРѓѓРЅѕ╬БРѓѓ' P., next╦б | TРѓѓ P., TРѕѕPРѓѓ
  | C.РЪе tРѓѓ , SРѓѓ РЪЕ P., tРѕѕTРѓѓ | isS stuck with ╬хр┤│-simр┤ИРІє nРѓѓ ╬БРѓѓРЅѕ╬БРѓѓ' LРіЉA step РЪе forget ╬БРѓѓРЅѕ╬БРѓѓ' , PРѓЂРЅѕPРѓѓ , ╬ЊРѓЂРЅѕ╬ЊРѓѓ РЪЕ
... | Cр┤│ gРѓѓ' РЪе ╬БРѓѓ'РЅѕ╬БРѓѓ'' , tРѓѓ'РЅѕtРѓѓ'' , ╬ЊРѓѓ'РЅѕ╬ЊРѓѓ'' РЪЕ ss = Cр┤│ _ РЪе ╬БРѓѓ'РЅѕ╬БРѓѓ'' , tРѓѓ'РЅѕtРѓѓ'' , ╬ЊРѓѓ'РЅѕ╬ЊРѓѓ'' РЪЕ (skip TРѕѕPРѓѓ tРѕѕTРѓѓ stuck (next╦б Skip) Рѕи ss)

╬хр┤│-simРІє : Рѕђ {l n ls} {gРѓЂ gРѓЂ' gРѓѓ : Global ls} -> Dec (l РіЉ A) -> ( l P., n ) Ріб gРѓЂ Рєф gРѓЂ' -> gРѓЂ РЅѕр┤│ gРѓѓ -> gРѓѓ РєфРІє-РЅѕр┤│ gРѓЂ'
╬хр┤│-simРІє (yes LРіЉA) step x = ╬хр┤│-simр┤ИРІє _ (align (╬БРѓЂРЅѕ╬БРѓѓ x)) LРіЉA step x
╬хр┤│-simРІє {gРѓЂ = gРѓЂ} {gРѓЂ' = gРѓЂ'} {gРѓѓ = gРѓѓ} (no HРІцA) stepр┤┤ gРѓЂРЅѕgРѓѓ = Cр┤│ gРѓѓ ( trans-РЅѕр┤│ (sym-РЅѕр┤│ (Рїю ╬хр┤│-simр┤┤ HРІцA stepр┤┤ РїЮр┤│)) gРѓЂРЅѕgРѓѓ) []
