import Lattice as L
import Scheduler as S
open import Scheduler.Security

module Concurrent.Graph {ùìõ : L.Lattice} {ùì¢ : S.Scheduler ùìõ} (A : L.Label ùìõ) (ùìù : NIÀ¢ ùìõ A ùì¢) where

import Types as T
open T ùìõ

open import Sequential.Calculus ùìõ
import Sequential.Security.Graph ùìõ A as G

import Concurrent.Calculus as C
open C ùìõ ùì¢
open import Concurrent.Erasure A ùìù

open import Relation.Nullary
open import Relation.Binary.PropositionalEquality

data EraseMap·µÄ {l} (l‚äëA : l ‚äë A) : Pool l -> Pool l -> Set where
  [] : EraseMap·µÄ l‚äëA [] []
  _‚óÖ_ : ‚àÄ {T‚ÇÅ T‚ÇÇ P‚ÇÅ P‚ÇÇ} -> G.Erase·µÄÀ¢ (yes l‚äëA) T‚ÇÅ T‚ÇÇ -> EraseMap·µÄ l‚äëA P‚ÇÅ P‚ÇÇ -> EraseMap·µÄ l‚äëA (T‚ÇÅ ‚óÖ P‚ÇÅ) (T‚ÇÇ ‚óÖ P‚ÇÇ)
  ‚àô : EraseMap·µÄ l‚äëA ‚àô ‚àô

lift-map-Œµ·µÄ : ‚àÄ {l} (l‚äëA : l ‚äë A) (P : Pool l) -> EraseMap·µÄ l‚äëA P (map-Œµ·µÄ l‚äëA P)
lift-map-Œµ·µÄ l‚äëA C.[] = []
lift-map-Œµ·µÄ l‚äëA (t C.‚óÖ P) = (G.lift-Œµ·µÄÀ¢ (yes l‚äëA) t) ‚óÖ (lift-map-Œµ·µÄ l‚äëA P)
lift-map-Œµ·µÄ l‚äëA C.‚àô = ‚àô


unlift-map-Œµ·µÄ : ‚àÄ {l} {P P' : Pool l } {l‚äëA : l ‚äë A} -> EraseMap·µÄ l‚äëA P P' -> P' ‚â° map-Œµ·µÄ l‚äëA P
unlift-map-Œµ·µÄ [] = refl
unlift-map-Œµ·µÄ (e‚ÇÅ ‚óÖ e‚ÇÇ) with G.unlift-Œµ·µÄÀ¢ e‚ÇÅ | unlift-map-Œµ·µÄ e‚ÇÇ
... | eq‚ÇÅ | eq‚ÇÇ rewrite eq‚ÇÅ | eq‚ÇÇ = refl
unlift-map-Œµ·µÄ ‚àô = refl

ext-Œµ-map·µÄ : ‚àÄ {l} {P P' : Pool l } {l‚äëA l‚äëA' : l ‚äë A} -> EraseMap·µÄ l‚äëA P P' -> EraseMap·µÄ l‚äëA' P P'
ext-Œµ-map·µÄ [] = []
ext-Œµ-map·µÄ (x ‚óÖ x‚ÇÅ) = G.ext-Œµ·µÄÀ¢ x ‚óÖ (ext-Œµ-map·µÄ x‚ÇÅ)
ext-Œµ-map·µÄ ‚àô = ‚àô

--------------------------------------------------------------------------------

data Erase·¥æ {l : Label} : Dec (l ‚äë A) -> Pool l -> Pool l -> Set where
  Map·µÄ : ‚àÄ {P‚ÇÅ P‚ÇÇ : Pool l} {l‚äëA : l ‚äë A} -> EraseMap·µÄ l‚äëA P‚ÇÅ P‚ÇÇ -> Erase·¥æ (yes l‚äëA) P‚ÇÅ P‚ÇÇ
  ‚àô : ‚àÄ {P} {l‚ã§A : l ‚ã§ A} -> Erase·¥æ (no l‚ã§A) P ‚àô

lift-Œµ·¥æ : ‚àÄ {l} (x : Dec (l ‚äë A)) (P : Pool l) -> Erase·¥æ x P (Œµ·¥æ x P)
lift-Œµ·¥æ (yes l‚äëA) P = Map·µÄ (lift-map-Œµ·µÄ l‚äëA P)
lift-Œµ·¥æ (no ¬¨p) P = ‚àô

unlift-Œµ·¥æ : ‚àÄ {l} {x : Dec (l ‚äë A)} {P P' : Pool l} -> Erase·¥æ x P P' -> P' ‚â° Œµ·¥æ x P
unlift-Œµ·¥æ (Map·µÄ x) = unlift-map-Œµ·µÄ x
unlift-Œµ·¥æ ‚àô = refl

open import Data.Empty

ext-Œµ·¥æ : ‚àÄ {l} {x : Dec (l ‚äë A)} {T T' : Pool l} -> Erase·¥æ x T T' -> (y : Dec (l ‚äë A)) -> Erase·¥æ y T T'
ext-Œµ·¥æ (Map·µÄ x) (yes p) = Map·µÄ (ext-Œµ-map·µÄ x)
ext-Œµ·¥æ (Map·µÄ {l‚äëA = l‚äëA} x) (no ¬¨p) = ‚ä•-elim (¬¨p l‚äëA)
ext-Œµ·¥æ {x = no l‚ã§A} ‚àô (yes p) = ‚ä•-elim (l‚ã§A p)
ext-Œµ·¥æ ‚àô (no ¬¨p) = ‚àô

--------------------------------------------------------------------------------

data EraseMap·¥æ : ‚àÄ {ls} -> Pools ls -> Pools ls -> Set where
  [] : EraseMap·¥æ [] []
  _‚óÖ_ : ‚àÄ {l ls} {{u : Unique l ls}} {Ps‚ÇÅ Ps‚ÇÇ : Pools ls} {P‚ÇÅ P‚ÇÇ : Pool l} ->
        Erase·¥æ (l ‚äë? A) P‚ÇÅ P‚ÇÇ -> EraseMap·¥æ Ps‚ÇÅ Ps‚ÇÇ -> EraseMap·¥æ (P‚ÇÅ ‚óÖ Ps‚ÇÅ ) (P‚ÇÇ ‚óÖ Ps‚ÇÇ)

lift-map-Œµ·¥æ : ‚àÄ {ls} -> (Ps : Pools ls) -> EraseMap·¥æ Ps (map-Œµ·¥æ Ps)
lift-map-Œµ·¥æ C.[] = []
lift-map-Œµ·¥æ (T C.‚óÖ Ps) = (lift-Œµ·¥æ (_ ‚äë? A) T) ‚óÖ lift-map-Œµ·¥æ Ps

unlift-map-Œµ·¥æ : ‚àÄ {ls} {Ps Ps' : Pools ls} -> EraseMap·¥æ Ps Ps' -> Ps' ‚â° map-Œµ·¥æ Ps
unlift-map-Œµ·¥æ [] = refl
unlift-map-Œµ·¥æ (e‚ÇÅ ‚óÖ e‚ÇÇ) rewrite unlift-Œµ·¥æ {x = _ ‚äë? A} e‚ÇÅ | unlift-map-Œµ·¥æ e‚ÇÇ = refl

--------------------------------------------------------------------------------
